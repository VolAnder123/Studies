22{{

                     mwl                                 
                     mwl           ДОКУМЕНТАЦИЯ          ▒▒
                     mwl    на систему ЭКО версия 3.4.   ▒▒
                     mwl       (описание применения)     ▒▒
                     mwl                                 ▒▒
                       ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
       
       

     Настоящий документ   является описанием  применения  программного
 комплекса  ЭКО  (далее  по  тексту  -  комплекс).  Документ  содержит
 сведения о  режимах работы  комплекса,   составе, особенностях и усло-
 виях применения необходимых программных и технических средств. В доку-
 менте описываются также процедуры развертывания комплекса.

     При эксплуатации комплекса необходимо дополнительно  руководство-
 ваться  сведениями,   приведенными в следующих документах:
 @-->@54@"Комплекс программ ЭКО версия 3.4. Основные программные средства.
 Руководство программиста";
 @-->@51@"Комплекс программ ЭКО версия 3.4. Программное средство ELK.
 Руководство программиста";
 @-->@52@"Комплекс программ ЭКО версия 3.4. Средство анализа Базы знаний
 XHT. Руководство программиста ";
 @-->@53@"Комплекс программ ЭКО версия 3.4. Стандартные интерфейсы.
 Руководство программиста".

                             weСОДЕРЖАНИЕ:


         1.     Введение                       
        @1.1.@02@Назначение комплекса           
        @1.2.@03@Условия применения             
         2.     Подготовка комплекса к работе
        @2.1.@222@Инсталляция
        @2.2.@333@Настройка и проверка
        @2.3.@323@Деинсталляция
         3.     Экспертные системы, общие сведения об их создании и
                использовании средствами комплекса
        @3.1.@04@Применение экспертных систем
        @3.2.@06@Использование комплекса для разработки экспертных систем
        @3.3.@07@Функционирование комплекса в различных фазах
                cуществования  экспертных систем
        @3.4.@08@Представление знаний экспертов
        @3.5.@09@Структура комплекса
         4.     Особенности представления и интерпретации
                экспертных знаний
        @4.1.@10@Структура моделей проблемной области
        @4.2.@12@Стратегия решения задач
         5.     Язык представления знаний
        @5.1.@13@Общие сведения
        @5.2.@15@Описание модели
        @5.3.@16@Описание атрибутов проблемной области
        @5.4.@17@Арифметические и логические выражения
        @5.5.@18@Описание правил вывода значений атрибутов
        @5.6.@19@Описание сценария консультации
        @6.@20@  Режим приобретения знаний
        @7.@21@  Режим консультации
         8.     Вспомогательные средства комплекса
        @8.1.@23@Электронная книга ELK            (см. подробнее -> @*@51@)
        @8.2.@24@Средство анализа Базы знаний XHT (см. подробнее -> @**@52@)
        @8.3.@25@Стандартные интерфейсы           (см. подробнее -> @***@53@)
         9.  Приложение
        @9.1.@223@ Формат файла EKO.ANS
        
        
}}
2{{

                  mwl                             
                  mwl    НАЗНАЧЕНИЕ КОМПЛЕКСА     ▒▒
                  mwl                             ▒▒
                   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒


     wr1.1.1.  Комплекс представляет собой совокупность программных средств,
предназначенных для создания и использования экспертных  систем,  решающих
задачи в статических проблемных областях.

     wr1.1.2. Комплекс может быть использован для создания экспертных систем
диагностики  технических,  биологических  объектов,  вывода  эвристических
оценок  риска  или  надежности  (в  строительстве,   медицине   и   т.д.),
качественного прогнозирования, обучения.

     wr1.1.3.  Средствами  комплекса  экспертные  системы  могут создаваться
непосредственно   высококвалифицированными   специалистами    в    области
приложения  (экспертами),  не  обладающими  навыками  программирования.  В
сложных случаях они  могут  привлекать  специалистов  в  области  создания
экспертных систем (инженеров по знаниям).

     wr1.1.4.   Экспертные   системы,   создаваемые   средствами  комплекса,
позволяют решать конкретные прикладные задачи, а также объяснять, ЗАЧЕМ во
время решения пользователю задается тот или  иной  вопрос  и  КАК  получен
результат.

     wr1.1.5. Комплекс работает в диалоговом режиме. Использование подсказок
и  управление  диалогом  с  помощью  меню обеспечивает доступность средств
комплекса для пользователя-непрограммиста.

     wr1.1.6. Комплекс  имеет  средства  для  организации  взаимодействия  с
внешним программным окружением.

                                           @Вперед@03@ @Оглавление@22@
}}
3{{

                        mwl                           
                        mwl    УСЛОВИЯ ПРИМЕНЕНИЯ     ▒▒
                        mwl                           ▒▒
                          ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒



     wr1.2.1.  Комплекс  функционирует  в  составе  программного обеспечения
персональных  электронных  вычислительных  машин  (ПЭВМ)  типа   ЕС   1841
Е11.700.012   и  последующих  моделей  или  ПЭВМ  типа  РС/ХТ  ,  РС/AТ  с
оперативной памятью не  менее  512  Кбайт,  цветным  графическим  дисплеем
(CGA,EGA,VGA),  накопителем на жестком магнитном диске емкостью не менее 5
Мбайт и накопителем на гибких магнитных дисках емкостью 360 Кбайт в  среде
операционной  системы АЛЬФА ДОС 16 или совместимой с ней МS DOS версии 3.0
и выше.

     wr1.2.2.  Комплекс использует альтернативную версию кодировки сим-
волов кириллицы. Однако предусмотрена возможность его настройки для 
работы в других кодировках. 

                                @Вперед@222@ @Оглавление@22@ @Назад@02@
}}
222{{
                            
                        mwl                   
                        mwl   ИНСТАЛЛЯЦИЯ     ▒▒
                        mwl                   ▒▒
                          ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒



    wr2.1.1. Комплекс программ ЭКО поставляется на 8  дискетах  емко-
 стью 360 Кбайт, защищенных от несанкционированного копирования.  Ко-
 пирование этих дискет на жесткий диск выполняется специальным  обра-
 зом при помощи программы INSTALL.EXE и называется инсталляцией. 
      При поставке комплекса пользователь получает право  произвести
 ограниченное число инсталляций, для чего на одной из дискет (ключе-
 вой дискете) имеется счетчик числа инсталляций. Этот счетчик  после 
 каждой  инсталляции уменьшается на 1, и когда он  обнулится,  даль-
 нейшие инсталляции станут невозможны.
    
    wr2.1.2. Инсталляция комплекса на жесткий  магнитный  диск  ПЭВМ
 выполняется следующим образом.
      Сначала  необходимо  выбрать жесткий диск, имеющий не менее 2,7
 Мбайт свободной памяти (пусть для определенности это будет диск - C:
 ), затем следует вставить в дисковод ПЭВМ (например, A:) первую дис-
 кету, сделать дисковод A: текущим и, наконец, выполнить  команду за-
 пуска инсталлятора:

                        INSTALL C:

      В  соответствии с сообщениями инсталлятора необходимо выполнить
 действия по смене дискет.
      В результате процесса инсталляции  информация  с  дискет  будет 
 скопирована на жесткий диск ( директорий C:\EKO ), а  счетчик  числа
 инсталляций будет уменьшен на 1.

                               @Вперед@333@ @Оглавление@22@ @Назад@3@
}}
333{{

                      mwl                           
                      mwl   НАСТРОЙКА И ПРОВЕРКА    ▒▒
                      mwl                           ▒▒
                        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒



    wr2.2.1. Кроме инсталляции, для некоторых компонент комплекса мо-
жет потребоваться настройка на языковую среду. Соответствующая инфор-
мация приводится в документах, описывающих конкретные компоненты. 

    wr2.2.2. Для того, чтобы завершить подготовку комплекса к работе,
 следует установить системную переменную операционной системы PATH та-
 ким образом, чтобы обеспечить доступ к директорию C:\EKO  из  других 
 директориев.
      Рекомендуем модифицировать файл AUTOEXEC.BAT таким образом, что-
 бы все установки системных переменных выполнялись автоматически в мо-
 мент загрузки операционной системы.

    wr2.2.3. Чтобы убедиться в том, что инсталляция  прошла  успешно,
рекомендуем запустить демонстрационный пример, который в  данном  слу-
чае будет выступать в роли теста. Для этого следует выдать команду:
 
                         DEMO1


                             @Вперед@323@ @Оглавление@22@ @Назад@222@
}}
323{{

                        mwl                   
                        mwl  ДЕИНСТАЛЛЯЦИЯ    ▒▒
                        mwl                   ▒▒
                          ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒



    wr2.3.1. В состав комплекса включена также программа  деинсталля-
ции UNINST.EXE, которая позволяет "снять" с жесткого диска копию ком-
плекса, установленную туда при помощи программы INSTALL.EXE. Это  оз-
начает, что после запуска деинсталлятора программы комплекса на жест-
ком диске становятся неработоспособными, однако счетчик числа инстал-
ляций на ключевой дискете увеличится на единицу.
     Для того, чтобы выполнить деинсталляцию, необходимо  вставить  в 
дисковод (например, A) ключевую дискету (ГМД 1), сделать его  текущим  
и выполнить команду:

                         UNINST A:

                             @Вперед@04@ @Оглавление@22@ @Назад@333@
}}
4{{
                   mwl                          
                   mwl ЭКСПЕРТНЫЕ СИСТЕМЫ,      ▒▒
                   mwl ОБЩИЕ СВЕДЕНИЯ ОБ ИХ     ▒▒
                   mwl СОЗДАНИИ И ИСПОЛЬЗОВАНИИ ▒▒
                   mwl СРЕДСТВАМИ КОМПЛЕКСА     ▒▒
                   mwl                          ▒▒
                     ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒


      wr3.1.        wrПрименение экспертных систем
       
       wr3.1.1. Создание экспертных  систем  значительно  расширило  область
приложения  вычислительной  техники,  позволив использовать ее для решения
неформализованных    задач.    Различие    между    формализованными     и
неформализованными    задачами    обусловливается    характером    знаний,
используемых для решения этих задач. Знания, которыми владеет специалист в
какой-либо области, можно разделить на  точные,  выраженные  формально,  и
неточные   (неформальные).   Точные   знания   формулируются  в  книгах  и
руководствах в виде общих,  универсальных  и  строгих  суждений,  законов,
формул,  моделей, алгоритмов и т.д. Неформальные знания обычно не попадают
в книги и руководства вследствие их  субъективности  и  приблизительности.
Знания этого рода являются результатом обобщения многолетнего опыта работы
специалиста  и  представляют  собой,  как правило, множество эвристических
приемов и правил.  Они  образуют  то,  что  называют  опытом  и  интуицией
специалистов.
       Задачи, решаемые на основе формальных знаний, называют формальными,
а  задачи,  решаемые  с  помощью  неточных  знаний,  -  неформализованными
задачами. Последние, возможно, и допускают формализацию, но точные  методы
их  решения  либо  еще  не  получены,  либо  слишком  сложны.  В  процессе
деятельности в описательных областях (т.е.  в  науках  и  дисциплинах,  не
использующих математическую формализацию) специалисты решают, как правило,
неформализованные задачи.
       Экспертные  системы  предназначены  для  решения  неформализованных
задач на основе неточных знаний, представляющих опыт эксперта  по  решению
задач в области приложения.
       
       wr3.1.2.  В  отличие  от  традиционных  программ,  ориентированных на
решение  формальных  задач,   экспертные   системы   обладают   следующими
особенностями:
       алгоритм  получения  решения не известен заранее, а строится самими
экспертными системами с помощью символьных рассуждений  на  основе  знаний
экспертов;
       полученные решения обосновываются системой, т.е. экспертная система
"осознает" в терминах пользователя, как было получено решение;
       экспертные системы способны анализировать и объяснять свои действия
и знания;
       экспертные  системы  могут  приобретать  новые  знания  и  менять в
соответствии с ними свое поведение;
       эксперты, вводящие знания в экспертные системы, могут  не  обладать
навыками программирования.
                                    @Вперед@06@ @Оглавление@22@ @Назад@323@
}}
6{{
                    mwl                                  
                    mwl   Использование  комплекса для   ▒▒
                    mwl   разработки экспертных систем   ▒▒
                    mwl                                  ▒▒
                      ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

       wr3.2.1.   Программы   комплекса   представляет  собой  настраиваемую
"оболочку" экспертной системы.
       "Оболочками" называются такие инструментальные средства, в  которых
реализован   некоторый   стандартный  способ  представления  знаний  (т.е.
реализован некоторый язык представления знаний) и стандартизован  механизм
вывода  решений.  Подобная  стандартизация  позволяет  значительно снизить
трудоемкость разработки экспертных систем, так как "оболочка" содержит все
программные  средства,  необходимые  для  создания  и  использования  этих
систем.   "Оболочки"   включают  в  себя  следующие  подсистемы:  средства
приобретения  знаний,  средства  решения  задач  (ведения   консультации),
средства объяснения и ведения диалога с пользователем, а также базу знаний
(возможно,  пустую).  Разработка  экспертной  системы с помощью "оболочки"
сводится к введению в базу средствами приобретения знаний описания  знаний
эксперта  о  проблемной  области  и  порядке решения задач, выраженного на
языке  представления   знаний   "оболочки".   Решение   конкретных   задач
осуществляется   средствами   ведения   консультации  путем  интерпретации
содержимого базы знаний с учетом данных о конкретной ситуации в проблемной
области (исходных данных консультации).
       
       wr3.2.2. В соответствии с п. 3.2.1 средствами  комплекса  реализованы
два  режима  работы: режим приобретения знаний и режим консультации (режим
решения  задач).  Оба  режима  обеспечивают  диалоговое  взаимодействие  с
пользователем.   Режим  консультации  обеспечивает  объяснение  получаемых
решений.
                                       @Вперед@07@ @Оглавление@22@ @Назад@04@
 }}
 7{{
               mwl                                 
               mwl  Функционирование  комплекса в  ▒▒
               mwl  различных фазах существования  ▒▒
               mwl  экспертных систем              ▒▒
               mwl                                 ▒▒
                 ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
                 
       wr3.3.1. Выделяют следующие  фазы  существования  экспертных  систем:
создание, использование и модификацию. Программы комплекса используются во
всех  фазах.  В  фазе  создания  (модификации) с помощью средств комплекса
разработчик   экспертной   системы   может   вводить   в    базу    знаний
(модифицировать)   описание   знаний   эксперта,   выраженное   на   языке
представления знаний . Кроме того, он может отлаживать базу знаний,  решая
с ее помощью тестовые задачи и устраняя найденные ошибки. При традиционном
подходе   к   разработке   программ   фазе   создания  экспертной  системы
соответствуют этапы алгоритмизации, программирования  и  отладки.  В  фазе
использования  экспертной  системы  программы  комплекса  применяются  для
решения задач из проблемной области.
       
       wr3.3.2.   В   фазе   создания   (модификации)   экспертной   системы
пользователями комплекса являются:
       эксперты,  т.е.  специалисты  в  той области знаний, задачи которой
должна решать экспертная система;
       инженеры по знаниям, т.е. специалисты по проектированию  экспертных
систем.
       Эксперт должен построить адекватную модель проблемной области, т.е.
описать саму область и указать порядок решения задач данного типа.
       Инженер   по   знаниям  должен:  помочь  эксперту  выявить  знания,
необходимые для функционирования экспертной системы;
       выразить выявленные  знания  на  языке  представления  знаний;  при
необходимости   выделить   и  запрограммировать  традиционными  средствами
некоторые нестандартные функции, не предусмотренные в комплексе.
       Разработанное описание модели  проблемной  области,  выраженное  на
языке  представления знаний , вводится в базу знаний в режиме приобретения
знаний и преобразуется во внутреннее представление модели (в дальнейшем по
тексту - модель). Ввод описания может осуществляться по частям,  при  этом
проверяется синтаксическая корректность вводимых фрагментов.
       После  того  как  описание  модели  введено  полностью, проверяется
целостность модели. Если в ходе проверки ошибки не обнаружены,  полученная
модель  помечается  как корректная (т.е. готовая к работе), после чего она
может быть использована в  режиме  консультации.  При  обнаружении  ошибок
сообщения  о  них  заносятся  в протокол проверки, а модель помечается как
неготовая к работе. Ошибки могут быть исправлены путем коррекции  описания
модели в режиме приобретения знаний.
       Экспертная система считается созданной, если в базе знаний получена
соответствующая корректная модель.
       Допускается  создание  иерархических  экспертных систем, включающих
несколько взаимосвязанных моделей. Каждая модель предназначена для решения
некоторой частной подзадачи в проблемной области, причем  одна  из  них  -
управляющая,  или  главная. Все модели оформляются в виде отдельных файлов
данных. Единственным ограничением на  количество  моделей  в  базе  знаний
является объем доступной памяти на внешнем носителе информации.
       Решение   задачи   в   проблемной   области   будет  осуществляться
программами комплекса в режиме консультации на основе:
       одной или нескольких взаимосвязанных моделей,  находящихся  в  базе
знаний  и  представляющих  знания эксперта о методах решения задач данного
типа (например, модель для диагностики сердечно-сосудистых заболеваний);
       исходных  данных,  описывающих  конкретную  ситуацию  в  проблемной
области, для которой пользователь хочет получить результат.
       Чтобы  получить  решение  задачи,  необходимо в режиме консультации
выбрать в базе знаний соответствующую модель (или главную модель), а затем
в ответ на вопросы программ комплекса ввести те исходные данные, в которых
возникает необходимость в ходе вывода решения.
       Для   проверки   адекватности   модели   необходимо   провести   ее
тестирование в режиме консультации. В ходе тестирования экспертная система
должна  решить  достаточное  количество  контрольных  задач. Результаты ее
работы следует сравнить с решениями, предложенными экспертом. Кроме  того,
с   помощью  средств  объяснения  эксперт  должен  проверить  правильность
рассуждений системы в ходе вывода решений. Если  эксперт  не  удовлетворен
решениями или рассуждениями системы, он может с помощью средств объяснения
локализовать ошибки, а затем исправить их в режиме приобретения знаний.
       
       wr3.3.3.  В  фазе  использования  экспертной  системы  с  программами
комплекса взаимодействуют конечные пользователи, т.е. те специалисты,  для
которых создавалась система. В этой фазе комплекс работает только в режиме
консультации.
       Создаваемые   средствами   комплекса   экспертные   системы   могут
использоваться  как  неспециалистами,  так  и  специалистами  в   областях
приложения  этих  систем. В первом случае система дает пользователю совет,
который тот не может получить сам. Во втором случае использование  системы
ускоряет  процесс  получения результата и (или) освобождает специалиста от
рутинной работы.
       В данной фазе средства объяснения обеспечивают доверие пользователя
к полученным экспертной системой результатам, а  также  демонстрируют  ему
применяемые  экспертами методы решения задач, которые можно использовать в
обучении.
                                      @Вперед@08@ @Оглавление@22@ @Назад@06@
 }}
 8{{
            mwl                                     
            mwl   Представление знаний экспертов    ▒▒
            mwl                                     ▒▒
              ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

       wr3.4.1.  Структура  знаний,  используемых  программами комплекса при
решении  задачи,  изображена  на  рис.  1.  База  знаний  может  содержать
несколько  моделей,  предназначенных  для  поддержания  работы  экспертных
систем в различных областях приложения. Каждая  модель  включает  описание
проблемной   области   и   знания   о   порядке  решения  задач  (сценарий
консультации).
       Описание проблемной области состоит из описаний атрибутов и  правил
вывода.
       Атрибуты  используются  для  описания состояния проблемной области,
например атрибуты "возраст", "диагноз" и т.д. Описание проблемной  области
должно содержать описания всех атрибутов, которые будут использоваться при
решении  задачи.  Описание  атрибута  включает  область  определения этого
атрибута,  а  также  некоторую  лингвистическую  информацию,   необходимую
программам комплекса для ведения диалога с конечным пользователем во время
консультации.  Комплекс ориентирован на работу со статическими проблемными
областями (значения атрибутов не изменяются  в  ходе  решения  задачи),  в
которых проблемная область может быть описана с помощью априорно заданного
набора  атрибутов (не допускается динамическое создание атрибутов во время
решения задачи).
       Средства   комплекса   позволяют   представлять   качественные    и
количественные  характеристики  проблемной  области.  Высказывания типа "А
есть В", где А - атрибут, представляющий качественную характеристику, а  В
-  элемент  области определения этого атрибута, называются утверждениями о
состоянии проблемной области. Например,  высказывание  "диагноз  -  острый
бронхит"  является утверждением в предметной области, если в ней определен
атрибут "диагноз", одним из возможных значений которого  является  "острый
бронхит".  Решение  задачи сводится к получению значений некоторых целевых
атрибутов   (например,   "диагноз"   или   "метод_обезболивания"),   и/или
определению истинности некоторых целевых утверждений.
       
       
       Структура знаний, используемых при решении задачи

 ╔═════════════════════════════════════════════════════════════╗
 ║                                          База знаний        ║
 ║                        ┌──────────────┐                     ║
 ║                     ┌──┴──────────┐   │                     ║
 ║                     │  Модель     │   │                     ║
 ║                     │ проблемной  │   │                     ║
 ║                     │  области    ├───┘                     ║
 ║                     └──────┬──────┘                         ║
 ║                            │                                ║
 ║                            │                                ║
 ║        ┌───────────────────┴──────────────┐                 ║
 ║        │                            ┌─────┴──────┐          ║
 ║        │                            │  Описание  │          ║
 ║        │                            │  проблемной│          ║
 ║        │                            │  области   │          ║
 ║        │                            └──────┬─────┘          ║
 ║        │                                   │                ║
 ║        │                                   │╔══════════════╗║
 ║ ┌──────┼─────────────────────────────────┐ │║ Декларативные║║
 ║ │      │ Процедурные знания       ┌──────┼─┴┼─────┐  знания║║
 ║ │      │                        ┌─┼─────┐│  ║    ┌┼──────┐ ║║
 ║ │┌─────┴───────┐             ┌──┴─┴────┐││  ║ ┌──┴┴─────┐│ ║║
 ║ ││  Сценарий   │             │ Правила ├┘│  ║ │ Атрибуты├┘ ║║
 ║ ││ консультации│             │ вывода  │ │  ║ └─────────┘  ║║
 ║ │└─────────────┘             └─────────┘ │  ║              ║║
 ║ └────────────────────────────────────────┘  ║              ║║
 ╚═════════════════════════════════════════════╬══════════════╬╝
                                               ║┌────────────┐║
                                               ║│  Исходные  │║
                                               ║│   данные   │║
                                               ║│консультации│║
                                               ║└────────────┘║
                                               ╚══════════════╝
                              Рис. 1
      
       Значения атрибутов и сведения об истинности утверждений о состоянии
проблемной  области  либо  запрашиваются  в  ходе консультации у конечного
пользователя (исходные данные), либо вычисляются  по  правилам  вывода  на
основе исходных данных.
       Сценарий  консультации  указывает,  значения каких атрибутов должны
быть получены в  результате  консультации,  в  каком  порядке  их  следует
выводить,  каким образом сообщать о полученных результатах и т.д. Сценарий
и правила вывода образуют процедурные знания,  причем  сценарий  выполняет
роль  метазнаний  по  отношению  к правилам. Описания атрибутов и исходные
данные образуют декларативные знания о проблемной области.

      wr3.4.2. Программные средства комплекса позволяют работать с  неточно
определенными  (неопределенными)  знаниями  о качественных характеристиках
проблемной   области.   Неточная   определенность   декларативных   знаний
представляется  с  помощью  коэффициентов  определенности, характеризующих
степень  уверенности  в  истинности  утверждений  о  состоянии  проблемной
области.   Неточная   определенность   правил   может   представляться   с
использованием  формул  нечеткой   логики,   формулы   Байеса,   а   также
произвольных эвристических формул, задаваемых экспертами.
       Средствами   комплекса   можно  создавать  такие  системы,  которые
получают  все  возможные  решения  задачи  с   соответствующими   оценками
коэффициентов определенности.
       Коэффициент   определенности   является   действительным  числом  с
точностью до двух знаков после запятой и принимает значения  из  диапазона
от -5.00 до 5.00.
       
       wr3.4.3.   В   комплексе   реализован   диалоговый   ввод   знаний  с
семантико-синтаксическим контролем знаний,  проверкой  их  целостности,  а
также  компиляция  знаний,  повышающая  эффективность  работы  комплекса в
режиме консультации.
       Решение   задач   осуществляется   в   режиме   диалога   конечного
пользователя  с  программными  средствами комплекса. В ходе решения задачи
делается попытка  вывести  значения  тех  атрибутов,  которые  отмечены  в
сценарии  как  целевые,  а  также  выполняютcя другие описанные в сценарии
действия (выдаютcя сообщения о результатах и т.д.).  При  выводе  значений
атрибутов  используетcя  метод  поиска  решения " в глубину" с последующим
выводом значений от данных.
       В ходе решения задач пользователь может  получить  объяснения,  для
чего  потребовались  запрашиваемые  у  него  данные и как получено решение
задачи.
       Средства комплекса могут проводить трассировку хода решения задачи,
что облегчает отладку моделей.
       Кроме  того,  программы  комплекса  могут  обмениваться  данными  с
внешними программами.
                                      @Вперед@09@ @Оглавление@22@ @Назад@07@
 }}
 9{{
               mwl                         
               mwl  Структура  комплекса   ▒▒
               mwl                         ▒▒
                 ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

    wr3.5.1.  Комплекс  состоит из основных (ОПС) и вспомогательных программных
средств.  Основные  программные  средства   состоят   из   взаимосвязанных
программных  компонент,  использование  которых  в  режимах консультации и
приобретении знаний обеспечивается автоматически. Вспомогательные средства
реализованы в виде автономных программ, применение  которых  при  создании
экспертных  систем  не является обязательным. В то же время, использование
этих средств позволяет улучшить качество создаваемых систем или  облегчить
процесс их создания.

    wr3.5.2. ОПС поставляются в двух вариантах: основном  и  учебном. 
 Основной вариант предназначен для создания  промышленных  экспертных
 систем. Учебный - для обучения работе с комплексом на примере "игру-
 шечных" экспертных систем небольшого объема (см.  п.  6.8).  Учебный 
 вариант по составу идентичен основному за исключением одного  модуля 
 (см. п. 3.5.4).

    wr3.5.3.  Структура  основных программных средств комплекса приведена
на рис. 2. Они включают:
      Редактор, обеспечивающий работу в режиме приобретения знаний;
      Консультатор, обеспечивающий  работу в режиме консультации;
      Загрузчик, обеспечивающий переключение режимов;
      Помощь,  которая  позволяет  пользователю  получать оперативный
 доступ к документации на комплекс, подготовленной в виде гипертекста
 (см. @п. 8.1@23@);
      Базу знаний, которая может быть пустой (например, перед началом
 эксплуатации комплекса);
      Демонстратор, обеспечивающий запуск  демонстрационных  примеров
 для быстрого ознакомления с основными возможностями Редактора и Кон-
 сультатора.
      

           Структура основных программных средств комплекса.

                     ┌──────────────────┐
         ┌───────────┤   Демонстратор   ├───────────┐
         │           └────────┬─────────┘           │
         │           ┌────────┴─────────┐           │
         │  ┌────────┤    Загрузчик     ├────────┐  │
         │  │        └──────────────────┘        │  │
         │  │                                    │  │
      ┌──┴──┴─────┐     ┌────────────┐     ┌─────┴──┴──────┐
      │ Редактор  ├─────┤  Помощь    ├─────┤ Консультатор  │
      └──┬──┬─────┘     └────────────┘     └─────┬──┬──────┘
         │  │                                    │  │
         │  │         ┌────────────────┐         │  │
         │  └─────────┤      База      ├─────────┘  │
         └────────────┤     знаний     ├────────────┘
                      └────────────────┘

                             Рис. 2

      
       В  процессе  функционирования  комплекса  Редактор  и  Консультатор
обмениваются  управлением  и  данными.  Обмен управлением производится при
помощи Загрузчика, обмен данными осуществляется через Базу знаний.  Помощь
может  быть  вызвана  в  процессе  диалога  пользователя  с  Редактором  и
Консультатором в момент, когда управление находится у пользователя.

    wr3.5.4. В основном варианте ОПС имеется также пакетный Консульта-
 тор (П-Консультатор), обеспечивающий решение задач в пакетном режиме. 
      В  @документе@54@ "Комплекс программ ЭКО версия 3.4. Основные програм-
 мные средства. Руководство программиста" содержатся все  технические
 сведения, необходимые для использования основных программных средств
 комплекса.

    wr3.5.5.   Сведения   о   вспомогательных   средствах   комплекса
содержатся также в @разделе 8@23@ настоящего документа.

                                      @Вперед@10@ @Оглавление@22@ @Назад@08@
}}
10{{
                mwl                              
                mwl  ОСОБЕННОСТИ ПРЕДСТАВЛЕНИЯ   ▒▒
                mwl  И ИНТЕРПРЕТАЦИИ ЭКСПЕРТНЫХ  ▒▒
                mwl  ЗНАНИЙ                      ▒▒
                mwl                              ▒▒
                  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

       wr4.1.    wrСтруктура моделей проблемной области
      
       wr4.1.1.  Модель  включает  в  себя  набор  атрибутов,   определяющих
множество   допустимых   состояний  проблемной  области,  правила  вывода,
описывающие знания о методах решения задач, и сценарий  консультации  (см.
 @п. 3.4.1@08@).
       
       wr4.1.2.  Для  представления  количественных характеристик проблемной
области используются  числовые  атрибуты  -  переменные,  определяемые  на
числовых  интервалах.  Например,  возраст  сотрудника  может  задаваться с
помощью числового атрибута "возраст", определенного на интервале от 18  до
90  .  Числовой  атрибут  во  время решения задачи может иметь только одно
значение.
       Значения числовых атрибутов - действительные числа,  содержащие  не
более  двух  знаков  после десятичной точки и не превышающие по абсолютной
величине 64000.00.
       Качественные    характеристики   проблемной   области   описываются
символьными  атрибутами,  которые  определяются  на  конечных   множествах
значений,  задаваемых  перечислением. Например, рекомендуемый для местного
обезболивания лекарственный препарат можно представить в виде  символьного
атрибута  "анестетик",  определенного  на следующем множестве: "новокаин",
"тримекаин", "лидокаин" и т.д. Высказывания типа  "А  есть  В",  где  А  -
символьный  атрибут,  а  В  -  элемент области определения этого атрибута,
называются утверждениями. Значением утверждения является  коэффициент  его
определенности.  Вывод символьного атрибута, т.е. вычисление его значения,
состоит   в   определении   коэффициентов   определенности    утверждений,
образованных  из  всех  возможных  значений  этого  атрибута.  Допускаются
множественные значения символьного атрибута, т.е. возможно сосуществование
в  какой-либо  ситуации  нескольких  его  значений.  Например,  символьный
атрибут  "иняз",  задающий иностранные языки, которыми владеет специалист,
может иметь одновременно несколько точно определенных значений.
       Коэффициенты определенности утверждений - это действительные числа,
принимающие значения от -5.00 до 5.00.  Коэффициенту  определенности  D(H)
утверждения H можно дать следующую содержательную интерпретацию:
      если точно известно, что Н истинно, то D(H) = 5.00;
      если точно известно, что Н ложно, то D(H) = -5.00;
      если Н может быть  с  одинаковой  уверенностью  истинно  или
 ложно, то D(H) = 0.00;
      если  Н  скорее  истинно,  чем ложно, то 0.00 < D(H) < 5.00,
 причем D(H) тем больше, чем больше уверенность в истинности Н;
      если Н скорее ложно, чем истинно, то -5.00 <  D(H)  <  0.00,
 причем D(H) тем меньше, чем больше уверенность в ложности Н.
       
       wr4.1.3.   Утверждения  и  числовые  атрибуты  называются  целями,  а
символьные   атрибуты,   представляющие   собой   множества   утверждений,
называются  сложными  целями. Значения целей определяются с помощью правил
вывода. Правило вывода указывает, каким образом  можно  получить  значение
цели  по  значениям  других  атрибутов и утверждений, называемых подцелями
правила. В зависимости от типа цели (простая или сложная) правила  делятся
на простые и сложные.
       Правила могут иметь условия применимости - выражения, вычисляемые в
момент  обращения к правилу. Правило применяется только в том случае, если
выполнено  условие  его  применимости.  Условие   применимости   считается
выполненным, если значение соответствующего выражения больше 0.
       Для  определения значения одной цели разработчик экспертной системы
может задавать несколько правил, образующих в модели упорядоченный  список
правил  вывода  данной  цели.  Порядок правил в списке отражает порядок их
рассмотрения во время решения задачи.
       
       wr4.1.4. При вводе описания модели проблемной области в  Базу  знаний
она   компилируетcя,  что  позволяет  сократить  время  решения  задачи  и
сэкономить  оперативную  память.  В  процессе   компиляции   из   числовых
атрибутов,  утверждений  и  правил  строится  сеть  вывода,  в  явном виде
включающая все  связи  между  атрибутами  и  утверждениями,  обусловленные
правилами  вывода. Сеть вывода образует И-ИЛИ граф с вершинами двух видов:
вершины первого вида соответствуют простым целям (т.е. числовым  атрибутам
и  утверждениям),  а  вершины второго вида - простым правилам. Все вершины
первого вида относятся к типу ИЛИ; второго - к типу И.  Дуги  представляют
связи  между  простыми  целями  и  простыми правилами: если простая цель G
выводится с помощью правила  Ri,  то  в  сети  имеется  дуга,  соединяющая
вершины, соответствующие G и Ri, направленная от Ri к G; если простая цель
Hj  является  подцелью  правила  Ri,  то  в сети имеется дуга, соединяющая
соответствующие вершины и направленная от Hj к Ri (см. рис. 3).
       Сложные   правила   преобразуются   в   результате   компиляции   в
совокупности  простых,  выводящих  значения  всех  утверждений  о  целевых
символьных атрибутах, соответствующих сложным правилам. Особенность  таких
простых правил состоит в том, что применение одного из них влечет за собой
применение остальных.
       Сеть  вывода  строится  следующим  образом. При вводе новой простой
цели (нового числового атрибута или нового значения символьного  атрибута)
в сеть вывода вводится вершина, соответствующая этой цели.
       При  вводе  простого  правила, т.е. правила вывода значения простой
цели, в сеть добавляется вершина, соответствующая этому правилу,  и  дуги,
представляющие  связи между простой целью и правилом, между правилом и его
подцелями. При  вводе  сложного  правила  производится  создание  из  него
нескольких простых правил, предназначенных для вывода значений утверждений
о  сложной  цели  вводимого правила. Простые правила добавляются описанным
ранее образом в сеть вывода.
       Пример  сети  вывода  и  соответствующих  ей  правил   из   области
анестезиологии приведен на рис. 4.
       В правилах представлены рекомендации относительно  целесообразности
направления   пациента   в   стационар   для   проведения   хирургического
вмешательства    под    общим    обезболиванием.    Если    травматичность
предполагаемого  вмешательства  высокая,  а риск высокий, то рекомендуется
проведение общего  обезболивания  в  стационаре.  Если  риск  не  является
высоким  или  если  травматичность  вмешательства  низкая, то в проведении
общего  обезболивания  в  условиях  стационара  нет  необходимости.   Риск
считается высоким, если пациент страдает тяжелой формой бронхиальной астмы
либо если ранее он перенес анафилактический шок.
       
       
                     bwlОписание фрагмента сети вывода
      
                              ┌─────┐
                              │  G  │
                              └──┬──╜
                                 │
                   ┌─────────┬──ИЛИ─────────────┐
                   V         V                  V
               ╔══════╗  ╔══════╗           ╔══════╗
               ║  R1  ║  ║  R2  ║   . . .   ║  Rn  ║
               ╚═══┬══╝  ╚═══┬══╝           ╚═══┬══╝
                   │       . . .              . . .
                   │
     ┌────────┬────И────────────╖
     V        V                 V
  ┌─────┐  ┌─────┐           ┌─────┐
  │ H1  │  │ H2  │   . . .   │ Hk  │
  └─────╜  └─────╜           └─────╜
      

      где G - простая цель;
          R1, R2, ... , Rn - правила вывода значения G;
          H1, H2, ... , Hk - подцели правила R1.

                                Рис. 3
       
       
                            bwlПример сети вывода

                         ┌───────────────────────┐
                         │  Общее обезболивание  │
                         │  в стационаре (ОС)    │
                         └────────────┬──────────┘
                                      │
                  ╓──────────────────ИЛИ──────────────────┐
                  V                   V                   V
              ╔══════╗             ╔══════╗            ╔══════╗
              ║  П1  ║             ║  П2  ║            ║  П3  ║
              ╚═══┬══╝             ╚═══┬══╝            ╚═══┬══╝
        ┌─────────И────────────────┐   │                   │
        V                          V   V                   V
  ┌─────────────────┐            ┌─────────┐   ┌────────────────┐
  │  Травматичность │            │ Риск    │   │ Травматичность │
  │  высокая        │            │ высокий │   │ низкая         │
  └─────────────────┘            └────┬────┘   └────────────────┘
                                      V
                                  ╔══════╗
                                  ║  П4  ║
                                  ╚═══┬══╝
                           ┌─────────ИЛИ─────────┐
                           V                     V
                  ┌────────────────┐   ┌──────────────────┐
                  │ Тяжелая форма  │   │ Перенесен        │
                  │ бронхиальной   │   │ анафилактический │
                  │ астмы (ТБ)     │   │ шок  (АШ)        │
                  └────────────────┘   └──────────────────┘
 П1:  ЕСЛИ [Травматичность.высокая] & [Риск.высокий] ТО   ОС
 П2:  ЕСЛИ ~[Риск.высокий]                           ТО   ~ОС
 П3:  ЕСЛИ [Травматичность.низкая]                   ТО   ~ОС
 П4:  ЕСЛИ ТБ|АШ                                     ТО   [Риск.высокий],

  где | - дизъюнкция, & - конъюнкция, ~ - отрицание.
       
                          Рис. 4

       
       
       wr4.1.5. Для задания модели  проблемной  области  разработчик  должен
указать,  какие  вершины  сети  вывода  являются целевыми в данной модели,
какие  сообщения  необходимо  выдать  пользователю  экспертной  системы  в
зависимости от полученных результатов, а также другую информацию о порядке
ведения консультации. Знания этого типа описываются в сценарии, являющимся
обязательным    компонентом    модели.    Сценарий    представляет   собой
последовательность предложений, снабженных условиями применимости.  Каждое
предложение  указывает, какое действие должна выполнить экспертная система
в случае применимости этого  предложения.  Возможно  выполнение  следующих
действий:
      вывести значение цели;
      выдать  сообщение пользователю;
      выдать  сообщение внешней программе;
      сбросить выведенные результаты;
      перейти к выполнению другого предложения;
      принять информацию от внешней программы;
      передать информацию о результатах решения внешней  программе;
      создать контрольную точку консультации;
      загрузить контрольную точку;
      обратиться к подмодели, решающей некоторую частную подзадачу,
 передать  ей параметры и получить выведенные в подмодели результаты;
      закончить   консультацию   с   сообщением  (СТОП).

                                       @Вперед@12@ @Оглавление@22@ @Назад@09@
 }}
 12{{
               mwl                           
               mwl  Стратегия решения задач  ▒▒
               mwl                           ▒▒
                 ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

       wr4.2.1.  В  начале  решения  задачи  выбирается  первое  предложение
сценария, проверяется условие его применимости и, если условие  выполнено,
выполняется указанное в нем действие. Если для проверки условия необходимы
значения  некоторых  целей,  эти  значения выводятся из сети вывода. Далее
проверяется условие текущего предложения. Затем осуществляется  переход  к
следующему  предложению и т.д., пока не будет обнаружено действие СТОП или
пока не будет исчерпан сценарий.
       
       wr4.2.2. При выводе значения цели делается попытка в  соответствии  с
описанием   проблемной  области  найти  в  сети  вывода  путь  от  вершин,
представляющих  исходные  данные  консультации  (т.е.  значения,   которые
вводятся  пользователем  в  ответ на вопросы ), к вершине, соответствующей
рассматриваемой цели.  Этот  путь  должен  обладать  следующим  свойством:
условия применимости правил, соответствующих входящим в путь дугам, должны
быть  выполнены.  При  поиске пути используется метод поиска "в глубину" с
последующим выводом значений от данных.
       Алгоритм вывода значения  простой  цели  состоит  в  следующем.  Из
списка  правил  вывода  данной  цели  выбирается первое правило и делается
попытка его применить (при этом проверяется условие его применимости,  как
это  делается для предложений сценария). Если условие выполнилось, правило
применяется. Если ни одно  из  правил  не  удалось  применить,  а  цель  -
числовой  атрибут,  то  в  качестве  значения  этого  атрибута принимается
значение по умолчанию (в том случае,  если  оно  указано  разработчиком  в
описании атрибута), иначе цель помечается как невыводимая.
       В  том  случае,  когда оказалось сразу несколько применимых правил,
используется первое применимое правило. Значения  целей  вычисляются  один
раз  и  не  могут  быть  изменены  иначе как по команде пользователя или c
помощью предложения сценария СБРОС.
       Исходные цели консультации задаются в сценарии; исходными  являются
все   цели,   упоминаемые   в   предложениях   сценария.   Остальные  цели
рассматриваются  тогда,  когда  их  значения  понадобятся  для  применения
каких-либо правил.
       
       wr4.2.3.  В  режиме  консультации  пользователь  может  наблюдать ход
рассуждения программы комплекса при поиске пути в сети  вывода  с  помощью
средств объяснения и трассировки (см. @пп. 7.4 и 7.8@21@).

                                       @Вперед@13@ @Оглавление@22@ @Назад@10@
}}
13{{
                mwl                             
                mwl  Язык представления знаний  ▒▒
                mwl                             ▒▒
                  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

       wr5.1. Общие сведения
      
       wr5.1.1. В описании языка представления знаний использованы следующие
метасимволы и обозначения:
          ::= - символы, отделяющие левую часть определения  от  правой;
          <>  - скобки,  в которые  заключаются  метапонятия;
          |   - символ, разделяющий альтернативы;
          []  - скобки, в которые заключается необязательный фрагмент
     определяемой конструкции;
          {} - скобки, обозначающие повторение (ноль или  более  раз)
     заключенной в скобки конструкции;
          ' - апостроф для выделения в языковых конструкциях символов
     языка представления знаний, совпадающих с метасимволами.
       
       wr5.1.2. Числовые константы, допустимые в языке представления знаний,
-  это положительные и отрицательные числа с десятичной точкой и точностью
до двух знаков  после  десятичной  точки,  не  превышающие  по  абсолютной
величине  64000.00.  В  описании  синтаксиса  языка  представления  знаний
числовые константы обозначены метапонятием <число>.
       Числовые  константы,  представляющие  коэффициенты  определенности,
являются числовыми константами, не  превышающими  по  абсолютной  величине
5.00.  В  описании  синтаксиса  они обозначаются метапонятием <коэффициент
определенности>.
       
       wr5.1.3.  Числовые  и  символьные  атрибуты,  а  также   значения
символьных  атрибутов,  идентифицируются с помощью имен. Именем может быть
любая последовательность, состоящая не более чем  из  30  символов,  среди
которых могут быть:
      латинские прописные и строчные буквы;
      русские прописные и строчные буквы;
      цифры;
      символы: _(подчеркивание), #.
       Имя не должно начинаться с цифры.
       Это  имя используется в описании модели как идентификатор, но с ним
не всегда удобно работать в фазе использования  системы  при  формировании
сообщений пользователю, когда может возникнуть необходимость в развернутом
имени   атрибута,   раскрывающем   его   семантику.   Развернутые   имена,
представляющие лингвистические знания об атрибутах, задаются  в  описаниях
атрибутов.  Длина  развернутого  имени  не  должна превышать 120 символов.
Например, значение символьного атрибута "метод_обезболивания" может  иметь
развернутое  имя  "местное  обезболивание  с  премедикацией  седуксеном  и
антигистаминным  препаратом".  В  этом  случае  в  сообщениях,  выдаваемых
пользователю  в  ходе  консультации,  будет использоваться это развернутое
имя.
       В  описании  синтаксиса  языка   представления   знаний   имена   и
развернутые  имена  определяются  метапонятиями  <имя> и <развернутое имя>
соответственно.
       
       wr5.1.4.  Употребляемые  в  конструкциях  языка  представления знаний
тексты    (например,    тексты     комментариев)-     это     произвольные
последовательности    символов    ограниченной    длины,   не   содержащие
символов-кавычек ("). Эти тексты обозначаются в  описании  синтаксиса  как
<текст N>, где N - число, указывающее максимально допустимую длину текста.
       В примерах конструкций, приведенных в настоящем документе, тексты и
развернутые имена заключены в кавычки.
       
       wr5.1.5.  Для  представления  лингвистических  знаний о коэффициентах
определенности утверждений и  значениях  числовых  атрибутов  используются
специальные  конструкции,  называемые  шкалами.  Шкалы  представляют собой
списки  равенств  вида:  "<текст  40>=<число>",  ставящих  в  соответствие
лингвистическим   (текстовым)   описаниям   некоторые  числовые  значения.
Равенства в списке разделяются запятыми. Каждая шкала, описанная в модели,
должна  относиться  к  некоторому  числовому  атрибуту  или   утверждению.
Например,  лингвистические знания о коэффициенте определенности некоторого
утверждения могут быть представлены с помощью шкалы:
     "да=5, возможно=2.5, да или нет=0, маловероятно=-2.5, нет=-5".
       Все числовые константы, упоминаемые в шкале, не должны выходить  за
пределы  диапазона  допустимых  значений  числового  атрибута  (если шкала
относится к числовому атрибуту) или диапазона от -5.00 до 5.00 (если шкала
относится к утверждению). Шкалы могут задаваться как в описаниях атрибутов
и утверждений, так и в текстах вопросов к ним.
       Шкалы применяются при формировании  текстов  вопросов  и  сообщений
конечному пользователю.
       Шкала используется в вопросе в том случае, если она задана в тексте
вопроса  или  в  описании  утверждения  или  атрибута,  о котором задается
вопрос. При  этом  из  лингвистических  описаний,  содержащихся  в  шкале,
формируется  меню,  и  конечному пользователю предлагается выбрать одно из
этих описаний.  В  качестве  ответа  на  вопрос  принимается  то  числовое
значение,   которое  соответствует  в  шкале  выбранному  лингвистическому
описанию. Например, если будет задан вопрос с приведенной выше  шкалой,  и
пользователь  выберет  ответ  "возможно",  то  в качестве ответа на вопрос
будет принято значение 2.50.
       Использование  шкалы  при  формировании  сообщения  о   вычисленном
коэффициенте  определенности  утверждения  или значении числового атрибута
осуществляется в  том  случае,  если  в  описании  этого  утверждения  или
числового  атрибута  задана  шкала.  При  этом выдается то лингвистическое
описание,  которому  соответствует   число,   наименее   отличающееся   от
вычисленного значения. Например, при использовании приведенной выше шкалы,
для  коэффициента  определенности  3.0  будет  выбрано  и помещено в текст
сообщения лингвистическое описание "возможно".
       В описании синтаксиса языка представления знаний шкалы определяются
метапонятием <шкала>.
       
       wr5.1.6.  Формирование  текстов вопросов и сообщений осуществляется с
использованием шаблонов. Шаблон представляет собой текст, в который  могут
подставляться   сведения   об   атрибутах  и  их  значениях.  Позиции  для
подстановки отмечаются в шаблоне следующим образом:
      ^^ - для коэффициентов определенности  утверждений  и  значений
 числовых атрибутов (или соответствующих им лингвистических описаний,
 описанных в шкалах);
      ^s - для имен символьных атрибутов;
      ^v - для имен значений символьных атрибутов;
      ^g - для имен простых целей.
       При заполнении шаблонов предпочтение  всегда  отдается  развернутым
именам,  если  они  указаны,  и  лингвистическим  описаниям,  если  заданы
соответствующие шкалы.
       В  описании   синтаксиса   языка   представления   знаний   шаблоны
определяются   метапонятием   <шаблон  N>,  где  N  -  число,  указывающее
максимально допустимую длину текста шаблона.

                                    @Вперед@15@ @Оглавление@22@ @Назад@12@
 }}
 15{{
                    mwl                    
                    mwl  Описание модели   ▒▒
                    mwl                    ▒▒
                      ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

       wr5.2.1.  Описание  модели  предметной  области   включает   в   себя
комментарий  к  модели,  способ разрешения конфликтов, описание атрибутов,
правила вывода, а также сценарий консультации.
       
       wr5.2.2. Синтаксис описания модели имеет следующий вид:
      
 <описание модели> ::= [ <комментарий к модели> ]
      <описание атрибута> { <описание атрибута> }
      <описание правила вывода> { <описание правила вывода> }
      <предложение сценария> { <предложение сценария> }
 <комментарий к модели> ::= <текст 160>
      
       Комментарий к модели представляет собой произвольный  текст,  длина
которого не должна превышать 160 символов.
      
                                     @Вперед@16@ @Оглавление@22@ @Назад@13@
 }}
 16{{
                mwl                      
                mwl  Описание атрибутов  ▒▒
                mwl  проблемной области  ▒▒
                mwl                      ▒▒
                  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

       wr5.3.1.    Для    представления    количественных   и   качественных
характеристик проблемной области используются  соответственно  числовые  и
символьные атрибуты.
      
 <описание атрибута> ::= <описание числового атрибута> |
                         <описание символьного атрибута>
      
       wr5.3.2.  Числовые  атрибуты представляют собой величины, принимающие
значения из некоторого диапазона. Значения  числовых  атрибутов  считаются
точно    известными.    Аналогом   числового   атрибута   в   традиционном
программировании является переменная вещественного типа, значение  которой
может быть получено только один раз и в дальнейшем не изменяется. Значения
числовых  атрибутов  задаются  с точностью до двух знаков после десятичной
точки:
      
 <описание числового атрибута> ::=
      ЧИСЛОВОЙ АТРИБУТ <имя числового атрибута>
                       [ <развернутое имя числового атрибута> ]
                       [ $<шкала> ]
                       ОТ <число> ДО <число>
                     [ ПО УМОЛЧАНИЮ     <число> ]
      <имя числового атрибута> ::= <имя>
      <развернутое имя числового атрибута> ::= <развернутое имя>
      
       Задание развернутого имени атрибута не является обязательным.  Если
разработчик  не  укажет  это  имя,  в  сообщениях будет использоваться имя
атрибута.
       Описание шкалы начинается  со  специального  символа  '$'.  Задание
шкалы  также  не  является  обязательным.  Если шкала есть, то при задании
вопросов (выдаче сообщений) о значении числового атрибута  значения  будут
запрашиваться (выдаваться) не в числовой форме, а терминах лингвистических
описаний, упоминаемых в шкале.
       Область  допустимых  значений числового атрибута описывается в виде
диапазона, который задается двумя числовыми  константами,  представляющими
его  нижнюю  и  верхнюю  границы.  Область  допустимых  значений не должна
выходить за пределы диапазона от -64000.00 до 64000.00.
       Разработчик экспертной  системы  может  задать  значение  числового
атрибута  по  умолчанию  (не  обязательно).  Это  значение  не должно быть
выходить за пределы области допустимых значений атрибута  "ОТ  <число>  ДО
<число>".  Как  указано  в @п. 4.2.2@12@, значение по умолчанию принимается при
решении задачи в качестве значения числового атрибута в том случае,  когда
его не удалось вывести другим способом.
      
      Пример описания числового атрибута:
      
      ЧИСЛОВОЙ АТРИБУТ возраст
              "возраст пациента"
               ОТ 15 ДО 100
               ПО УМОЛЧАНИЮ
      
       5.3.3.   Символьные   атрибуты   принимают  значения  из  конечного
множества значений, задаваемого перечислением в описании атрибутов:
      
 <описание символьного атрибута> ::=
      СИМВОЛЬНЫЙ АТРИБУТ <имя символьного атрибута>
                       [ <развернутое имя символьного атрибута> ]
                       [ $ [<шкала>] ]
                       [ ШАБЛОН <шаблон утверждений> ]
                       <описание значения> { <описание значения> }
 <имя символьного атрибута> ::= <имя>
 <развернутое имя символьного атрибута> ::= <развернутое имя>
 <шаблон утверждений> ::= <шаблон 180>.
 <описание значения> ::= ЗНАЧЕНИЕ <имя значения>
                       [ <развернутое имя значения> ]
                       [ $ [<шкала>] ]
                       [ ИМЯ УТВЕРЖДЕНИЯ <имя> ]
 [ПО УМОЛЧАНИЮ <коэффициент определенности по умолчанию>]
 <имя значения> ::= <имя>
 <развернутое имя значения> ::= <развернутое имя>
 <коэффициент определенности по умолчанию> ::= <число>

       Задание развернутого имени атрибута не является обязательным.  Если
разработчик  не  укажет  это  имя,  в  сообщениях будет использоваться имя
атрибута.
       Шкала, задаваемая в описании  символьного  атрибута,  относится  ко
всем  утверждениям  о  значениях  данного  атрибута.  Если  указан  только
специальный символ '$', то будет использована шкала по умолчанию:
      "Да=5,    Скорее всего=4,    Возможно=2,    Да или нет=0,
       Наверное нет=-2,    Маловероятно=-4,    Нет=-5".
       Шкала,  задаваемая  в  описании  значения   символьного   атрибута,
относится  к  коэффициенту определенности только данного значения. Как и в
случае символьного атрибута, можно указать только  символ  '$',  при  этом
будет  использована  шкала  по  умолчанию.  Если  указаны  шкалы  как  для
символьного атрибута, так и для некоторого его значения, то при  работе  с
этим значением шкала для символьного атрибута игнорируется.
       Шаблон   утверждений  используется  при  формировании  сообщений  о
значениях данного атрибута. В  шаблон  могут  подставляться:  имя  данного
атрибута;  имя  того  значения,  сообщение  о  котором формируется.
       Если  в  модели  не   описан   шаблон   утверждения,   используется
стандартный шаблон "^s - ^v".
       Имена  утверждений  могут  использоваться в правилах и предложениях
сценария как сокращенные ссылки на утверждения вида:  "символьный  атрибут
<имя  символьного  атрибута> имеет значение <имя значения>". Полная ссылка
на утверждение представляет собой пару имен (имя  символьного  атрибута  и
имя значения) в квадратных скобках, разделенных точкой.
       Коэффициент  определенности по умолчанию (или априорный коэффициент
определенности) задается числовой константой в диапазоне от -5.00 до 5.00.
Если она  не  указана  в  описании,  то  будет  считаться  равной  0,  что
соответствует  неопределенному  значению  истинности утверждения до начала
консультации.

      Пример описания символьного атрибута:
      
      СИМВОЛЬНЫЙ АТРИБУТ  рекомендация
      $Да=5,  Возможно=2,  Да или нет=0,  Маловероятно=-2,  Нет=-5
      ШАБЛОН " рекомендуемый лекарственный препарат - ^v"
      
         ЗНАЧЕНИЕ нитросорбид
         ИМЯ УТВЕРЖДЕНИЯ нитро1
         ПО УМОЛЧАНИЮ 4.0
      
         ЗНАЧЕНИЕ нитронг
         ИМЯ УТВЕРЖДЕНИЯ нитро2
         ПО УМОЛЧАНИЮ 0.0
      
       В  приведенном  примере  имя  утверждения  "нитро1"  ссылается   на
утверждение с текстом "рекомендуемый лекарственный препарат - нитросорбид"
и  значением  по  умолчанию,  равным  4.0.  Полная  ссылка  на утверждение
"нитро1" имеет вид: [рекомендация.нитросорбид].
                                 @Вперед@17@ @Оглавление@22@ @Назад@15@
 }}
17{{
               mwl                        
               mwl  Арифметические и      ▒▒
               mwl  логические выражения  ▒▒
               mwl                        ▒▒
                 ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

       Для описания действий правил, а также условий применимости правил и
предложений сценариев используются арифметические и логические выражения.
       
    wr5.4.1.  Арифметические  выражения  используются как в правилах,
 для задания формул, по которым следует вычислять  значения  числовых
 атрибутов и утверждений, так и в логических выражениях.

      Арифметические выражения имеют следующий синтаксис:
      
 <арифметическое выражение> ::=
      <число>|
      <имя простой цели> |
      <арифметическое выражение> + <арифметическое выражение> |
      <арифметическое выражение> - <арифметическое выражение> |
      <арифметическое выражение> * <арифметическое выражение> |
      <арифметическое выражение> / <арифметическое выражение> |
      <арифметическое выражение> % <арифметическое выражение> |
      (<арифметическое выражение>) | -<арифметическое выражение> |
      <имя арифметической функции> ( { <арифметическое выражение>, }
                          <арифметическое выражение> )
 <имя простой цели> ::= <имя числового атрибута>|
      <ссылка на утверждение>
 <имя числового атрибута> ::=  <имя>
 <ссылка на утверждение> ::=  <имя утверждения>|
      '['<имя символьного атрибута>.<имя значения>']'
 <имя утверждения> ::= <имя>
 <имя символьного атрибута> ::=  <имя>
 <имя значения> ::=  <имя>
 <имя арифметической функции> ::=
      abs | exp | sq | lg | inth | intl |
      sin | cos | tg | ctg | asin | atg | rad | grad |
      <имя вспомогательной функции> |
 <имя вспомогательной функции> ::= more_cert | less_cert
      
      Арифметические выражения строятся стандартным образом с помощью
 операций  сложения  (+),  вычитания (-), умножения (*), деления (/),
 получения остатка от деления нацело (%) и скобок, а также  следующих
 арифметических функций:
      abs(X)   - абсолютное значение X;
      exp(X,Y) - число X в степени Y;
      sq(X)    - квадратный корень из X;
      lg(X)    - десятичный логарифм X;
      inth(X)  - округление Х в большую сторону;
      intl(X)  - округление Х в меньшую сторону;
      sin(X)   - синус Х (Х в радианах);
      cos(X)   - косинус Х (Х в радианах);
      tg(X)    - тангенс Х (Х в радианах);
      ctg(X)   - котангенс Х (Х в радианах);
      asin(X)  - арксинус Х (Х в радианах);
      atg(X)   - арктангенс Х (Х в радианах);
      rad(X)   - получение значения в радианах (Х в градусах);
      grad(X)  - получение значения в градусах (Х в радианах).
     Определены следующие вспомогательные функции:
     more_cert(X,A) - количество значений символьного атрибута A,  ко-
 эффициенты определенности которых не ниже значения X;
     less_cert(X,A) -  количество значений символьного атрибута A, ко-
 эффициенты определенности которых не выше значения X,
 где значение X задается либо числовой константой, либо числовым атри-
 бутом.  Эти функции удобно использовать в тех случаях,  когда необхо-
 димо оценить выведенные результаты.  Например, при решении задачи ди-
 агностики можно определить,  удалось ли выявить хотя бы несколько ди-
 агнозов с достаточной, с точки зрения эксперта, степенью уверенности:
 если поставлен хотя бы один диагноз, т.е. more_cert(4.0,диагноз) > 0
 или все диагнозы отвергнуты,  т.е. less_cert(-4.0,диагноз) = N,  где
 N  -  число возможных диагнозов,  то можно закончить решение задачи;
 иначе необходимо провести более подробный анализ с привлечением  до-
 полнительных  данных.  Другой  распространенный случай использования
 этих  функций - оценка результатов тестирования: сколько тестов дали
 положительный или отрицательный результат.
      В арифметических выражениях можно  использовать  числовые  конс-
 танты и простые цели, т.е. числовые атрибуты и утверждения.  Ссылать-
 ся на числовые атрибуты можно по именам (не развернутым), на  утверж-
 дения  -  по именам утверждений или по парам вида: [<имя  символьного
 атрибута>.<имя значения>], описанным в разделе 5.3.2.
      Арифметические выражения вычисляются  слева  направо.   Порядком
 выполнения  операций  можно  управлять  с  помощью  круглых   скобок.
      
      Пример арифметического выражения:
      
            вес_пациента - (рост_пациента_в_см - 100.00)
      
 В данном арифметическом выражении, исходя из значений числовых  атри-
 бутов "вес_пациента" и "рост_пациента_в_см", вычисляется величина из-
 быточного веса пациента.
    
    wr5.4.2.  Логические выражения используются для записи  высказыва-
 ний о состоянии проблемной области - условий применимости правил вы-
 вода и предложений сценария. Значением логического выражения являет-
 ся коэффициент определенности соответствующего ему высказывания.
      Логические выражения имеют следующий синтаксис:
      
 <логическое выражение> ::= <коэффициент определенности> |
       <имя простой цели> |
       <арифметическое выражение><отношение><арифметическое выражение>|
       <логическое выражение> '|' <логическое выражение> |
       <логическое выражение> '||' <логическое выражение> |
       <логическое выражение>  &  <логическое выражение> |
       <логическое выражение>  &&  <логическое выражение> |
       (<логическое выражение>) |
       ~<логическое выражение> |
       <имя логической функции> ( <список параметров> ) 

 <отношение> ::= '=' | '>' | '<'
 <имя логической функции> ::=  AF | EF | AT | ET | UNC | UN | 
                               unc | un |
                               eq | gte | lte |
                               <имя L-S функции>
 <имя L-S функции> ::=   L_ll | L_rr | L_lr | S_ll | S_rr | S_lr
 <список параметров> ::= <имя символьного атрибута> |
                         <имя простой цели> |
                         <арифметическое выражение>
                                  { , <арифметическое выражение> }
           
     Логические  выражения строятся из высказываний о проблемной обла-
 сти, значениями которых являются коэффициенты определенности, с помо-
 щью операций: конъюнкции (&), дизъюнкции (|) и отрицания (~).
     В логических выражениях могут быть использованы операции: && и || 
 (конъюнкция и дизъюнкция с принудительным завершением). Эти  операции 
 выполняются так же, как & и | соответственно, с единственным отличием: 
 если первый операнд неположителен (в  случае  &)  или  положителен (в 
 случае |), то второй операнд не рассматривается, и в качестве резуль-
 тата  принимается значение первого операнда.
     Как следует из приведенных определений, высказывания о проблем-
 ной области могут быть представлены:
     утверждениями;
     обращениями к логическим функциям;
     арифметическими отношениями: равно ( = ), больше ( > ) и меньше 
 ( < );
     логическими выражениями.
     Кроме того, можно задавать коэффициенты определенности с помощью
 числовых  констант,  числовых  атрибутов и арифметических выражений,
 если их значения не выходят за пределы диапазона от -5.00 до +5.00.
     При вычислении значений логических выражений используются следу-
 ющие формулы:
      D(H1 & H2) = min[D(H1), D(H2)];                             (7)
      D(H1 | H2) = max[D(H1), D(H2)];                             (8)
      D(~H) = -D(H),                                              (9)
      где H, H1 и H2 - высказывания о проблемной области (утверждения,
 обращения к логическим функциям и т.д.);
      D(H) - коэффициент определенности высказывания Н (т.е. его зна-
 чение).
     Параметры логических функций определены следующим образом:
     функции AF, EF, AT, ET, UN, UNC - имя символьного атрибута;
     функции un и unc - имя простой цели;
     параметры функций eq, gte, lte, а также L-S функций задаются с 
 помощью арифметических выражений. 

     Для сокращения записи логических выражений в языке представления
 знаний  определены 4 стандартные логические функции, вычисляющие  ко-
 эффициенты определенности следующих высказываний:
     AF(A) - все утверждения о всех возможных  значениях  символьного
 атрибута A ложны (All False);
     EF(A)  - среди всех утверждений о значениях символьного атрибута
 A есть ложные (Exist False);
     AT(A) - все утверждения о всех возможных  значениях  символьного
 атрибута A истинны (All True);
     ET(A)  - среди всех утверждений о значениях символьного атрибута
 A есть истинные (Exist True).

     Перечисленные логические функции могут быть представлены следую-
 щим образом:
     AF(A) = ~a1 & ~a2 & ... & ~aN,
     EF(A) = ~a1 | ~a2 | ... | ~aN,                               (10)
     AT(A) =  a1 &  a2 & ... &  aN,
     ET(A) =  a1 |  a2 | ... |  aN,
     где a1, a2, ... aN - утверждения о значениях символьного атрибу-
 та  A, а вычисления выполняются по формулам (7) - (9). Следует отме-
 тить, что в функциях ET и EF рассматриваются только те из всех  воз-
 можных  утверждений об атрибуте A, коэффициенты определенности кото-
 рых удалось вывести. Для вычисления значений функций AT и AF необхо-
 димо рассмотрение всех возможных утверждений.
     Функции unc, un, UNC  и  UN позволяют определять, выведены ли те
 или иные цели к моменту анализа логического выражения.
     Функции unc и un применяются к простым целям. Функция unc возвра-
 щает  значение  +5.00,  если цель еще не выводилась, и -5.00 во  всех
 остальных случаях.  Функция un возвращает значение +5.00, если   зна-
 чение цели вывести не удалось, и -5.00 во всех остальных случаях.
      Функции  UNC  и  UN  применяются к символьным атрибутам (т.е. к
 сложным целям). Функция UNC возвращает значение  +5.00,  если  среди
 значений  атрибута есть хотя бы одно с еще не выводившимся коэффици-
 ентом определенности, и -5.00 во всех остальных случаях. Функция  UN
 возвращает значение +5.00, если среди значений атрибута есть хотя бы
 одно,  для которого не удалось вывести коэффициент определенности, и
 -5.0 во всех остальных случаях.

      Функции eq, gte, lte являются обобщением арифметических отноше-
 ний "равно",  "больше или равно" и "меньше или равно". Они определе-
 ны следующим образом:

     eq(X,Y,E)  - числа X и Y равны с точностью до E;
     gte(X,Y,E) - число X больше или равно Y с точностью до E;
     lte(X,Y,E) - число X меньше или равно Y с точностью до E,
 где 0.00 < E < 1.00.

 
     Значения функций вычисляются по формулам:
            
 eq(X,Y,E) = {  5.0, если   abs(X-Y) < E * max[abs(X),abs(Y)];
               -5.0 иначе,
 
 
              
 gte(X,Y,E) = { 5.0, если   X >= Y или 0 < Y-X < E * max[abs(X),abs(Y)];
               -5.0 иначе,
 
 

 lte(X,Y,E) = { 5.0, если   Y >= X или 0 < X-Y < E * max[abs(X),abs(Y)];
               -5.0 иначе.
 
              
     L-S функции используются при описании нечетких  понятий.  Каждая
 L-S функция предоставляет эксперту стандартные средства для вычисле-
 ния  того  коэффициента определенности, с которым значение числового
 атрибута удовлетворяет нечеткому понятию. Таким образом, эти функции
 обеспечивают параметрическое задание функций принадлежности нечетких
 понятий в терминах коэффициентов определенности.
      Функции  L_ll,  L_rr, L_lr являются линейными,  а функции S_ll,
 S_rr и S_lr - квадратичными, что обозначается первыми символами в их
 именах  (L и S соответственно).
      Функции  L_ll,  L_rr, L_lr  задаются с помощью параметров A, B,
 C и D (рис. 5), которые должны удовлетворять условию A < B =< C < D,
 следующим образом (X - аргумент функции):
       

                    ┌  -5,                если  X <= A;
                    │
                    │  10*X - 5*A - 5*B
      L_ll(A,B,X) = ┤  ──────────────── , если  A < X <= B;      (1)
                    │        B - A
                    │
                    └   5,                если  X > B,

       
       

                    ┌  5,                 если  X <= C;
                    │
                    │  - 10*X + 5*C + 5*D
      L_rr(C,D,X) = ┤  ──────────────── , если  C < X <= D;      (2)
                    │        D - C
                    │
                    └   -5,               если  X > D,

       
       

                        ┌  L_ll(A,B,X), если X < C;
      L_lr(A,B,C,D,X) = ┤                                        (3)
                        └  L_rr(C,D,X), если X >= C.

       
 Например, понятие "около 7" может быть описано как  L_lr(5,7,7,9,X).
 При X, равном 6.5, коэффициент определенности утверждения о том, что
 X имеет значение около 7, равен 2.5.


       
                       Линейные L-S функции

      L_ll (A, B, X)
           ^
          5┤                   ───────
           │                 /
           │               /
          0├────────┬──────────┬──────────────────> X
           │        A   /      B
           │          /
         -5┤   ──────
           │

       
       

      L_rr (C, D, X)
           ^
          5┤   ──────
           │          \
           │            \
          0├────────┬──────────┬──────────────────> X
           │        C      \   D
           │                 \
         -5┤                   ──────

       
       

      L_lr (A, B, C, D, X)
           ^
          5┤                   ─────
           │                 /       \
           │               /           \
          0├────────┬──────────┬────┬────────┬───────> X
           │        A   /      B    C     \  D
           │          /                     \
         -5┤   ──────                         ──────
           │

                             Рис. 5.

       

      Функции   S_ll,  S_rr,  S_lr  задаются  с  помощью  параметров
 A, B, C, D, E и F  (рис. 6),  которые должны удовлетворять  условию
 A =< B =< C =< D =< E =< F,   A < C ,   D < F,   следующим образом
 (X - аргумент функции):
       

                      ┌  -5,                если  X <= A;
                      │
                      │    ┌ X - A ┐2
                      │  5*│ ───── │ - 5,   если  A < X <= B;
                      │    └ B - A ┘
      S_ll(A,B,C,X) = ┤                                          (4)
                      │        ┌ C - X ┐2
                      │  5 - 5*│ ───── │ ,  если  B < X <= C;
                      │        └ C - B ┘
                      │
                      └   5,                если  X > C,

       
       

                      ┌  5,                 если  X <= D;
                      │
                      │        ┌ X - D ┐2
                      │  5 - 5*│ ───── │ ,  если  D < X <= E;
                      │        └ E - D ┘
      S_rr(D,E,F,X) = ┤                                          (5)
                      │    ┌ F - X ┐2
                      │  5*│ ───── │  - 5 , если  E < X <= F;
                      │    └ F - E ┘
                      │
                      └   -5,               если  X > F,

       
       

                            ┌  S_ll(A,B,C,X), если X < D;
      S_lr(A,B,C,D,E,F,X) = ┤                                     (6)
                            └  S_rr(D,E,F,X), если X >= D.

       
 Например, если понятие "около 7" описано как S_lr(5,6,7,7,8,9,X), то
 при X, равном 6.5, коэффициент определенности утверждения о том, что
 X имеет значение около 7, равен 4.75.


       
                       Квадратичные L-S функции
      S_ll (A, B, C, X)
           ^
          5┤                   . ───────
           │                .
           │               .
          0├────────┬─────┬─────┬─────────────────────> X
           │        A    .B     C
           │            .
         -5┤   _____ .

       
       

      S_rr (D, E, F, X)
           ^
          5┤   ───── .
           │            .
           │             .
          0├────────┬─────┬─────┬─────────────────────> X
           │        D     E.    F
           │                .
         -5┤                   . ______
           │

       
       

      S_lr (A, B, C, D, E, F, X)
           ^
          5┤                   . ──── .
           │                .            .
           │               .              .
          0├────────┬─────┬─────┬────┬─────┬─────┬──────> X
           │        A    .B     C    D     E.    F
           │            .                    .
         -5┤  ______ .                          . ______
           │


                              Рис. 6.

      Пример логического выражения:
                                 
         (возраст > 40) & (бронх_астма > 2) & анафилактический_шок
      
      При значении числового атрибута "возраст", равном 44, при  коэф-
 фициенте определенности утверждения о  наличии  бронхиальной   астмы,
 равном  3,  и коэффициенте определенности утверждения об  анафилакти-
 ческом шоке, равном 4, получаем в качестве значения данного  логичес-
 кого выражения 4.

       wr5.4.3. Арифметические и логические выражения  не  должны  содержать
более  500  элементов  (т.е.  знаков  операций,  имен,  запятых  и круглых
скобок).
                                     @Вперед@18@ @Оглавление@22@ @Назад@16@
}}
18{{
              mwl                          
              mwl  Описание правил вывода  ▒▒
              mwl  значений атрибутов      ▒▒
              mwl                          ▒▒
                ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

       wr5.5.1.  С  помощью правил вывода разработчик экспертной системы
указывает,  каким  образом  должны  вычисляться   значения   атрибутов   и
утверждений.   Числовой   атрибут   или   утверждение,  значение  которого
вычисляется с помощью некоторого правила, называется целью  этого  правила
(см.  @п. 4.1.3@10@). Числовые атрибуты и утверждения являются простыми целями,
а  символьные  атрибуты  (т.е.  множества  утверждений)  -   сложными.   В
зависимости от целей все правила подразделяются на простые и сложные.
       Для  вычисления  значения  простой  цели  можно указывать несколько
правил, которые образуют упорядоченный список правил вывода  данной  цели.
Правила  помещаются  в список в том порядке, в каком они описаны в модели.
Список правил используется  в  режиме  консультации  при  попытке  вывести
значение данной цели (см. @п. 4.2.2@12@).
       Сложные  правила  в  результате  компиляции  знаний преобразуются в
совокупности простых, предназначенных для вывода утверждений  о  значениях
соответствующего  символьного  атрибута.  Особенность  этих простых правил
состоит в том, что применение одного из них в ходе решения  задачи  влечет
за собой применение всех остальных.

       wr5.5.2.  В  языке  представления  знаний  определены  следующие типы
правил:
      простой вопрос;
      сложный альтернативный вопрос;
      сложный дистрибутивный вопрос;
      арифметическое правило;
      логическое правило;
      байесовское правило.
       Правила-вопросы позволяют запрашивать данные о конкретной  ситуации
в  проблемной области - исходные данные консультации. Возможны два способа
ввода этих данных: посредством задания  вопроса  пользователю  или  обмена
информацией   с   внешними   программами.   Выбор   способа  ввода  данных
определяется разработчиком ЭС.
       Простой вопрос позволяет получать либо значение числового атрибута,
либо коэффициент определенности  отдельного  утверждения.  Сложный  вопрос
позволяет  получить  распределение  коэффициентов  определенности  по всем
возможным   значениям   символьного   атрибута.   Альтернативный    вопрос
используется  в  тех случаях, когда известно, что символьный атрибут имеет
точно одно значение из множества возможных значений. Дистрибутивный вопрос
используется  в  тех  случаях,  когда  символьный  атрибут   может   иметь
одновременно несколько или ни одного значений.
       Арифметические,   логические  и  байесовские  правила  относятся  к
простым правилам.
       Арифметические  правила  предназначены  для   вычисления   значений
числовых  атрибутов,  а  также  для получения коэффициентов определенности
утверждений по эвристическим формулам, предложенным экспертами.
       Логические  правила  предназначены  для  вычисления   коэффициентов
определенности  утверждений  по  формулам нечеткой логики. Они применяются
только  в  случае  выполнения  условия  применимости,  при  этом  значение
соответствующего  логического выражения становится значением утверждения -
цели правила.
       Байесовские  правила  применяются  для   вычисления   коэффициентов
определенности  тех  утверждений,  об  истинности  которых можно судить по
выполнению ряда факторов (симптомов), имеющих разную значимость.
       
       wr5.5.3. Синтаксис описания правила имеет следующий вид:
      
 <описание правила> ::=
          ПРАВИЛО <имя   правила> [<комментарий>]
          ЦЕЛЬ    <имя   цели>
          ЕСЛИ    [    <условное    выражение>    ]
          ТО      <действие     правила>
 <имя правила> ::= <имя простого вопроса>|
          <имя  сложного   альтернативного  вопроса>   |
          <имя  сложного   дистрибутивного  вопроса>   |
          <имя  арифметического  правила>              |
          <имя  логического  правила>                  |
          <имя  байесовского  правила>
 <имя  простого  вопроса>               ::= Q <текст 19> | П <текст 19>
 <имя сложного альтернативного вопроса> ::= A <текст 19> | А <текст 19>
 <имя сложного дистрибутивного вопроса> ::= D <текст 19> | Д <текст 19>
 <имя арифметического правила>          ::= N <текст 19> | Р <текст 19>
 <имя логического правила>              ::= L <текст 19> | Л <текст 19>
 <имя байесовского правила>             ::= B <текст 19> | Б <текст 19>
 <комментарий> ::=  <текст 300>
 <имя цели> ::= <имя символьного атрибута> | <имя простой цели>
      
       Именами правил могут быть произвольные последовательности  символов
длиной  до  20  байт.  Имена правил должны быть уникальными. Первый символ
имени идентифицирует тип правила.
       Комментарии к правилам - это  произвольные  тексты  длиной  до  300
байт,   которые   используются  в  режиме  консультации  для  формирования
объяснений.
       Целью простого правила может быть числовой атрибут или утверждение,
сложного - символьный атрибут.
      Условие применимости правила - это логическое выражение, значе-
 ние которого вычисляется в момент обращения к правилу.
      Действие правила указывает, каким  образом  должно  вычисляться
 значение  цели  правила  в  том случае, когда правило применимо. Вид
 действия правила определяется типом правила.
       
       wr5.5.4. В случае простого вопроса действие правила имеет вид:
      
      <действие правила> ::= [<шаблон>] [$ [<шкала>] |
                             @ <текст 299>
      
       Действием  для  правила  типа  "простой  вопрос"   является   текст
сообщения пользователю или внешней программе. Текст сообщения пользователю
формируется  с  помощью  шаблона  (см.  @п.  5.1.6@13@),  в  который могут
подставляться: имя символьного атрибута, имя значения этого атрибута и имя
утверждения (составленного  с  помощью  шаблона  утверждений  для  данного
атрибута),  если  вопрос  относится к утверждению; имя числового атрибута,
если вопрос относится к числовому атрибуту. Если текст  не  указан,  то  в
режиме  консультации  он  формулируется  автоматически.  Стандартный текст
вопроса о значении числового атрибута имеет вид: "Каково значение атрибута
^g ?", При построении вопроса  об  утверждении  текст  вопроса  имеет  вид
"Насколько  Вы  уверены  в том, что ^g ?", В простом вопросе можно указать
шкалу, в соответствии с которой пользователь  может  вводить  ответ  не  в
числовой  форме,  а с помощью некоторых лингвистических описаний (см. п.
@5.1.5@13@). Шкала отделяется от текста основного вопроса символом  '$'.  В
случае  утверждений  может  быть использована стандартная шкала: для этого
достаточно  указать  символ  '$'  без  задания  самой  шкалы.   Если   для
утверждения  или  числового  атрибута,  о  котором  задается  вопрос,  уже
определена шкала, она будет проигнорирована.
       Текст  сообщения  внешней  программе  формируется  в виде командной
строки, признаком которой является специальный символ '@' в начале текста.
Передача данных от внешней программы в ЭС  производится через файл EKO.ANS
в соответствии с требованиями, описанными в п. @9.1.@223@
      
       Примеры правил типа простой вопрос:
      
      ПРАВИЛО     Q1
                  "Возраст указывается во время консультации"
      ЦЕЛЬ        возраст
      ЕСЛИ
      ТО          Каков возраст пациента ?
      
       При  применении  данного  правила  для  вычисления  значения   цели
(числового  атрибута) "возраст", определение которого приведено в @п.5.3.1@16@,
пользователю будет задан вопрос "Каков возраст пациента ? (Введите число в
диапазоне от 15.00 до 100.00)". Если пользователь введет число в указанном
диапазоне,   то  это  число  станет  значением  атрибута  "возраст";  если
пользователь сообщит, что не знает ответа,  будет  считаться,  что  данное
правило не удалось применить.
      
      ПРАВИЛО    Q2
      ЦЕЛЬ       риск
      ЕСЛИ
      ТО         Оцените степень риска предполагаемого вмешательства:
                 $высокая=5, средняя=2.5, невысокая=0, низкая=-2.5
      
       При  применении  данного  правила  пользователю  будет задан вопрос
"Оцените степень риска предполагаемого вмешательства:" и предложено  меню,
включающее  следующие  варианты  ответа:  высокая,  средняя,  невысокая  и
низкая.  Если,  например,  пользователь   выберет   второй   вариант,   то
коэффициенту  определенности  утверждения  с именем "риск" будет присвоено
значение 2.5.

       ПРАВИЛО       П_зона
       ЦЕЛЬ          далеко
       ЕСЛИ
       ТО            @gq CGA way.zon

       При применении данного правила будет  выдана  команда  операционной
системы   "gq  CGA  way.zon",   после    выполнения    которой     "ответ"
должен находиться в файле EKO.ANS в символьном виде, например, "V:*:4.5".
       
       wr5.5.5.  В  случае  сложного  альтернативного  или   дистрибутивного
вопроса действие правила имеет вид:
      
      <действие правила> ::= [<шаблон>] [$ [<шкала>] |
                             @ <текст 299>
      
       Действие для правил типа "сложный альтернативный вопрос" и "сложный
дистрибутивный  вопрос" определяются так же, как для простых вопросов (см.
п. 5.5.4). Если шаблон  сообщения  пользователю  опущен,  то  используется
стандартный   шаблон:   "Каково  значение  атрибута  ^s  ?".  Шкалы  могут
использоваться только в дистрибутивных  вопросах.  Помимо  текста  вопроса
пользователю  во  время  консультации  будет выдан список развернутых имен
значений атрибута. Если вопрос альтернативный,  пользователю  предлагается
выбрать  одно  из  значений.  После того как пользователь укажет выбранный
вариант, соответствующее утверждение получает значение 5.00, а утверждения
обо всех остальных значениях символьного атрибута - значение  -5.00.  Если
вопрос   дистрибутивный,  пользователю  предлагается  задать  коэффициенты
определенности  для  значений  из  списка.  Если  пользователь  не  укажет
коэффициенты   для  некоторых  значений,  будет  сделана  попытка  вывести
значения  соответствующих  утверждений  (когда  в  них   будет   возникать
потребность) с помощью других правил вывода, если они есть.
       Передача  данных  от внешней программы в ЭС производится через файл
EKO.ANS в соответствии с требованиями, описанными в п. @9.1.@223@

       Примеры   правил   типа   сложный    вопрос    (альтернативный    и
дистрибутивный):

       ПРАВИЛО  А_зона
       ЦЕЛЬ     место
       ЕСЛИ
       ТО       @gq CGA c.zon

       При  применении  данного  правила будет выдана команда операционной
системы    "gq CGA c.zon",     после    выполнения     которой     "ответ"
должен  находиться  в  файле  EKO.ANS  в  символьном  виде. Например, если
атрибут "место"  имеет  значения  "далеко"  и  "близко",  а  файл  EKO.ANS
содержит  номер  второй  альтернативы,  "V:2", то утверждение [место.далеко]
получит значение -5.00, а [место.близко] - значение 5.00.

      ПРАВИЛО     D1
                  "Ввод информации о проявлениях аллергии"
      ЦЕЛЬ        проявления_аллергии
      ЕСЛИ
      ТО          Наблюдались ли раньше какие-либо проявления
                  аллергии  ? $ никогда=-4, редко=1, часто=3,
                  есть заболевания=5

       Попытка применить данное правило будет делаться в том случае, когда
возникнет  потребность  в  коэффициенте  определенности   какого-либо   из
утверждений  о  значении  символьного  атрибута "проявления_аллергии". При
этом на экран будет выдан текст вопроса, список развернутых имен  значений
данного   символьного  атрибута,  а  также  шкала  для  ответа.  Если  для
утверждений о символьном  атрибуте  "проявления_аллергии"  уже  определены
шкалы, они будут проигнорированы.
       Для  каждого  значения  пользователь  должен ввести ответ с помощью
шкалы  и/или  в   виде   числового   коэффициента   определенности.   Если
пользователь  не сможет указать коэффициенты для некоторых значений, то, в
случае  возникновения  необходимости  в  них,  будут  использованы  другие
правила (если они есть в модели).
       
       wr5.5.6. В случае арифметического правила действие имеет вид:
      
      <действие правила> ::= <арифметическое выражение>
      
       Действием  для  арифметического  правила должно быть арифметическое
выражение, значение которого, в  случае  когда  правило  применимо  и  все
упоминаемые в выражении подцели выведены, присваивается цели правила. Если
вычисленная  с  помощью  данного  выражения  величина  выходит  за пределы
допустимого для цели диапазона, в качестве значения этой цели  принимается
соответствующая граница диапазона.

      Примеры арифметических правил:

      ПРАВИЛО     назначение дозы
                  "Учет избыточного веса пациента при назначении дозы
                  лекарственного препарата X"
      ЦЕЛЬ        доза_X
      ЕСЛИ
      ТО          вес / 10 - (вес / 100 - норма * рост)

       Применение этого правила для вычисления значения числового атрибута
"доза_Х",  приведет  к выводу значений числовых атрибутов "вес", "норма" и
"рост",  после  чего  вычислится  значение  арифметического  выражения  из
действия  правила.  Полученное  значение  присваивается целевому числовому
атрибуту "доза_Х".

     ПРАВИЛО     Nr1
                  "Вычисление коэффициента определенности утверждения
                  о том, что сотрудник живет далеко от работы, по эв-
                  ристической формуле"
      ЦЕЛЬ        [место_работы.расположено_далеко]
      ЕСЛИ
      ТО          0.2 * время_на_дорогу - 9

       Здесь "время_на_дорогу" - числовой атрибут,  указывающий  время  на
дорогу в минутах. При применении данного правила вычислится значение этого
числового  атрибута,  а  затем  -  значение  арифметического  выражения из
действия правила.  Это  значение  будет  рассматриваться  как  коэффициент
определенности  утверждения  о том, что место работы расположено далеко от
дома сотрудника.
       
       wr5.5.7. В случае логического правила действие имеет вид:
      
      <действие правила> ::= [<арифметическое выражение>]
      
       Действием  в  логических   правилах   может   быть   арифметическое
выражение.  Значение  этого  выражения  не  должно превышать по абсолютной
величине  1.00.  Это  выражение  называется  коэффициентом  определенности
правила  и  используется в случае отсутствия полной уверенности эксперта в
надежности данного правила.
       Задание  действия  логического   правила   не   обязательно.   Если
разработчик  опускает действие, то по умолчанию коэффициент определенности
правила принимается равным 1.0.  Если  в  результате  вычисления  значения
действия   правила   получается   недопустимая  величина,  то  в  качестве
коэффициента определенности правила принимается:
      плюс  1.00 - в случае положительного результата;
      минус 1.00 - в случае отрицательного результата.
       В отличие от всех остальных правил задание условия применимости для
логических правил является обязательным.
       Применение  логического  правила  осуществляется следующим образом:
вычисляется  условие  применимости,  и  если  оно  положительно,  то   его
значение,  умноженное на коэффициент определенности правила, принимается в
качестве значения цели  правила;  в  противном  случае  правило  считается
неприменимым.

       Пример логического правила:
      
      ПРАВИЛО  L1
              "Как правило, у  больных,  перенесших  анафилактический
               шок,  ранее бывали другие проявления аллергии; поэтому
               если в данном случае других проявлений не было,  то  с
               большой  уверенностью  можно считать, что обмороки при
               проведении местной анестезии не связаны с  анафилакти-
               ческим шоком"
      ЦЕЛЬ     анафилактический_шок
      ЕСЛИ     [осложнения.обмороки] & AF (проявления_аллергии)
      ТО       0.90

       Здесь    "проявление_аллергии"    -   имя   символьного   атрибута,
принимающего  следующие  значения:  "бронхиальная_астма",   "отек_Квинке",
"дерматит", "зуд_кожи". При применении данного правила, выведется значение
утверждения о наличии осложнений в виде обмороков, а также утверждений обо
всех   возможных   проявлениях   аллергии,  а  затем  вычислится  значение
логического выражения из условия применимости. Если оно  положительно,  то
правило   применимо;   полученное  значение,  умноженное  на  0.90,  будет
рассматриваться  как  коэффициент   определенности   того,   что   больной
действительно перенес анафилактический шок.

       wr5.5.8. В случае байесовского правила действие имеет вид:
      
      <действие правила> ::= <описание фактора> {<описание фактора>}
      <описание фактора> ::= <ссылка на утверждение> <разделитель>
                 <вес> <разделитель> <вес> <разделитель>
      <разделитель> ::= <пробелы> | <запятая>
      <вес> ::= <число> | <имя числового атрибута>
      
       Действие  байесовского  правила  задается  в  виде  таблицы с тремя
столбцами.   В   первом   столбце    перечисляются    утверждения-факторы,
коэффициенты  определенности которых влияют на коэффициенты определенности
целевого утверждения.
       Во  втором  столбце  указываются  подтверждающие,  а  в  третьем  -
опровергающие веса факторов. Подтверждающий вес утверждения-фактора должен
быть   равен   такому  коэффициенту  определенности,  который,  по  мнению
эксперта, следует  приписать  целевому  утверждению  в  случае  истинности
утверждения-фактора.  Опровергающий вес равен коэффициенту, приписываемому
целевому утверждению экспертом в случае ложности утверждения-фактора.
       При работе с байесовскими правилами коэффициент определенности D(H)
высказывания Н связывается  с  вероятностью  того,  что  это  высказывание
истинно   в  рассматриваемой  ситуации  в  проблемной  области,  следующим
образом:

       D(H) = 10 P(H) - 5,                                        (11)

  где D(H) - коэффициент определенности Н;
      Р(Н) - вероятность истинности Н.
       Коэффициент  определенности   целевого   утверждения   байесовского
правила  вычисляется следующим образом. Если подтверждающий вес некоторого
фактора равен 5.0 ( -5.0 ), т.е. наличие фактора точно  свидетельствует  в
пользу  (против)  целевого утверждения, а коэффициент определенности этого
фактора,  вычисленный  в  ходе  решения  задачи,  равен  5.0,  то  целевое
утверждение  считается  точно  истинным (точно ложным). Если опровергающий
вес  некоторого  фактора  равен  5.0  (  -5.0),  т.е.  отсутствие  фактора
свидетельствует  в  пользу  (против)  целевого  утверждения, а вычисленный
коэффициент  определенности  этого  фактора   равен   -5.0,   то   целевое
утверждение  считается  точно  истинным (точно ложным). В противном случае
вычисляются величины, представляющие свидетельства факторов в  пользу  или
против   целевого   утверждения,   а  затем,  для  получения  коэффициента
определенности целевого  утверждения,  происходит  объединение  полученных
свидетельств. При вычислении свидетельств используются следующие формулы:


          ╓             Ai-Dапр(G)
          │  Dапр(G) + ──────────── * ( D(Hi)-Dапр(Hi) ),
          │             5-Dапр(Hi)
          │
          │                                если D(Hi) >= Dапр(Hi);
          │
 De(Hi) = ┤                                                       (12)
          │             Dапр(G)-Bi
          │  Dапр(G) + ──────────── * ( D(Hi)-Dапр(Hi) ),
          │             5+Dапр(Hi)
          │
          │                                если D(Hi) < Dапр(Hi),
          └

 где  De(Hi) - свидетельство i-го фактора;
      Dапр(G) - априорное значение коэффициента определенности  целе-
 вого утверждения;
      Dапр(Hi) - априорное значение коэффициента определенности  фак-
 тора Hi;
      D(Hi) - текущее значение коэффициента определенности i-го  фак-
 тора;
      Ai - подтверждающий вес фактора i-го фактора;
      Bi - опровергающий вес фактора i-го фактора.

      Свидетельства объединяются следующим образом:

                              De - 1
      D(G/H1,H2,...,HM) = 5 * ────── ,                            (13)
                              De + 1

       где
           5 + Dапр(G)
      De = ─────────── *I(H1)*I(H2)* ... *I(HM);                  (14)
           5 - Dапр(G)


                5-Dапр(G)   5+De(Hi)
      I(Hi) =  ────────── * ──────── .                            (15)
                5+Dапр(G)   5-De(Hi)


      Пример байесовского правила:

      ПРАВИЛО     "B1"
                  "Вычисление коэффициента определенности гипотезы
                  об остеомиелите челюстей"
      ЦЕЛЬ        остеомиелит_челюстей
      ЕСЛИ
      ТО          сильные_боли                       2.00    -1.00
                  сопутствующие_заболевания          тяжесть  0.00
                  симптом_Венсана                    4.50    -3.50
                  обширное_воспаление                4.00    -4.00

       Пусть     априорный    коэффициент    определенности    утверждения
"остеомиелит_челюстей" равен 0, а выведенное в ходе консультации  значение
числового атрибута "тяжесть" равно 2.50.
      Пусть также удалось установить, что
      D (сильные_боли)              = 3.00;
      D (сопутствующие_заболевания) = 5.00;
      D (симптом_Венсана)           = 0.00;
      D (обширное_воспаление)       = -5.00.
       Предположим,    что   в   модели   указан   априорный   коэффициент
определенности утверждения "сильные_боли", равный 0.00. В этом случае :

                           2.00 - 0.00
 De(сильные_боли) = 0.00 + ─────────── *(3.00 - 0.00) = 1.20;
                            5 - 0.00

                                        2.50 - 0.00
 De(сопутствующие_заболевания) = 0.00 + ─────────── *(5.00 - 0.00) =
                                          5 - 0.00
 = 2.50;

                               4.50 - 0.00
 De(симптом_Венсана) =  0.00 + ─────────── *(0.00 - 0.00) = 0.00;
                                5 - 0.00

                                  0.00 - (-4.00)
 De(обширное_воспаление) = 0.00 + ────────────── *(-5.00 - 0.00) =
                                     5 - 0.00
 = -4.00;

                   5 - 0.00   5 + 1.20
 I(сильные_боли) = ──────── * ──────── = 1.632;
                   5 + 0.00   5 - 1.20

                                 5 - 0.00   5 + 2.50
 I(сопутствующие_заболевания) =  ──────── * ──────── = 3.00;
                                 5 + 0.00   5 - 2.50

                       5 - 0.00   5 + 0.00
  I(симптом_Венсана) = ──────── * ──────── = 1.00;
                       5 + 0.00   5 - 0.00

                            5 - 0.00   5 - 4.00
  I(обширное_воспаление) =  ──────── * ──────── = 0.111;
                            5 + 0.00   5 + 4.00


   De = 1.632 * 3.00 * 1.00 * 0.111 = 0.543;

                                 0.543 - 1.00
   D(остеомиелит_челюстей) = 5 * ────────────  =  - 1.48.
                                 0.543 + 1.00

                                       @Вперед@19@ @Оглавление@22@ @Назад@17@
}}
19{{
                   mwl                       
                   mwl   Описание сценария   ▒▒
                   mwl   консультации        ▒▒
                   mwl                       ▒▒
                     ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

    wr5.6.1. Сценарий консультации представляет собой  последователь-
 ность предложений, определяющую порядок действий при решении задачи.
 Синтаксис описания предложения сценария имеет следующий вид:

      <предложение сценария> ::=
      <имя предложения> <имя действия> <параметры действия>
      [ ЕСЛИ <условие применимости предложения> ]
      [ <комментарий> ]
      <имя предложения> ::=  <имя>
      <имя действия>    ::= ЦЕЛЬ | РЕЗУЛЬТАТ | СООБЩЕНИЕ | ПЕРЕХОД |
                            СБРОС | СБРОС_ВЫВОДА | СТОП | ПРИЕМ |
                            ВОЗВРАТ | ВЫПОЛНИТЬ | ЗАДАЧА | АРГУМЕНТЫ |
                            ЗАГРУЗИТЬ_ТОЧКУ | СДЕЛАТЬ_ТОЧКУ | ВЫХОД |
                            СДЕЛАТЬ_ТОЧКУ_ВЫХОД | НАСТРОЙКА

      <условие применимости предложения> ::= <логическое выражение> |
                             <ссылка на условие предыдущего действия>
      <ссылка на условие предыдущего действия> ::= -"-
      <комментарий> ::=  <текст 300>

      Именем  предложения может быть любая последовательность, содер-
 жащая до 20 символов, без пробелов. Например, в качестве имени можно
 использовать номер предложения.
      Условие  применимости  можно задавать либо так же, как в прави-
 лах (см. @п. 5.5.3@18@), либо в виде ссылки на условие предыдущего дейст-
 вия. В первом случае проверка  условия  применимости  осуществляется
 аналогично  проверке  условий  в правилах. Во втором случае действие
 выполняется только тогда, когда выполнилось условие применимости пре-
 дыдущего предложения,  при этом считается,  что условие применимости
 данного предложения также выполнилось.
      Вид параметров действия зависит от типа действия.
      В шаблонах сообщений, используемых  в  сценарии,  предусмотрена 
 дополнительная возможность подстановки имени наиболее вероятного зна-
 чения символьного атрибута: из всех значений выбирается то,  у  кото-
 рого коэффициент определенности наибольший, а если таких значений не-
 сколько, то выбирается первый по порядку. Для задания  такой  ссылки 
 необходимо в символах, отмечающих позицию для подстановки, поставить 
 знак '!' (восклицательный знак) после '^', а в списке имен  для  под-
 становки указать имя символьного атрибута. 

    wr5.6.2. Параметры действия ЦЕЛЬ определяются следующим образом:
      
      <параметры действия ЦЕЛЬ> ::= { <имя цели> , } <имя цели>
      
      Параметры действия ЦЕЛЬ задают в виде списка имен,  разделенных
 запятыми или пробелами, исходные цели консультации,  а также порядок
 их рассмотрения. Параметрами могут быть утверждения, числовые и сим-
 вольные атрибуты.

      Пример предложения сценария:
      
      3  ЦЕЛЬ  ДИАГНОЗ
      ЕСЛИ [задача.диагностика]
      "Если требуется решить задачу диагностики, вывести значения
       символьного атрибута ДИАГНОЗ"

      При выполнении данного предложения в сценарии сначала будет оп-
 ределено значение утверждения [задача.диагностика], и, если оно ока-
 жется положительным, будет выводиться значение символьного  атрибута
 ДИАГНОЗ, т.е. будут определяться коэффициенты определенности утверж-
 дений обо всех значениях данного атрибута.

    wr5.6.3. Параметры действия РЕЗУЛЬТАТ определяются следующим обра-
 зом:
      
 <параметры действия РЕЗУЛЬТАТ> ::= [<шаблон 1600>,]<уровень>,
                                    { <имя цели> , } <имя цели>
 <уровень>  ::= <коэффициент определенности> | <имя простой цели>
 <имя цели> ::= <имя простой цели> | <имя символьного атрибута>
      
       Действие  РЕЗУЛЬТАТ  задает список целей, сообщения о значении
 которых должны быть выданы на экран, а также уровень выдачи  резуль-
 татов. Сообщения будут выдаваться только о тех утверждениях, коэффи-
 циенты определенности которых не ниже уровня выдачи. Сообщения выда-
 ются  в виде списка развернутых имен целей и их значений. Если пара-
 метры действия содержат символьный атрибут, то утверждения о  данном
 атрибуте  при выдаче упорядочиваются по убыванию коэффициентов опре-
 деленности. Утверждения о значениях  символьного  атрибута  строятся
 исходя из шаблона утверждений и развернутых имен.
       Сообщения о результате могут выдаваться по шаблону выдачи, за-
 даваемому в качестве первого (необязательного) параметра. Если шаблон 
 выдачи не указан, используется стандартный:  wb^g: ^^ .
      Перед выдачей сообщения просматривается список целей-параметров
 и  выводятся те из них, значения которых еще не были получены.
      
      Пример предложения сценария:

      1  РЕЗУЛЬТАТ -3.00, анестетик
                   "Выбор средства обезболивания"

      При выполнении этого действия будут вычислены значения символь-
 ного  атрибута  "анестетик" (предложение является первым в сценарии,
 поэтому никакие значения еще не выведены), а затем  на  экран  будут
 выданы сообщения о тех значениях атрибута "анестетик",  коэффициенты
 определенности которых не ниже -3.00. Сообщения будут упорядочены по
 убыванию их коэффициентов определенности. Например, если выведено:

      [анестетик.новокаин]  = -5.00,
      [анестетик.тримекаин] =  5.00,
      [анестетик.лидокаин]  =  2.00,

 и  шаблон утверждений для символьного атрибута "анестетик" имеет вид
 "рекомендуемый анестетик - ^v", причем  развернутые  имена  значений
 атрибута в модели не указаны, то на экран будет выведено следующее:

      рекомендуемый анестетик - тримекаин: 5.00
      рекомендуемый анестетик - лидокаин : 2.00
      
      Это же предложение можно задать с шаблоном выдачи:
      
   1  РЕЗУЛЬТАТ "с определенностью ^^ рекомендуется: ^v", -3, анестетик
   "Выбор средства обезболивания"
   
      В этом случае на экран выведется:
                                       
       с определенностью 5.00 рекомендуется: тримекаин
       с определенностью 2.00 рекомендуется: лидокаин

    wr5.6.4. Параметры действия СООБЩЕНИЕ определяются следующим обра-
 зом:
  <параметры действия СООБЩЕНИЕ> ::= <шаблон 1600>{,<имя простой цели>}

      Действие  СООБЩЕНИЕ, как и действие РЕЗУЛЬТАТ, предназначено для
 описания сообщений конечному пользователю, однако в действиях данного
 типа разработчик может указывать произвольный текст сообщения.  Текст
 задается с помощью шаблона (см. @п. 5.1.6@13@).
      Первым  параметром  действия  является  шаблон сообщения, за ним
 должны быть указаны простые цели в том порядке, в каком  их  значения
 должны  подставляться в сообщение. Если к моменту выполнения действия
 какие-либо из требуемых значений не будут известны, то сначала  будет
 произведен вывод их значений и только после этого будет выдано сообще-
 ние. Если для каких-либо простых целей в списке параметров определе-
 ны  шкалы,  то  выдача их значений будет осуществляться в символьном
 виде в соответствии с этими шкалами (см. @п. 5.1.5@13@).
     Если требуется вывести сообщение не на экран монитора, а передать
внешней программе ( через файл  EKO.MSG ), то перед текстом  сообщения
ставится специальный символ '$'.
       Если после выдачи текста сообщения требуется приостановить кон-
сультацию (сделать паузу), то перед текстом сообщения ставится  специ-
альный символ '@'. Эта возможность используется для того, чтобы  обра-
тить на сообщение внимание пользователя экспертной  системы.  В  этом 
случае для продолжения консультации следует нажать любую клавишу (Все 
сказанное справедливо и по отношению к действиям СТОП и РЕЗУЛЬТАТ).


      Пример предложения сценария:

      5 СООБЩЕНИЕ
      "Для проведения местной анестезии (уверенность ^^) можно
 использовать 
      ^!v (с уверенностью ^!^)",
 [метод_обезболивания.местная_анестезия], анестетик, анестетик
      ЕСЛИ [метод_обезболивания.местная_анестезия]
      "Сообщение о наиболее подходящем анестетике для проведения
       местной анестезии"

      При выполнении данного действия будет выведено, если это не бы-
 ло  сделано  раньше,  значение  утверждения о возможности проведения
 местной анестезии и, если оно окажется положительным, будет выполнен
 переход к определению значений утверждений о возможности  применения
 в рассматриваемой ситуации всех описанных в системе местных анестети-
 ков (например, тримекаина и лидокаина). Пусть значение утверждения о
 возможности местной анестезии будет равно 2.00, а значения утвержде-
 ний о возможности применения  тримекаина  и  лидокаина  -5.00 и 5.00
 соответственно. Тогда на экран будет выдано следующее сообщение:

       "Для проведения местной анестезии (уверенность  2.00)  можно
 использовать
      лидокаин  (с уверенностью 5.00)" .

    wr5.6.5. Параметр действия ПЕРЕХОД определяется следующим образом:
      
      <параметры действия ПЕРЕХОД> ::= <имя предложения>
      Действие ПЕРЕХОД позволяет осуществлять условный переход в  сце-
 нарии. Параметром действия является имя предложения, к которому необ-
 ходимо перейти.
      
      Пример предложения сценария:

      11  ПЕРЕХОД 18
      ЕСЛИ ~[метод_обезболивания.общее_обезболивание]

      При  выполнении данного предложения будет определено значение
 утверждения о возможности проведения общего обезболивания, и если оно
 окажется отрицательным, будет сделан переход к предложению с именем 18
 (в  примере  имена  предложений совпадают с их номерами, что необяза-
 тельно).

    wr5.6.6. Параметр действия СБРОС определяется следующим образом:
      
      <параметры действия СБРОС> ::= [ { <имя цели> , } <имя цели> ]
      
      Действие  СБРОС  предназначено  для отмены тех значений, которые
 указаны в качестве параметров этого действия. Если параметры не  ука-
 заны, происходит отмена всех значений.

      Пример фрагмента сценария (повторение консультации с новыми ис-
 ходными данными):
      
      повторить  СБРОС
                 ЕСЛИ повторить_решение

      цикл       ПЕРЕХОД начало
                 ЕСЛИ -"-

      При выполнении предложения "повторить" будет выведено  значение
 утверждения о необходимости повторить решение задачи (для рассмотре-
 ния  новой  ситуации). Если значение этого утверждения положительно,
 произойдет отмена всех значений, полученных во  время  консультации.
 Затем будет выполняться предложение сценария с именем "начало".
      
    wr5.6.7. Действие СБРОС_ВЫВОДА предназначено для отмены всех  зна-
 чений,  кроме тех, которые были введены пользователем в ответ на воп-
 росы. Это действие не требует параметров.

      Пример фрагмента сценария (повторение консультации с изменением
 одного исходного данного):

      повторить СБРОС_ВЫВОДА
                ЕСЛИ повторить_решение

      отмена    СБРОС возраст
                ЕСЛИ -"-

      цикл      ПЕРЕХОД начало
                ЕСЛИ -"-
                              
      В  том случае, когда надо повторить решение, будут отменены все
 значения, за исключением исходных данных консультации, а также  зна-
 чение  исходного данного "возраст", после чего будет повторено реше-
 ние задачи; это позволит определить влияние возраста пациента на ре-
 зультат консультации.
      
    wr5.6.8. Параметры действия СТОП определяются следующим образом:
      
 <параметры действия СТОП> ::= [ <шаблон 1600> {, <имя простой цели> } ]
      
      Действие  СТОП предназначено для принудительного прекращения ре-
 шения задачи. В качестве параметров действия  можно  задать  описание
 заключительного  сообщения.  Параметры  данного действия задаются так
 же, как и в случае действия СООБЩЕНИЕ.  Если параметры не заданы, за-
 ключительное сообщение не  выдается.  Решение  задачи  заканчивается
 также  тогда, когда достигнут конец сценария (нет следующего предло-
 жения).

      Пример предложения сценария:

                18 СТОП
                   ЕСЛИ ~повторить_решение

    wr5.6.9. Параметры действия ПРИЕМ определяются следующим образом:
      
      <параметры действия ПРИЕМ> ::= <имя файла>[,<нижняя граница>,
                                     <верхняя граница>]
      
      <нижняя граница> ::= <число>
      <верхняя граница>::= <число>

      Действие ПРИЕМ предназначено для приема исходных данных из фай-
 ла входных данных, имя которого задается в качестве параметра дейст-
 вия.  Файл  входных данных может быть подготовлен внешней программой
 или вручную.  Информация, содержащаяся в файле входных данных, пред-
 ставляет  собой  текст.  Каждая строка этого текста задает значение,
 которое следует присвоить некоторой цели. Строка определяется следу-
 ющим образом:
      
      <строка файла входных данных> ::= <имя простой цели>=<значение>
      <значение> ::= <число>
      
      Если диапазон значений коэффициентов во внешнем файле отличает-
 ся от [-5.0, 5.0] (например, используется диапазон  [0.0,  1.0]  или 
 [-100.0, 100.0]), то при выполнении действия пропорциональное преоб-
 разование коэффициентов  может  осуществляться  автоматически -  для 
 этого достаточно в качестве второго и третьего параметров этих  дей-
 ствий указать нижнюю и верхнюю границы диапазона,  используемого  во
 внешнем файле.
      При выполнении данного действия каждой цели, указанной в строке
 файла входных данных и к настоящему моменту не выведенной, присваива-
 ется соответствующее значение. Если значение выходит за пределы  до-
 пустимого  диапазона для данной цели, оно игнорируется. Строки с не-
 верно заданными именами простых целей не обрабатываются.
                                 
      Пример предложения сценария:
      
      6 ПРИЕМ "EXAMPLE.INP"
        ЕСЛИ
        [метод_обезболивания.местная_анестезия]
      
      Пример файла входных данных EXAMPLE.INP:
      
        [анестетик.лидокаин]=5.00
        [анестетик.тримекаин]=-3.50

      Если во внешнем файле использован диапазон от -100  до  100, то 
 это предложение следует записать следующим образом:
      
      6 ПРИЕМ "EXAMPLE.INP",-100, 100
        ЕСЛИ
        [метод_обезболивания.местная_анестезия]

      Пример файла входных данных EXAMPLE.INP:

        [анестетик.лидокаин]=100.00
        [анестетик.тримекаин]=-60.00

    wr5.6.10. Параметры действия ВОЗВРАТ определяются следующим обра-
 зом:

      <параметры действия ВОЗВРАТ> ::= <имя файла>, <уровень> 
                                       [,<нижняя граница>,
                                       <верхняя граница>],
                                       <имя простой цели>
                                      {,<имя простой цели>}
                                      
      <нижняя граница> ::= <число>
      <верхняя граница>::= <число>

      <имя простой цели> ::= <имя числового атрибута>|
                             <ссылка на утверждение>
      <имя числового атрибута> ::=  <имя>
      <ссылка на утверждение> ::=  <имя утверждения>|
              '['<имя символьного атрибута>.<имя значения>']'
      <имя утверждения> ::= <имя>
      <имя символьного атрибута> ::=  <имя>
      <имя значения> ::=  <имя>

      Действие ВОЗВРАТ аналогично действию РЕЗУЛЬТАТ. Разница  заклю-
 чается в следующем:
      1) результаты решения задачи выдаются не на экран дисплея, а  в
 файл выходных данных, имя которого задается в параметрах действия.
      2) вместо развернутых имен целей всегда используются имена  це-
 лей.
       3) если диапазон значений коэффициентов во внешнем файле отли-
 чается от [-5.0, 5.0] (например, используется  диапазон  [0.0,  1.0]
 или [-100.0, 100.0]), то при  выполнении  действия  пропорциональное
 преобразование коэффициентов  может  осуществляться  автоматически -
 для этого достаточно в качестве второго и третьего  параметров  этих
 действий указать нижнюю и верхнюю границы  диапазона,  используемого
 во внешнем файле.
      Файл выходных данных имеет формат, полностью аналогичный форма-
 ту файла входных данных.

      Пример предложения сценария:
      
      10 ВОЗВРАТ "DIAGN.OUT",0,диагноз
                 

      Если  значениями  атрибута  "диагноз"  являются  "аллергия"   и
 "в_дистония",  и коэффициенты соответствующих утверждений равны 0.80
 и 0.50 соответственно, то после  выполнения  указанного  предложения
 файл DIAGN.OUT будет содержать следующую информацию:
      
      [диагноз.аллергия]=0.80
      [диагноз.в_дистония]=0.50

    wr5.6.11. Параметры действия ВЫПОЛНИТЬ определяются следующим об-
 разом:
      
 <параметры действия ВЫПОЛНИТЬ> ::= <шаблон 1600> [{,<имя простой цели>}]

      Действие ВЫПОЛНИТЬ предназначено для выполнения команды операци-
 онной системы. Шаблон используется так же, как и в действии СООБЩЕНИЕ.

      Пример предложения сценария:
      
      1 ВЫПОЛНИТЬ "dir /p"
        ЕСЛИ
        
    wr5.6.12. Параметры действия ЗАДАЧА определяются следующим образом:

     <параметры действия ЗАДАЧА> ::= <имя модели> [{,<простой параметр>}]
     <простой параметр> ::= <имя простой цели> | <число>

     Действие  ЗАДАЧА  описывает  обращение одной модели к другой для
 решения некоторой частной задачи, как это имеет место в традиционном
 программировании при вызове подпрограммы. Первый параметр  указывает
 имя вызываемой модели (к началу консультации эта модель должна нахо-
 дится  в  Базе  знаний). Далее перечисляются простые цели, с помощью
 которых происходит обмен данными между вызывающей и вызываемой моде-
 лями. Параметрами могут быть простые цели и числовые константы.  При
 вызове  модели  происходит  передача  не  только значений, но и имен
 (включая развернутые) простых целей, являющихся параметрами действия
 ЗАДАЧА. Если простая цель является числовым атрибутом, в  вызываемую
 модель  передается  также значение по умолчанию и диапазон возможных
 значений. Если простая цель является  утверждением,  будут  переданы
 имена (простое и развернутое) соответствующего символьного атрибута,
 а также шаблон утверждения.
      Если значение переданной в модель цели не было известно  в  мо-
 мент обращения, но оказалось вычисленным к моменту возвращения в вы-
 зывающую модель, результат вычисления будет передан в вызывающую мо-
 дель. Значения целей, вычисленных к моменту обращения, не могут быть
 изменены в вызванной модели.

      Пример фрагмента сценария с вызовом моделей:
      
  1 ЦЕЛЬ   стаж_1, возраст_1, стаж_2, возраст_2
  2 ЗАДАЧА "TEST", оценка_кандидата_1, стаж_1, возраст_1
  3 ЗАДАЧА "TEST", оценка_кандидата_2, стаж_2, возраст_2

     В данном примере предполагается, что необходимо сделать выбор  из
 двух кандидатов (например, на какую-либо должность) на основании оце-
 нок,  получаемых  ими  при прохождении некоторого стандартного теста.
 Тест  описан  в  модели  TEST и использует данные о стаже и возрасте
 кандидата.  При выполнении предложений сценария с именами 2 и 3  бу-
 дет вызвана модель TEST и переданы данные о стаже  и  возрасте.  Ре-
 зультатами  тестирования  являются  оценки кандидатов, вычисляемые в
 этой модели.

    wr5.6.13.  Параметры действия АРГУМЕНТЫ определяется следующим об-
 разом:
      <параметры действия АРГУМЕНТЫ> ::=
                        { <имя простой цели> , } <имя простой цели>

     Данное действие предназначено для описания  тех  простых  целей,
 которые данная модель принимает при ее вызове из другой модели. Оно
 должно быть первым в сценарии. При  вызове  модели  перечисленные  в
 действии  АРГУМЕНТЫ простые цели заменяются целями из вызывающей мо-
 дели, как было описано в п. 5.6.12. Если  в  подмодель  передавалось
 число,  то передается только значение подцели, а имя ее не изменяет-
 ся. Имена простых целей в подмодели должны быть не короче имен соот-
 ветствующих целей в вызывающей модели.

     Пример фрагмента сценария модели TEST:
      
     1 АРГУМЕНТЫ оценка_кандидата, стаж__, возраст__
     2 ЦЕЛЬ оценка_кандидата__
      
     Выполняя  данное действие, подмодель заменит имена перечисленных
 простых целей на имена переданных из модели параметров и примет  вы-
 численные в вызывающей модели значения числовых атрибутов "стаж__" и
 "возраст__".

    wr5.6.14.  Параметр действия  СДЕЛАТЬ_ТОЧКУ определяется следующим
 образом:

      <параметр действия СДЕЛАТЬ_ТОЧКУ> ::= [<имя файла>]

      Текст  указывает имя файла, в котором должна быть создана конт-
 рольная точка. Если текст опущен, в качестве имени  принимается  имя
 текущей  модели с расширением ".PNT". При создании контрольной точки
 происходит запоминание во внешнем файле всех выведенных  к  текущему
 моменту значений, включая значения в моделях, вызвавших данную, если
 такие имеются. Таким образом, в отличие от действия ВОЗВРАТ, удается
 передать во внешний файл значения из всех выполняемых моделей.

      Внешний файл представляет собой последовательность строк,  опи-
 сывающих выполняемые модели. Модели описываются в порядке их вызова:
 сначала  - исходная модель, далее - модель, вызванная из исходной, и
 т.д., до текущей модели. Описание каждой модели начинается с заголов-
 ка, состоящего из двух строк:
 
      <первая строка заголовка> ::= '>'<имя модели>
      <вторая строка заголовка> ::= ПРЕДЛОЖЕНИЕ = <номер>
                                                                     
 где номер указывает, какое по порядку (начиная с первого)  предложе-
 ние сценария выполняется в модели в момент создания контрольной точ-
 ки. Остальные строки содержат описания данных, и их структура  опре-
 деляется следующим образом:
      
      <строка описания данных> ::=     <имя простой цели>=<значение>
      <значение> ::= <число>

    wr5.6.15. Параметр действия ЗАГРУЗИТЬ_ТОЧКУ определяется  следую-
 щим образом:

      <параметр действия ЗАГРУЗИТЬ_ТОЧКУ> ::= [<имя файла>]

      Текст указывает имя контрольной точки; если текст опущен, будет
 загружаться  точка с именем текущей модели и расширением ".PNT". Вы-
 полнение данного предложения приводит к загрузке из  внешнего  файла
 информации о значениях  простых целей в модели.  Внешний файл  может
 быть  либо  получен  в  результате выполнения действия СДЕЛАТЬ_ТОЧКУ
 (при этом он доступен для последующей корректировки  пользователем),
 либо создан вручную. Поэтому все загруженные значения рассматривают-
 ся в ходе решения задачи как полученные от пользователя.

    wr5.6.16. Параметр действия ВЫХОД определяется следующим образом:

      <параметр действия ВЫХОД> ::= [<число>]

      Действие ВЫХОД предназначено  для  принудительного  прекращения 
 консультации. Если не задан параметр действия  то  после  выполнения  
 данного предложения управление получат средства просмотра  оператив-
 ного протокола консультации. Если параметр задан (какое либо число),
 то произойдет выход из Консультатора.

    wr5.6.17. Параметр действия СДЕЛАТЬ_ТОЧКУ_ВЫХОД определяется сле-
 дующим образом:
      
      <параметр действия СДЕЛАТЬ_ТОЧКУ_ВЫХОД> ::= [<имя файла>]

      Данное предложение аналогично предложению СДЕЛАТЬ_ТОЧКУ и отли-
 чается от него только тем, что после создания контрольной точки сле-
 дует немедленное завершение консультации.  Это  удобно  использовать 
 для описания прерывания консультации (и сохранения  всех  выведенных 
 результатов) с возможностью возобновления решения задачи  с  момента
 прерывания.
                                      
      Пример.
      
                1 ЗАГРУЗИТЬ_ТОЧКУ
                  ЕСЛИ продолжить_решение
                  
                2 ЦЕЛЬ симптомы,рекомендации
                
                3 СООБЩЕНИЕ
                 " Для продолжения консультации необходимо проведение
                   следующих лабораторных исследований :"
                   
                4 РЕЗУЛЬТАТ "^v",0,рекомендации
                
                5 СДЕЛАТЬ_ТОЧКУ_ВЫХОД
                  ЕСЛИ нет_исследований
                
                6 РЕЗУЛЬТАТ -5,диагноз
                
      В данном примере перед началом решения задачи выясняется, явля-
 ется ли данная консультация продолжением прерванной ранее. Если нет,
 то решение задачи начинается сначала. Когда система выясняет,  какие
 лабораторные исследования должны быть сделаны для продолжения  реше-
 ния, она сообщает о них пользователю. Если  результаты  исследований
 уже имеются, решение может быть продолжено; иначе происходит  преры-
 вание консультации с запоминанием всех промежуточных  данных.  После 
 получения результатов исследований консультация может быть продолже-
 на с момента прерывания.

    wr5.6.18. Параметр действия НАСТРОЙКА определяется следующим  об-
 разом:
      
 <параметр действия НАСТРОЙКА> ::= <шаблон 1600> [{,<имя простой цели>}]

      С помощью этого действия разработчик ЭС может задавать  реакцию
 Консультатора на клавиши F9 и F10 в ходе решения задачи.
      Параметры действия  НАСТРОЙКА  аналогичны  параметрам  действия 
 СООБЩЕНИЕ. В шаблоне сообщения указывается, какая команда DOS должна
 быть выполнена в том случае, когда пользователь,  вместо  ответа  на
 вопрос, нажмет клавишу F9 или F10. Описание реакции на каждую клави-
 шу начинается в шаблоне сообщения с первой позиции  строки  и  имеет
 вид:
         F<номер клавиши>: <шаблон команды DOS>

 где номер клавиши - число 9 или 10, а шаблон команды содержит не бо-
 лее 160 символов. Для обозначения имени активной цели (т.е.  той,  к
 которой задается вопрос) используются символы "^x".
      По умолчанию клавиша F9 не используется, а по клавише  F10  вы-
 полняется команда DOS: EHELP ^x exp_lst.pic.
      Настройка клавиш осуществляется при каждом выполнении  действия
 НАСТРОЙКА. При выполнении общего сброса или сброса выведенных  резу-
 льтатов отменяется текущая настройка клавиш и принимается  настройка
 по умолчанию.
      Данное действие удобно использовать для описания контекстно-за-
 висимой помощи в ходе консультации. По одной из клавиш  можно  полу-
 чать, например, помощь для начинающего пользователя ЭС, а по  другой
 - сжатую справочную информацию для специалиста.

         Пример.
        
       1 АРГУМЕНТЫ  индекс_объекта, состояние
       2 НАСТРОЙКА
         "F9:  ehelp ^x obj_^v.pic
          F10: ht hlp.txt",индекс_объекта
                         
      В примере приведены первые предложения  подзадачи,  посвященной
 анализу состояния некоторого типового объекта, индекс которого пере-
 дается в подзадачу в качестве параметра. К каждому  конкретному  об-
 ъекту O1, O2 и т.д. имеется графическая помощь, описание которой со-
 держится в файлах OBJ_O1.PIC, OBJ_O2.PIC и т.д. Общая помощь по  си-
 стеме имеет вид гипертекста с именем HLP.TXT. После выполнения наст-
 ройки пользователь получает возможность:
     по клавише F9 - получать графическую помощь, относящуюся к рас-
сматриваемому конкретному объекту;
     по клавише F10 - получать общую помощь по системе.

                                      @Вперед@20@ @Оглавление@22@ @Назад@18@
}}
20{{
                   mwl                       
                   mwl   Режим приобретения  ▒▒
                   mwl   знаний              ▒▒
                   mwl                       ▒▒
                     ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

       wr6.1.  Режим  приобретения  знаний  предназначен  для ввода описаний
моделей в Базу знаний  с  проведением  семантико-синтаксического  контроля
вводимой  информации.  Этот  режим  используется  разработчиком в процессе
создания и модификации экспертной системы.
       
       wr6.2. В режиме  приобретения  знаний  средства  комплекса  позволяют
осуществлять    диалоговый    ввод   и   корректировку   Базы   знаний   с
семантико-синтаксическим  контролем   вводимой   информации,   тестировать
полученные модели и компилировать введенные знания.
       Ввод  и коррекция описаний осуществляется с помощью шаблонов ввода,
соответствующих  основным   конструкциям   языка   представления   знаний.
Управление  диалогом  осуществляется  средствами диалогового многооконного
монитора. Подробное описание  диалога  по  приобретению  знаний,  а  также
команд  пользователя,  доступных  в  данном режиме, приводится в документе
"Комплекс  программ  ЭКО версия 3.4.  @Основные  программные   средства@54@.
Руководство программиста".
       
       wr6.3.  В  режиме  приобретения  знаний обеспечивается работа с Базой
знаний как с иерархией элементов  различных  типов.  Определены  следующие
типы элементов:
      модели;
      предложения сценария;
      числовые атрибуты;
      символьные атрибуты;
      значения символьных атрибутов;
      правила.
       Синтаксическая  структура  Базы  знаний  изображена на рис. 7. База
знаний представляет собой совокупность различных  моделей.  Каждая  модель
включает  в  себя  описания  предложений  сценария,  числовые и символьные
атрибуты. Описания символьных атрибутов включают в себя описания  значений
(т.е.   утверждений   о   состоянии   проблемной   области).  Атрибутам  и
утверждениям соответствуют правила вывода  их  значений.  Сложные  правила
соответствуют символьным атрибутам, простые - числовым и утверждениям.

                  Синтаксическая структура Базы знаний
                           ┌─────────────────┐
                      ┌────┴──────────┐      │
                      │               │      │
                      │   Модель      │      │
                      │               ├──────┘
                      └──────┬────────┘
                             │
        ┌────────────────────┼─────────────────────┐
        │                    │                     │
    ┌───┴───────┐        ┌───┴──────────┐       ┌──┴────────┐
 ┌──┴────────┐  │     ┌──┴───────────┐  │    ┌──┴──────────┐│
 │           │  │     │              │  │    │             ││
 │  Числовой │  │     │  Символьный  │  │    │ Предложение ││
 │  атрибут  ├──┘     │  атрибут     ├──┘    │ сценария    ├┘
 └──────┬────┘        └──────┬───────┘       └─────────────┘
        │                    ├───────────────────────┐
        │                 ┌──┼──────────┐            │
    ┌───┼──────┐       ┌──┴──┴───────┐  │            │
 ┌──┴───┴───┐  │       │             │  │       ┌────┴─────────┐
 │          │  │       │ Значение    │  │       │ Правило типа │
 │  Простое │  │       │ символьного │  │       │ сложный      │
 │  правило ├──┘       │ атрибута    ├──┘       │ вопрос       │
 └──────────┘          └─────┬───────┘          └──────────────┘
                           ┌─┼────────┐
                       ┌───┴─┴─────┐  │
                       │           │  │
                       │  Простое  │  │
                       │  правило  ├──┘
                       └───────────┘

                            Рис. 7.

       Структура  диалога  по  приобретению знаний отражает синтаксическую
структуру Базы знаний. В  ходе  диалога  пользователь  может  работать  на
различных  уровнях  иерархии,  при  этом  состояние  диалога  и допустимые
действия пользователя определяются тем уровнем, на котором ведется работа.
       
       wr6.4. В начальном состоянии диалога пользователю предлагается работа
с оглавлением Базы  знаний  -  списком  имен  и  комментариев  к  моделям,
находящимся  в  Базе  знаний.  Пользователь может выбрать модель, при этом
диалог переходит в состояние работы с моделью в целом.  В  этом  состоянии
пользователь  может  устанавливать  режим разрешения конфликтов, запускать
средства проверки  целостности  или  средства  распечатки  текста  модели,
отменять  сделанные  в  ходе  работы  с  данной моделью изменения, а также
выбирать тип элементов, с которыми он хочет работать. В  последнем  случае
произойдет  переход  к  более  низкому  уровню  иерархии.  Например,  если
пользователь  выберет  числовые  атрибуты,  то  он  перейдет  к  работе  с
числовыми атрибутами данной модели. Затем пользователь может спуститься по
иерархии и начать работу с правилами вывода значения какого-либо числового
атрибута.  Потом он может вернуться к работе с числовыми атрибутами данной
модели.
       
       wr6.5. В каждом состоянии диалога (кроме состояния работы с моделью в
целом) пользователь может:
      работать со списком элементов текущего уровня, относящихся к одному
 и тому же элементу предыдущего уровня;
      просматривать и корректировать описание одного элемента.
       При работе со списком выводитcя  на  экран  терминала  список  имен
соответствующих  элементов,  выделяетcя  текущий  элемент  и высвечиваетcя
текст  комментария  к  нему.  Выделение   текущего   элемента   называется
установкой  внимания  на этом элементе. При работе со списком пользователь
имеет возможность:
      перемещать, переименовывать или уничтожать текущий элемент;
      создавать новые элементы;
      корректировать текст комментария текущего элемента;
      переходить к работе с описанием текущего элемента;
      переходить  к  работе со списком элементов более низкого уровня,
 относящихся к текущему элементу (если они есть);
      перемещать внимание по элементам списка;
      возвращаться к предыдущему уровню иерархии.
       Например, при работе с числовыми атрибутами, описанными  в  модели,
пользователь    может    просматривать   список   имен   этих   атрибутов,
переименовывать  текущий   атрибут,   вводить   или   корректировать   его
развернутое   имя,   просматривать   и  корректировать  описание  текущего
атрибута, переходить к работе со списком правил вывода  значения  текущего
атрибута и т.д.
       При  работе  с  описанием  отдельного  элемента  на экран терминала
выводится шаблон описания этого элемента, соответствующий синтаксису языка
представления знаний. Пользователь может  заполнить  или  откорректировать
поля данного шаблона. При вводе описаний элементов осуществляется контроль
вводимой   информации   и   в  случае  обнаружения  синтаксических  ошибок
пользователю выдаются сообщения о них.
       
       wr6.6.  На  последовательность  ввода   описаний   элементов   модели
накладывается  единственное  ограничение,  состоящее в том, что в описании
вводимого элемента не допускаются ссылки на элементы, описания которых еще
не введены. Например, прежде чем ввести предложение сценария с  параметром
" диагноз", необходимо ввести описание атрибута "диагноз".
       
       wr6.7.  Описание  модели может вводиться по частям, поэтому при вводе
может возникнуть потеря целостности модели.  Модель  считается  целостной,
если выполнены следующие условия:
     введен сценарий консультации;
     во  всех  предложениях  сценария определены действия и, если это
 необходимо, параметры действий;
     в сценарии консультации нет ссылок на несуществующие предложения;
     для  каждой простой цели указано хотя бы одно правило вывода  ее
 значения;
     для каждого символьного атрибута указано хотя бы одно значение;
     для  всех  правил, атрибутов и значений символьных атрибутов указаны
 имена;
     для всех числовых атрибутов  указан диапазон допустимых значений;
     в  правилах  определены  типы и в соответствии с этими типами -
 условия применимости и действия;
     в правилах и предложениях сценария не упоминаются не описанные в
 данной модели цели.
       Контроль  синтаксической  корректности  арифметических и логических
выражений, а также контроль отсутствия в них ссылок  на  неописанные  цели
осуществляются   непосредственно   при  вводе  выражений  в  Базу  знаний.
Остальные условия целостности проверяются  отдельно  по  завершении  ввода
описания модели с помощью средств тестирования.
       
       wr6.8. В одной модели пользователь может описать не более:
      500 (30-учебный вариант) утверждений о значениях символьных атрибутов;
      100 символьных атрибутов;
      300 числовых атрибутов;
      1000 правил;
      100 предложений сценария.
       Область данных в описании модели, содержащая тексты имен, сообщений
и  откомпилированные  арифметические  и  логические  выражения,  не  может
превышать 64 тыс. байт.
                                       @Вперед@21@ @Оглавление@22@ @Назад@19@
 }}
 21{{
                   mwl                        
                   mwl   Режим консультации   ▒▒
                   mwl                        ▒▒
                     ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

       wr7.1.  Режим  консультации  предназначен для решения задач конечного
пользователя  на  основе  моделей  в  Базе  знаний  и  исходных  данных  о
конкретной   ситуации   в  проблемной  области.  Этот  режим  используется
разработчиком на этапе тестирования экспертных систем,  а  также  конечным
пользователем при решении конкретных задач с помощью разработанных систем.
       
       wr7.2.  В  режиме  консультации обеспечиваютcя следующие возможности:
решение конкретной задачи  на  основе  выбранной  модели  с  формированием
объяснений ЗАЧЕМ в ходе консультации задается тот или иной вопрос;
      просмотр информации об описанных в модели целях, в том числе -
 объяснений, КАК получены значения этих целей,  и изменение значений
 любых  целей;
      просмотр информации о правилах в модели;
      сброс значений всех целей либо значений всех выведенных целей
 (т.е. отмена всех значений, не являющихся исходными данными);
      получение трассы решения задачи;
      запись протокола консультации в файл;
      создание и загрузку контрольных точек.
       Подробное   описание  сообщений  и  команд  пользователя  в  режиме
консультации приводится  в  документе  "Комплекс программ ЭКО версия  3.4.
Основные программные средства. @Руководство программиста@54@".
       
       wr7.3.  Решение  задачи  осуществляется  в  ходе  диалога  экспертной
системы с пользователем. На экран выдаются  сообщения  в  соответствии  со
сценарием  консультации, а также задаются вопросы, описанные в применяемых
правилах-вопросах.  При  задании  вопроса  пользователю  выдается  краткое
поясняющее  сообщение  о виде ожидаемого ответа. 
       Значения числовых атрибутов должны вводиться в виде  действительных
чисел  с точностью до двух знаков после десятичной точки и не выходящих за
пределы диапазона допустимых значений этих атрибутов. Диапазоны допустимых
значений выдаются  пользователю  в  текстах  подсказок  во  время  задания
вопросов.
       Значения   утверждений   должны   вводиться  в  виде  коэффициентов
определенности. Если при задании вопроса пользователю  предлагается  меню,
составленное  на  основе  шкалы  (см.  @п.  5.1.5@13@),  то  пользователь имеет
возможность как ввести числовое значение коэффициента,  так  и  выбрать  в
меню лингвистическое описание коэффициента.
       При задании сложного вопроса пользователю выводится на экран список
значений  целевого  символьного  атрибута.  Если вопрос альтернативный, то
пользователь в соответствии с поясняющим сообщением системы должен выбрать
то значение, которое имеет место в рассматриваемой ситуации.  Если  вопрос
дистрибутивный, то пользователь должен указать коэффициенты определенности
(в  числовом  виде  или  с  помощью меню если имеется шкала), для всех тех
значений символьного атрибута, о которых он имеет информацию.
       Если пользователь не имеет информации, позволяющей ему ответить  на
вопрос  ,  он  может  ввести ответ НЕ_ЗНАЮ. Тогда будут применяться другие
правила вывода искомого значения, если такие правила есть в модели.
       Вместо ответа на вопрос пользователь может ввести команду ЗАЧЕМ.  В
этом случае консультация будет прервана и пользователю будет сообщено, для
вывода  какой цели задается вопрос. Если пользователь снова введет команду
ЗАЧЕМ, то он получит информацию о том, подцелью  какого  правила  является
эта  цель, и т.д. Таким образом, многократный ввод команды ЗАЧЕМ позволяет
просматривать цели и правила на пути в сети  вывода  от  исходной  цели  к
текущей, т.е. к той, о которой задается вопрос.
       Пользователь  имеет возможность вместо ответа на вопрос откладывать
решение задачи и переходить к работе с моделью в целом. По окончании  этой
работы он имеет возможность либо вернуться к прерванной консультации, либо
завершить ее.
       
       wr7.4. При выдаче информации о целях пользователю сообщаются:
      имена целей;
      типы (числовой атрибут или утверждение);
      развернутые имена;
      значения и их источники - для выведенных целей (в случае утвер-
 ждений выдаются коэффициенты определенности);
      статус цели  (значение  неизвестно,  цель активна,  значение не
 удалось получить).
       Пользователь  может  изменить  значение  любой  цели.  При внесении
изменений он должен учитывать возможность нарушения корректности  текущего
решения,  поскольку автоматически не пересматриваются те значения, которые
были выведены исходя из измененных целей.
       Просмотр источников значений целей  обеспечивает  объяснение  того,
КАК был получен тот или иной результат.
       
       wr7.5. При выдаче информации о правилах пользователю сообщаются:
      имена правил;
      комментарии к правилам;
      цели и подцели правил.
       
       wr7.6.  Если  пользователь  хочет  повторить  консультацию  с другими
исходными данными, он  может  сбросить  все  значения  по  команде  СБРОС.
Программа  обеспечивает сброс либо всех значений, либо только тех, которые
не были получены  в  ответ  на  вопрос  к  пользователю,  т.е.  выведенных
значений.  С  помощью  сброса  выведенных  значений,  изменения  некоторых
исходных данных и повторного решения задачи пользователь  может  проверять
гипотезы типа "что если".
       
       wr7.7.  Решение  задач  может, по желанию пользователя, проводиться с
трассировкой консультации. При этом на  экране  появляется  дополнительное
окно  для  трассы,  в которое помещаются сообщения о выполняемых действиях
сценария, анализируемых  целях  и  рассматриваемых  правилах.  Трассировка
может  использоваться  как  для  отладки  Базы знаний, так и для получения
объяснений о работе экспертной системы.
       
       wr7.8.  При  решении  задач  с   протоколированием   все   сообщения,
выдаваемые  в  ходе  консультации,  и все ответы, вводимые пользователем в
ответ на вопросы, будут помещены в текстовой файл,  называемый  протоколом
консультации. Если решение задачи проводится с трассировкой, то в протокол
будет помещена и трасса консультации.

       wr7.9.  Контрольные  точки  используются  для  отладки  моделей и
создаются по команде пользователя  во  время  консультации.  При  создании
точки  информация  о  состоянии всех моделей, загруженных к моменту выдачи
команды, запоминается во  внешнем  файле,  имя  которого  запрашивается  у
пользователя.  В отличие от файлов, создаваемых действием СОЗДАТЬ_ТОЧКУ из
сценариев моделей (см. @п. 5.6.14@19@), данный  файл  является  двоичным  и  не
должен   корректироваться.   В  дальнейшем  пользователь  может  загрузить
контрольную точку из данного файла  и  продолжить  консультацию.  Загрузка
может  быть  успешно осуществлена, если с момента создания точки модели не
корректировались и не тестировались.

                               @Вперед@23@ @Оглавление@22@ @Назад@20@
 }}
23{{
                 mwl                         
                 mwl  Электронная книга ELK  ▒▒
                 mwl                         ▒▒
                   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
                                         
       
       wr8.1.1.  Программное  средство  ELK предназначено для подготовки
гипертекстов.  Оно  позволяет  значительно  облегчить  работу  с  большими
объемами   текстовой  информации,  что  достигается  путем  предоставления
пользователю  простых  и   удобных   средств   структурирования   текстов,
возможности   связывания  полученных  структурных  единиц  в  конструкцию,
отражающую семантику текста и поисковых процедур,  эффективно  реализующих
эти связи.
       
       wr8.1.2.  В  комплексе  программ ЭКО средство ELK имеет следующие
применения:
       при помощи ELK создана Помощь, содержащая всю информацию, имеющуюся
в документации на комплекс, и доступная  пользователю  в  любой  момент  в
обоих режимах работы ОПС;
       при   помощи   ELK  пользователь  может  разрабатывать  собственные
справочные средства для оказания помощи в процессе  работы  с  экспертными
системами;
       совместно используя средства ELK и XHT, пользователь может получать
отчеты по Базе знаний в виде гипертекстов.
       Детальное   описание   данного   средства  содержится  в  документе
"Комплекс программ ЭКО версия 3.4. @Программное средство ELK@51@. Руководство
программиста".

                               @Вперед@24@ @Оглавление@22@ @Назад@21@
}}
24{{
                 mwl                         
                 mwl  Средство анализа       ▒▒
                 mwl  Базы знаний XHT        ▒▒
                 mwl                         ▒▒
                   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
                                         
       wr8.2.1.  Программное  средство  XHT представляет собой генератор
отчетов  по  Базе  знаний.  Оно  предназначено  для  того,  чтобы   помочь
пользователю  при  изучении,  анализе  и  отладке Базы знаний, созданной с
помощью комплекса ЭКО. При помощи XHT  могут  быть  получены  отчеты  трех
типов: текстовые, гипертекстовые и графические.
       Текстовый отчет представляет собой твердую копию некоторой модели в
Базе  знаний  и  включает  распечатку  атрибутов,  правил  и сценария этой
модели, а также таблицы перекрестных ссылок. Пользователю  предоставляются
широкие возможности по управлению содержанием текстовых отчетов.
       Гипертекстовый  отчет  включает  ту же информацию, что и текстовый,
однако отличается от последнего  способом  использования.  Если  работа  с
текстовым  отчетом  может производиться без помощи ПЭВМ, то гипертекстовый
отчет, как и любой другой  гипертекст,  существенно  использует  ПЭВМ  для
реализации поисковых процедур, поддерживающих связи между его фрагментами.
       Графический  отчет  представляет собой графическое изображение сети
вывода некоторой модели в Базе знаний в виде  И-ИЛИ  графа,  описанного  в
@пп.4.1.4.@10@  Пользователь может распечатать графический отчет или работать с
ним непосредственно на ПЭВМ, используя  возможность  быстрого  перехода  к
гипертекстовому отчету по соответствующей модели.
       
       wr8.2.2.   Для   получения   гипертекстовых   отчетов  необходимо
совместно использовать средства XHT и ELK.
       Детальное  описание  данного  средства   содержится   в   документе
"Комплекс программ ЭКО версия 3.4. @Средства анализа Базы знаний XHT@52@.
Руководство программиста ".
       
                               @Вперед@25@ @Оглавление@22@ @Назад@23@
}}
25{{
                 mwl                      
                 mwl     Стандартные      ▒▒
                 mwl     интерфейсы       ▒▒
                 mwl                      ▒▒
                   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
                                         
       wr8.3.1. В состав комплекса программ ЭКО входят  два  стандартных
интерфейса: графический и информационный.

       wr8.3.2.   Средства  графического  интерфейса  предназначены  для
организации диалога с  пользователем  с  помощью  графических  изображений
(рисунков, схем, карт, диаграмм и т.д.).
       Преимущества представления информации в виде рисунка по сравнению с
текстовым  представлением  той  же  информации  в некоторых случаях весьма
существенны. Например: указать местоположение на плане.
       Комплекс  программ  ЭКО  допускает  использование  рисунков  как  в
качестве иллюстраций, так и для задания вопросов.
       
       wr8.3.3.  Экспертная система, созданная при помощи комплекса ЭКО,
может  использоваться  как  подзадача   в   системах   обработки   данных,
использующих  файловую  структуру  DOS  для хранения данных. Программная и
информационная совместимость системы обработки данных и экспертной системы
осуществляется через так называемый информационный интерфейс.
       Свои  функции  информационный  интерфейс  осуществляет  при  помощи
следующих операций:
       получение данных от систем обработки данных;
       интерпретация  полученных  данных  в терминах переменных экспертной
системы.
       Детальное описание стандартных интерфейсов содержится  в  документе
"Комплекс программ ЭКО версия 3.4. @Стандартные интерфейсы@53@. Руководство 
программиста".
       
                             @Оглавление@22@ @Назад@24@ @Вперед@223@
}}
223{{
                        mwl                      
                        mwl       ФОРМАТ         ▒▒ 
                        mwl    ФАЙЛА EKO.ANS     ▒▒
                        mwl                      ▒▒
                          ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

    wr9.1.1. Файл  EKO.ANS служит для передачи информации из внеш-
 ней программы, вызванной из правила типа "вопрос", в Консультатор.
 Файл EKO.ANS должен представлять собой одну или  несколько  строк 
 в формате:

           <команда> [: <номер альтернативы> [: <значение>]]

      при этом, номер альтернативы и/или значение могут отсутствовать.
 Команда представляет собой символ латинского алфавита, номер альтер-
 нативы - целое число, значение - вещественное число.

     Перечень возможных команд, их интерпретация и другие  характерис-
 тики приведены в табл. 1.
 

                                                     Таблица 1

      Команды, интерпретируемые Консультатором в процессе ответа
                на вопрос при помощи внешней программы

┌────────────┬───────────────────┬───────────────────┬───────────────────┐
│   команда  │  интерпретация    │номер альтернативы │  значение         │
├────────────┼───────────────────┼───────────────────┼───────────────────┤
│     H      │   помощь (F1)     │  не требуется     │  не требуется     │
│            │                   │                   │                   │
│     U      │   НЕ ЗНАЮ (F2)    │  не требуется     │  не требуется     │
│            │                   │                   │                   │
│     R      │   повторить       │  не требуется     │  не требуется     │
│            │   вопрос (F3)     │                   │                   │
│            │                   │                   │                   │
│     C      │   выйти в меню    │  не требуется     │  не требуется     │
│            │   команд (F4)     │                   │                   │
│            │                   │                   │                   │
│     W      │   ЗАЧЕМ? (F5)     │  обязателен для   │  не требуется     │
│            │                   │  сложных вопросов │                   │
│            │                   │                   │                   │
│     P      │   просмотр прото- │  не требуется     │  не требуется     │
│            │   кола (F6)       │                   │                   │
│            │                   │                   │                   │
│     L      │   функциональная  │  обязателен для   │  не требуется     │
│            │   помощь (F10)    │  сложных вопросов │                   │
│            │                   │                   │                   │
│     E      │   конец консуль-  │  не требуется     │  не требуется     │
│            │   тации (Esc)     │                   │                   │
│            │                   │                   │                   │
│     V      │   ответ           │  обязателен для   │  указывается      │
│            │                   │  сложных вопросов,│  для простых и    │
│            │                   │  для простых ука- │  сложных дистрибу-│
│            │                   │  зывается символ  │  тивных вопросов  │
│            │                   │  '*'              │                   │
│            │                   │                   │                   │
│     K      │   ошибка          │  интерпретируется │  не требуется     │
│            │                   │  как код ошибки   │                   │
│            │                   │                   │                   │
│            │                   │                   │                   │
└────────────┴───────────────────┴───────────────────┴───────────────────┘
 
      
      Как правило,  EKO.ANS  может  содержать  только  одну  команду.
 Исключение составляет случай, когда задается сложный  дистрибутивный 
 вопрос. При ответе на него EKO.ANS может содержать несколько  команд
 (с кодом V).
      Указанный протокол полностью   поддерживает   программа  GQ.EXE
 (см. "Комплекс программ  ЭКО версия 3.4. @Стандартные  интерфейсы@53@.  
 Руководство программиста").

                                        @Оглавление@22@ @Назад@25@
}}



54{{
                        mwl                    
                        mwl    ДОКУМЕНТАЦИЯ    ▒▒
                        mwl    НА ОСНОВНЫЕ     ▒▒
                        mwl    ПРОГРАММНЫЕ     ▒▒
                        mwl    СРЕДСТВА        ▒▒
                        mwl                    ▒▒
                          ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
       
       Настоящий     документ    является    руководством    программиста,
использующего основные программные  средства  (далее  по  тексту  -  ОПС),
входящие   в  состав  комплекса  программ  ЭКО.  В  документе  описываются
процедуры развертывания ОПС и диалоговое взаимодействие с ОПС.
       При эксплуатации  ОПС  необходимо  дополнительно  руководствоваться
сведениями, приведенными в документах:
     (@<-@22@) "Комплекс программ ЭКО версия 3.4. Описание применения";
     (@<-@51@) "Комплекс программ ЭКО версия 3.4. Программное средство 
ELK. Руководство программиста";
     (@<-@52@) "Комплекс программ ЭКО версия 3.4.   Средство   анализа
Базы знаний XHT. Руководство программиста";
     (@<-@53@) "Комплекс программ ЭКО версия 3.4. Стандартные   интер-
фейсы. Руководство программиста".
       
                             weСОДЕРЖАНИЕ:

    1.  Введение
   @1.1@56@ Назначение ОПС
   @1.2@57@ Условия применения ОПС
    2.  Характеристики ОПС
   @2.1@59@ Режимы работы ОПС
   @2.2@60@ Состав ОПС
   @2.3@61@ Требования к оперативной памяти
    3.  Работа с ОПС
   @3.1@63@ Общие сведения
   @3.2@64@ Подготовка ОПС к работе
   @3.3@65@ Работа в режиме приобретения знаний
   @3.4@66@ Работа в режиме ведения консультации
   @3.5@67@ Работа с демонстрационными примерами
       
}}
56{{                              @+ п.1.2@57@   @СОДЕРЖАНИЕ@54@

                            1.  ВВЕДЕНИЕ

       wr1.1.  Назначение ОПС
       
       wr1.1.1.  ОПС  реализуют основные функции комплекса ЭКО по созданию и
использованию экспертных систем, позволяющих получать решения сложных,  не
имеющих  формализованного описания задач, возникающих в различных областях
человеческой деятельности. К числу указанных функций относятся следующие:
      - представление знаний;
      - приобретение знаний;
      - решение задач;
      - объяснение хода решения и полученных результатов;
      - оказание помощи;
      - интеграция с внешним программным окружением.
       
       wr1.1.2.  ОПС  включают  средства   представления   знаний   в   виде
специализированного  языка  ЯПЗ  (язык  представления  знаний).  Знания  о
некоторой проблемной области, представленные  с  помощью  ЯПЗ,  называются
описанием  соответствующей  проблемной  области. Описание ЯПЗ приводится в
документе "Комплекс программ ЭКО версия 3.4.@Описание применения@22@".
       
       wr1.1.3. ОПС  обеспечивают  диалоговый  ввод  и  компиляцию  описаний
различных  проблемных  областей.  Компиляция  знаний позволяет значительно
увеличить  скорость  решения  задач.  Знания,  полученные   в   результате
компиляции  описания  некоторой  проблемной  области,  называются  моделью
данной области. Процесс ввода и компиляции знаний в дальнейшем  называется
приобретением знаний.
       
       wr1.1.4.  ОПС обеспечивают возможность решения задач (т.е. проведения
консультации) на  основе  имеющихся  моделей  проблемных  областей  как  в
диалоговом, так и в пакетном режиме.
       
       wr1.1.5.  ОПС  позволяют  получать  объяснение  хода решения задачи и
полученных результатов в виде ответов на вопросы типа ЗАЧЕМ и  КАК  .  ОПС
позволяет также следить за ходом решения при помощи механизма трассировки.
Кроме  того,  имеются  средства,  позволяющие исследовать поведение модели
путем  наблюдения  за  изменением  результата  в   зависимости   изменения
небольшого числа исходных данных (ЧТО ЕСЛИ ?).
       
       wr1.1.6.  ОПС  имеют средства для оказания помощи пользователю в виде
подсказки и путем предоставления оперативного доступа  к  документации  на
комплекс   ЭКО,   подготовленной  в  виде  гипертекста.  Кроме  того,  ОПС
обеспечивают  возможность   вызова   других   средств   оказания   помощи,
разработанных пользователем.
       
       wr1.1.7.  ОПС  предоставляют  средства  интеграции  ЭС, созданных при
помощи ЭКО, с внешней программной средой.  При  помощи  указанных  средств
разработаны,  в  частности, стандартные интерфейсы (см. "Комплекс программ
ЭКО версия 3.4. @Стандартные интерфейсы@53@. Руководство программиста").

}}
57{{                         @+ п.2.1@59@   @СОДЕРЖАНИЕ@54@   @- п.1.1@56@
       
      wr1.2. Условия применения ОПС
       
       wr1.2.1.  ОПС  функционируют  в  составе   программного   обеспечения
персональных   электронных   вычислительных  машин  (ПЭВМ)  типа  ЕС  1841
Е11.700.012  и  последующих  моделей  или  ПЭВМ  типа  РС/ХТ  ,  РС/AТ   с
оперативной  памятью  не  менее  512  Кбайт,  цветным графическим дисплеем
(CGA,EGA,VGA), накопителем на жестком магнитном диске емкостью не менее  5
Мбайт  и накопителем на гибких магнитных дисках емкостью 360 Кбайт в среде
операционной системы АЛЬФА ДОС 16 или совместимой с ней МS DOS версии  3.0
и выше.
       
       wr1.2.2.  ОПС  используют  альтернативную  версию  кодировки символов
кириллицы. Однако предусмотрена возможность настройки  ОПС  для  работы  в
других кодировках. Соответствующие сведения приводятся в п.3.2.

}}
59{{                          @+ п.2.2@60@   @СОДЕРЖАНИЕ@54@   @- п.1.2@57@
       
                       wr2.  ХАРАКТЕРИСТИКИ ОПС

      wr2.1  Режимы работы ОПС
       
      wr2.1.1. ОПС функционируют в двух режимах:
      - режиме приобретения знаний;
      - режиме консультации (решения задач).
       
       wr2.1.2.  В режиме приобретения знаний реализуются следующие основные
функции:
      - просмотр и корректировка Базы знаний;
      - ввод в Базу знаний новой информации;
      - тестирование моделей Базы знаний;
      - компиляция и рекомпиляция моделей Базы знаний;
      - оказание помощи.
       
       wr2.1.3.  В  режиме  консультации  реализуются   следующие   основные
функции:
      - решение задач;
      - объяснение хода решения и полученных результатов;
      - оказание помощи;
      - интеграция с внешним программным окружением.

}}
60{{                          @+ п.2.3@61@   @СОДЕРЖАНИЕ@54@   @- п.2.1@59@
       
      wr2.2. Состав ОПС
       
      wr2.2.1. Состав ОПС представлен в табл. 1.

                                                     Таблица 1
                            Состав ОПС

┌────────────────┬─────────────────────────────────────────────────────┐
│ Компонент      │                   Назначение                        │
├────────────────┼─────────────────────────────────────────────────────┤
│                │                                                     │
│ Редактор       │  Реализует функции режима приобретения знаний       │
│                │                                                     │
│ Консультатор   │  Реализует функции режима консультации              │
│                │                                                     │
│ П-Консультатор │  Обеспечивает решение задач в пакетном режиме       │
│                │                                                     │
│ Загрузчик      │  Обеспечивает оверлейную загрузку Редактора и       │
│                │  Консультатора в соответствии с выбранным режимом   │
│                │  работы                                             │
│                │                                                     │
│ База знаний    │  Обеспечивает хранение знаний                       │
│                │                                                     │
│ Помощь         │  Обеспечивает оперативный доступ к документации на  │
│                │  комплекс, подготовленной в виде гипертекста        │
│                │                                                     │
│ Демонстратор   │  Обеспечивает запуск демонстрационных примеров для  │
│                │  быстрого ознакомления с основными возможностями    │
│                │  Редактора и Консультатора                          │
│                │                                                     │
└────────────────┴─────────────────────────────────────────────────────┘


      wr2.2.2. Редактор оформлен в виде исполняемого модуля EKOED.EXE.
       Консультатор оформлен в виде исполняемого модуля EKOCN.EXE.
       П-Консультатор оформлен в виде исполняемого модуля EKORN.EXE.
       Все    сообщения,    выдаваемые    Редактором,   Консультатором   и
П-Консультатором помещены в текстовый файл EKO.TXT,  что  позволяет  легко
выполнить   перекодировку   сообщений   этих   модулей   (или  создать  их
нерусскоязычные версии).
       Загрузчик оформлен в виде исполняемого модуля EKO.EXE.
       База знаний представляет  собой  совокупность  файлов  специального
вида.  Такие файлы называются моделями и имеют расширение EXP. База знаний
может быть пустой (например, перед началом эксплуатации комплекса).
       Помощь включает исполняемый модуль HT.EXE (процессор  гипертекста),
а  также  файлы данных T.TXT (прототип гипертекста), T.HTD (индексный файл
гипертекста).
       Демонстратор включает исполняемый модуль EKOFR.EXE, командные файлы
DEMO1.BAT  и  DEMO2.BAT,  а  также  файлы  данных  DEMO1.ERB  и  DEMO2.ERB
(демонстрационные примеры).
      wr2.2.3. ОПС поставляются в двух вариантах: основном  и  учебном. 
 Основной вариант предназначен для создания  промышленных  экспертных
 систем. Учебный - для обучения работе с комплексом на примере "игру-
 шечных" экспертных систем небольшого объема (см. "Комплекс  программ 
 ЭКО версия 3.4. Описание применения" Раздел 6). Учебный  вариант  по 
 составу идентичен основному за исключением одного  модуля EKORN.EXE.
}}
61{{                          @+ п.3.1@63@   @СОДЕРЖАНИЕ@54@   @- п.2.2@60@
       
      wr2.3. Требования к оперативной памяти
       
      wr2.3.1. Для работы  ОПС требуется:
       -  в  режиме  приобретения  знаний - не более 400 Кбайт оперативной
памяти (с учетом памяти, требуемой для загрузки моделей);
       - в  режиме  консультации  (Консультатор)  -  не  более  320  Кбайт
оперативной памяти (без учета памяти, требуемой для загрузки моделей);
       -  в  режиме  консультации  (П-Консультатор)  -  не более 160 Кбайт
оперативной памяти (без учета памяти, требуемой для загрузки моделей).

}}
63{{                          @+ п.3.2@64@   @СОДЕРЖАНИЕ@54@   @- п.2.3@61@
       
                           wr3.  РАБОТА С ОПС

      wr3.1. Общие сведения
       
       wr3.1.1. В обоих режимах работы экран дисплея делится на четыре поля:
поле меню, поле сообщений, поле подсказки и главное поле (см. рис. 1).

                   Структура экрана дисплея

  ┌────────────────────────────────────────────────────────────┐
  │                      Поле  меню                            │
  ├────────────────────────────────────────────────────────────┤
  │                                                            │
  │                                                            │
  │                                                            │
  │                                                            │
  │                     Главное  поле                          │
  │                                                            │
  │                                                            │
  │                                                            │
  │                                                            │
  ├────────────────────────────────────────────────────────────┤
  │                     Поле  сообщений                        │
  ├────────────────────────────────────────────────────────────┤
  │                     Поле  подсказки                        │
  └────────────────────────────────────────────────────────────┘


                               Рис. 1


       Поле меню содержит перечень режимов работы  с  загруженной  моделью
(меню  команд).  В  режиме  консультации  поле меню используется также при
выводе лингвистических  шкал.  Поле  сообщений  предназначено  для  вывода
диагностической  и  справочной  информации.  В  поле  подсказки  выводится
информация о действиях, которые пользователь может предпринять  в  текущей
ситуации.   Главное   поле   используется  для  обмена  информацией  между
пользователем и ОПС при помощи окон. Пример экрана дисплея представлен  на
рис. 2.

         Пример экрана дисплея во время работы Консультатора

  ┌────────────────────────────────────────────────────────────────┐
  │ Консультация Сброс Трасса Протокол Контр.точка Просмотр Выход  │
  ├────────────────────────────────────────────────────────────────┤
  │КОММЕНТАРИЙ────────────────────────────────────────────────────┐│
  ││                      Модель А1 предназначена                 ││
  ││                       для решения задачи...                  ││
  │└──────────────────────────────────────────────────────────────┘│
  │                                                                │
  │                                                                │
  │МОДЕЛИ──────┐                                                   │
  ││ А1        │                                                   │
  ││ А2        │                                                   │
  ││ А3        │                                                   │
  ││ .         │                                                   │
  │└───────────┘                                                   │
  ├────────────────────────────────────────────────────────────────┤
  │                                                                │
  ├────────────────────────────────────────────────────────────────┤
  │ F1 -  помощь Enter - вход в консультацию                       │
  └────────────────────────────────────────────────────────────────┘
                               Рис. 2

       Окно   -  это  прямоугольная  область  экрана  (находящаяся  внутри
главного поля ), предназначенная для отображения и редактирования текстов.
Фрагменты текста, не умещающиеся в окне, могут быть отображены при  помощи
специальных команд.
       Если   окно   имеет   имя,   то   это   имя  обычно  идентифицирует
информационный объект, отображаемый при помощи окна. Некоторые окна  могут
не иметь имени. Эти окна используются для ввода информации пользователем и
называются  боксами.  Боксы могут существовать только как активные объекты
(определение активности  объекта  приведено  в  п.  3.1.2).Одновременно  в
главном   поле   могут  отображаться  несколько  окон,  причем  они  могут
перекрываться.
       
       wr3.1.2. В процессе диалога пользователь взаимодействует с  некоторым
окном или меню, находящимся в поле меню. Соответствующий объект называется
активным  или получившим управление. Одновременно в процессе диалога может
существовать не  более  одного  активного  объекта.  Визуально  активность
объекта определяется установкой курсора.
       
       wr3.1.3. В любой момент диалога в обоих режимах  работы  пользователю
высвечивается  подсказка.  Кроме того, при помощи клавиша F1, всегда можно
инициировать просмотр документации на комплекс ЭКО, подготовленной в  виде
гипертекста   при   помощи  средства  ELK  (см.  "Комплекс  программ   ЭКО
версия 3.4.@Программное средство ELK@51@. Руководство программиста").

}}
64{{                          @+ п.3.3@65@   @СОДЕРЖАНИЕ@54@   @- п.3.1@63@
       
      wr3.2. Подготовка ОПС к работе
       
    wr3.2.1. ОПС размещаются на первых трех дискетах, входящих в комп-
 лект поставки комплекса ЭКО. Содержимое этих  дискет  представлено  в 
 табл. 2.
 
                                                     Таблица 2
                  Размещение ОПС на дискетах

┌────────────────┬─────────────┬─────────────────────────────────────────┐
│ N ГМД          │  Файл       │       Назначение                        │
├────────────────┼─────────────┼─────────────────────────────────────────┤
│                │             │                                         │
│ 1              │ INSTALL.EXE │ инсталляция комплекса ЭКО на жесткий    │
│                │             │ диск                                    │
│                │ INSTALL.CNF │ файл конфигурации комплекса (использу-  │
│                │             │ ется программой INSTALL.EXE)            │
│                │ UNINST.EXE  │ деинсталляция комплекса ЭКО с жесткого  │
│                │             │ диска                                   │
│                │ EKOCN.EXE   │ Консультатор                            │
│                │ READ.ME     │ информация о последних изменениях       │
│                │ EKO.TXT     │ файл сообщений                          │
│                │ EKOE.TXT    │ файл сообщений (на английском языке)    │
│                │             │                                         │
│ 2              │ EKORN.EXE   │ П-Консультатор (в учебном варианте      │
│                │             │ отсутствует)                            │
│                │ HT.EXE      │ процессор гипертекста (Помощь)          │
│                │ HELP.TXT    │ прототип гипертекста (Помощь)           │
│                │ HELP.HTD    │ индексный файл гипертекста (Помощь)     │
│                │             │                                         │
│ 3              │ EKOED.EXE   │ Редактор                                │
│                │ EKO.EXE     │ Загрузчик                               │
│                │ EKOFR.EXE   │ управление демонстрационными примерами  │
│                │ DEMO1.BAT   │ запуск 1 демонстрационного примера      │
│                │ DEMO2.BAT   │ запуск 2 демонстрационного примера      │
│                │ DEMO1.ERB   │ 1 демонстрационный пример               │
│                │ DEMO2.ERB   │ 2 демонстрационный пример               │
│                │             │                                         │
└────────────────┴─────────────┴─────────────────────────────────────────┘

      wr3.2.2. Для подготовки ОПС к работе необходимо:

      - инсталлировать комплекс ЭКО на жесткий магнитный диск ПЭВМ;
      - настроить диалоговые средства ОПС на языковую среду.

      wr3.2.3. Процесс инсталляции  комплекса  ЭКО  описан  в  документе
 "Комплекс программ ЭКО версия 3.4. Описание применения" (@Раздел 2@222@).

      wr3.2.4. Настройка диалоговых средств Редактора  и  Консультатора  на
языковую  среду  подразумевает перекодировку файла сообщений EKO.TXT, если
работа должна вестись в кодировке, отличной от альтернативной.  В  составе
ОПС  отсутствуют программы перекодировки, однако подобные программы весьма
распространены (например, при помощи ALFACONV можно  без  труда  выполнить
перекодировку EKO.TXT в основную кодировку или кодировку MIK). Кроме того,
при желании такую программу легко написать самому.
       Файл  сообщений  используется Редактором и Консультатором следующим
образом. Загрузка файла сообщений -  первое,  что  делают  эти  программы.
Причем,   поиск  ведется  вначале  в  текущем  директории,  а  затем  -  в
директории, откуда была запущена загружающая  EKO.TXT  программа.  Если  в
процессе  загрузки возникли ошибки, происходит аварийный останов с выдачей
следующего сообщения:

               eko.txt *** <код ошибки>

      Ниже приводятся коды ошибок:

      1   -  eko.txt не найден;
      2   -  ошибка при считывании eko.txt с диска;
      4   -  обнаружена строка с недопустимым номером (<0 или >2499);
      5   -  нет места в буфере для загрузки eko.txt;
      6   -  обнаружены две строки с одинаковыми номерами.

       Для того, чтобы выполнить настройку Помощи, следует  перекодировать
файл HELP.TXT.
       Демонстратор  может быть настроен для работы в основной кодировке и
кодировке MIK  при  помощи  установки  системной  переменной  операционной
системы EREBUS по команде:

               SET EREBUS=<идентификатор кодировки>

      где <идентификатор кодировки> -

             B - кодировка MIK,
             M - основная версия кодировки.

       wr3.2.5. Файл EKOE.TXT содержит все сообщения, выдаваемые  в  про-
цессе работы ОПС на английском языке. Для того, чтобы получить англоя-
зычную версию ОПС, необходимо после инсталляции сначала  переименовать 
файл EKO.TXT, например, в EKOR.TXT, а затем файл EKOE.TXT - в EKO.TXT.
       
       wr3.2.6.  Для  запуска  ОПС  необходимо  выдать  команду операционной
системы:
                          EKO
      
       По этой команде управление  получит  Загрузчик,  который  выполняет
первоначальную  загрузку  Редактора,  а  также  передачу  управления между
Редактором и  Консультатором  в  процессе  работы  ОПС.  Следует  обратить
внимание на тот факт, что Редактор и Консультатор должны всегда находиться
в том же директории, что и Загрузчик.

}}
65{{                          @+ п.3.4@66@   @СОДЕРЖАНИЕ@54@   @- п.3.2@64@
       
      wr3.3. Работа в режиме приобретения знаний
       
       wr3.3.1.  Редактор  обеспечивает  ввод  описаний проблемных областей,
состоящих из описаний  атрибутов  и  правил.  Кроме  знаний  о  проблемной
области каждое такое описание включает сценарий консультации, определяющий
задачу, которая будет решаться в процессе консультации.
       Редактор   обеспечивает  возможность  корректировки,  компиляции  и
тестирования введенного описания проблемной области.
       Компиляция производится автоматически в процессе ввода информации.
       При просмотре  информации,  содержащейся  в  модели,  автоматически
выполняется   ее   рекомпиляция,   поэтому   иногда   формат,   в  котором
осуществлялся ввод не полностью совпадает с форматом вывода.
       Структура диалога по приобретению знаний изображена на рис. 3.

            Структура диалога по приобретению знаний

                     ┌──────────┐
                     │  Модель  │
                     └────┬─────┘
   ┌─────────────────┬────┴───────────┬───────────────┐
┌──┴────────┐     ┌──┴────────┐    ┌──┴─────────┐  ┌──┴─────────┐
│Символьные │     │Числовые   │    │Комментарий │  │Предложения │
│атрибуты   │     │атрибуты   │    │к модели    │  │сценария    │
└──┬────────┘     └───────────┤    └────────────┘  └──────────┬─┘
   ├────────────┬───────────┐ └───────┬──────────┬─────────┐  └────┐
┌──┴────────┐┌──┴────────┐┌─┴─────┐┌──┴────┐┌────┴────┐ ┌──┴─────┐ │
│Значения   ││Развернутое││Шаблон ││Правила││Разверну-│ │Значе-  │ │
│символьного││имя сим-   ││утверж-│└───┬───┘│тое имя  │ │ние чис-│ │
│атрибута   ││вольного   ││дения  │    │    │числового│ │лового  │ │
└──┬────────┘│атрибута   │└───────┘    │    │атрибута │ │атрибута│ │
   │         └───────────┘             │    └─────────┘ └────────┘ │
   ├──────────┬───────────────┐        ├─────────┬──────────┐      │
┌──┴────┐┌────┴───────────┐┌──┴───┐┌───┴───┐ ┌───┴────┐ ┌───┴─────┐│
│Правила││Развернутое имя ││Утвер-││ Если  │ │  То    │ │ Коммен- ││
└──┬────┘│утверждения     ││ждение│└───────┘ └────────┘ │ тарий к ││
   │     └────────────────┘└──────┘                     │ правилу ││
   │                                                    └─────────┘│
   ├──────────┬─────────────┐          ┌─────────┬───────────┬─────┘
   │          │             │      ┌───┴────┐ ┌──┴─────┐ ┌───┴────┐
┌──┴────┐ ┌───┴────┐  ┌─────┴─────┐│ Если   │ │   То   │ │Коммен- │
│ Если  │ │  То    │  │Комментарии│└────────┘ └───┬────┘ │тарий к │
└───────┘ └────────┘  │к правилу  │               │      │предло- │
                      └───────────┘         ┌─────┴────┐ │жению   │
                                            │Сообщение │ └────────┘
                                            └──────────┘
                                Рис.3

       Диалоговые средства Редактора обеспечивают многооконное отображение
информации об атрибутах, правилах вывода и предложениях  сценария  текущей
модели.  Фрагменты шаблонов ввода, предназначенных для упрощения диалога с
Редактором, отображаются при помощи окон.
       Ограничения на количество вводимых утверждений, числовых атрибутов,
символьных  атрибутов,  правил  и  предложений  сценария   перечислены   в
документе "Комплекс программ  ЭКО   версия   3.4.   Описание   применения" 
(@раздел 6@20@).
       Для  обращения к Редактору необходимо выполнить действия, описанные
в @п. 3.2.5@64@.
       Работа Редактора начинается с того, что на экране  появляются  окна
МОДЕЛИ и КОММЕНТАРИЙ , а в верхней строке экрана - меню команд. Управление
получит окно МОДЕЛИ.
       
       wr3.3.2. Окно МОДЕЛИ обеспечивает отображение списка моделей текущего
директория и позволяет выполнить следующие действия:
      перемещение курсора по списку моделей;
      создание новой модели;
      переименование существующей модели;
      уничтожение существующей модели;
      загрузку модели в оперативную память;
      перемещение курсора в окно КОММЕНТАРИЙ;
      инкрементный поиск модели;
      выход из Редактора.
       Для  перемещения  курсора  по  списку  моделей используются клавиши
СТРЕЛКА ВВЕРХ и СТРЕЛКА  ВНИЗ.  При  этом  в  окне  КОММЕНТАРИЙ  синхронно
отображается текст комментария к соответствующей модели.
       Для  того  чтобы создать новую модель, необходимо подвести курсор к
последней строке списка моделей, содержащей текст  ".",  и  нажать  клавиш
Grey  +.  Затем следует ввести имя новой модели и нажать клавиш Enter. Имя
модели не должно содержать более восьми символов. Оно должно удовлетворять
всем требованиям, предъявляемым к именам файлов операционной системой, под
управлением которой работают ОПС.
       Действия  при  переименовании  модели  аналогичны   действиям   при
создании  новой модели, за исключением того, что курсор устанавливается на
имени соответствующей модели.
       Для того чтобы уничтожить модель, необходимо установить  курсор  на
имени этой модели и нажать клавиш Del.
       Для того чтобы загрузить модель, необходимо подвести курсор к имени
этой модели и нажать клавиш Enter.
       Перемещение  курсора  в  окно  КОММЕНТАРИЙ  и  обратно  выполняется
нажатием   клавиша   Tab.   Передача   управления   в   окно   КОММЕНТАРИЙ
осуществляется  с  целью  корректировки или просмотра текста комментария к
текущей модели.
       Инкрементный  поиск  предназначен   для   того,   чтобы   облегчить
пользователю  поиск  нужного  имени модели в случае, когда список содержит
большое число элементов,  и  заключается  в  следующем.  Нажатие  клавиша,
связанного  с  алфавитно-цифровым символом, инициирует перемещение курсора
по  списку  до  имени  модели,  которое  начинается  с  данного   символа.
Последующее  нажатие  такого  клавиша  перемещает  курсор до имени модели,
которое имеет первые два символа, соответствующие нажатым клавишам и  т.д.
Образец  поиска  отображается  в  поле  сообщений.  Нажатие  клавиша Space
инициирует поиск следующего имени, удовлетворяющего текущему образцу.  Для
сброса   образца  поиска  следует  нажать  клавиш,  отличный  от  клавишей
связанных с инкрементным поиском, например СТРЕЛКА ВВЕРХ.
       Выход из Редактора осуществляется при помощи клавиша Esc .
       После выполнения загрузки модели в  оперативную  память  управление
передается  меню  команд,  содержащему  команды  для работы с загруженными
моделями, а в окне МОДЕЛИ имя загруженной  модели  остается  подсвеченным.
Этот   метод  индикации  текущего  объекта  используется  и  в  дальнейшем
аналогичным образом, поэтому мы не будем далее его упоминать.
       Меню команд позволяет выполнить:
      редактирование модели (РЕДАКТИРОВАТЬ);
      тестирование  модели (ПРОВЕРИТЬ);
      сохранение  модели (СОХРАНИТЬ);
      обращение к Консультатору (ВЫПОЛНИТЬ);
      генерацию отчетов (ОТЧЕТ);
      возврат в окно МОДЕЛИ (ВЫХОД).
       Все перечисленные  команды  делятся  на  команды  без  аргумента  и
команды  с  аргументом.  Для  выполнения  команды без аргумента необходимо
установить курсор на соответствующем пункте меню и  нажать  клавиш  Enter.
Для  выполнения  команды  с  аргументом  необходимо  установить  курсор на
соответствующем пункте меню, затем в появившемся боксе  установить  курсор
на нужном значении аргумента и нажать клавиш Enter.
       Команда  РЕДАКТИРОВАТЬ  является  командой  с аргументом. Возможные
значения   аргумента:   "Символьные   атрибуты",   "Числовые    атрибуты",
"Сценарий".  Данная команда позволяет перейти к просмотру и редактированию
символьных  атрибутов,  числовых  атрибутов  и  предложения   сценария   в
зависимости от выбранного значения аргумента.

      Редактирование  символьных атрибутов описано в п. 3.3.3.
      Редактирование числовых атрибутов описано в п. 3.3.4.
      Редактирование предложений сценария описано в п. 3.3.5.

      Команда ПРОВЕРИТЬ является командой с аргументом.  Она позволяет 
 выполнить тестирование загруженной модели в двух режимах:  с  выдачей 
 полной диагностики и с выдачей  краткой  диагностики  (не  включающей 
 предупреждения). Протокол тестирования  выводится  в  окно  с  именем 
 ПРОТОКОЛ ПРОВЕРКИ.
       После выдачи команды СОХРАНИТЬ происходит запись загруженной модели
в файл с расширением EXP и именем, соответствующим имени модели. Если файл
с  указанным  именем  и  расширением  уже  существует,  он  предварительно
сохраняется  на  диске  с  расширением  EX$  (таким образом обеспечивается
сохранность предпоследней версии модели).
       После   выдачи   команды   ВЫПОЛНИТЬ   происходит    обращение    к
Консультатору,  который  обеспечивает  проведение  консультации  на основе
загруженной модели.
      При помощи команды ОТЧЕТ выполняется оперативная  генерация  ги-
 пертекстового и графического отчетов, используемых в дальнейшем  про-
 цессором графических объяснений. Данная команда может  рассматривать-
 ся как возможность оперативного вызова командного  файла  TOPOLOG.BAT  
 (см. @пп.4.5.2 раздела 4@85@ документа "Комплекс программ ЭКО версия 3.4. 
 Средство анализа Базы знаний XHT. Руководство программиста ").
       По  команде  ВЫХОД  производится  освобождение  памяти,  занимаемой
загруженной  моделью, что дает возможность загрузить новую модель с диска.
Управление возвращается в окно МОДЕЛИ.

       wr3.3.3. После  перехода  к  просмотру  и  редактированию  символьных
атрибутов  (см.  п.3.3.2)  на  экране появляется окно СИМВОЛЬНЫЕ АТРИБУТЫ,
которое становится активным. Данное окно обеспечивает  отображение  списка
символьных  атрибутов  загруженной  модели  и  позволяет  выполнить  те же
действия, что и окно МОДЕЛИ. Разница заключается в следующем:
       операндами команд являются символьные атрибуты;
       в окне КОММЕНТАРИЙ отображается текст развернутого имени  атрибута,
а также шкала (если она определена; шкала отделяется от развернутого имени
символом '$');
       нажатие клавиша Esc приводит к уничтожению текущего окна и возврату
управления меню команд;
       нажатие  клавиша  Enter  приводит  к выдаче команды показа значений
текущего символьного атрибута;
       нажатием клавишей Ctrl и СТРЕЛКА ВВЕРХ и Ctrl и СТРЕЛКА ВВЕРХ можно
переупорядочить имена символьных  атрибутов  в  списке  (это  относится  к
именам значений символьных атрибутов и именам числовых атрибутов);
       нажатие  клавиша  F2  приводит  к  выдаче  команды  показа  шаблона
утверждения.
       После выдачи команды показа шаблона утверждения появляется  окно  с
именем  ШАБЛОН  УТВЕРЖДЕНИЯ,  которое  получает  управление. В этот момент
пользователь может просмотреть  и,  если  нужно,  откорректировать  шаблон
утверждения,   связанный  с  текущим  атрибутом.  Выход  из  данного  окна
выполняется при помощи клавиша Esc.
       После выдачи команды показа списка  значений  текущего  символьного
атрибута  на  экране  появляется  окно  ЗНАЧЕНИЯ  СИМ.  АТРИБУТА,  которое
становится активным. Окно ЗНАЧЕНИЯ СИМ. АТРИБУТА обеспечивает  отображение
списка  значений текущего символьного атрибута и позволяет выполнять те же
действия, что и окно МОДЕЛИ. Отличие в следующем:
       операндами команд являются значения символьных атрибутов;
       в окне КОММЕНТАРИЙ отображается текст развернутого  имени  текущего
значения текущего атрибута, а также шкала (если она определена);
       нажатие клавиша Esc приводит к уничтожению текущего окна и возврату
управления в окно СИМВОЛЬНЫЕ АТРИБУТЫ;
       нажатие  клавиша  Enter приводит к выдаче команды показа правил для
вычисления  коэффициента   определенности   текущего   значения   текущего
символьного атрибута;
       нажатие   клавиша   F2   приводит  к  выдаче  команды  показа  окна
УТВЕРЖДЕНИЕ.
       После выдачи  команды  показа  окна  УТВЕРЖДЕНИЕ  появляется  окно,
содержащее  информацию  об  утверждении,  связанном  с  текущим  значением
текущего атрибута. Эта  информация  включает  в  себя  имя  утверждения  и
априорный   коэффициент  определенности  утверждения.  Переключение  между
полями осуществляется при помощи клавишей СТРЕЛКА ВВЕРХ  и  СТРЕЛКА  ВНИЗ.
Выход из данного окна осуществляется при помощи клавиша Esc.
       После  выдачи  команды  показа  правил  для вычисления коэффициента
определенности текущего значения атрибута на экране появится окно ПРАВИЛА,
которое  становится  активным.  Окно  ПРАВИЛА   обеспечивает   отображение
соответствующего  списка  имен  правил,  расположенных  в порядке убывания
приоритета, и позволяет выполнить те  же  действия,  что  и  окно  МОДЕЛИ.
Различие заключается в следующем:
       операндами команд являются правила;
       в  окне  КОММЕНТАРИЙ  отображается  текст  комментария  к  текущему
правилу;
       нажатие клавиша Esc приводит к уничтожению текущего окна и возврату
управления в окно ЗНАЧЕНИЯ СИМ. АТРИБУТА;
       нажатие клавиша Enter приводит к выдаче команды показа окон ЕСЛИ  и
ТО,   используемых   для   ввода,   просмотра  или  корректировки  условия
применимости и действия текущего правила;
       нажатие  клавишей  Ctrl  и  СТРЕЛКА  ВВЕРХ  приводит  к   повышению
приоритета  текущего  правила,  причем  имя  правила продвигается в списке
правил на позицию вверх;
       нажатие  клавишей  Ctrl  и  СТРЕЛКА  ВНИЗ  приводит   к   понижению
приоритета  текущего  правила,  причем  имя  правила продвигается в списке
правил на позицию вниз.
       Тип правила задается первой буквой имени правила в  соответствии  с
табл. 3.
       
                                                Таблица 3
                      Типы  правил

 ┌──────────────────────────────┬───────────────────────────────┐
 │ Первая буква в имени правила │                               │
 ├──────────────┬───────────────┤        Тип правила            │
 │   Латинская  │    Русская    │                               │
 ├──────────────┼───────────────┼───────────────────────────────┤
 │       A      │       А       │ Сложный альтернативный вопрос │
 │       D      │       Д       │ Сложный дистрибутивный вопрос │
 │       Q      │       П       │ Простой вопрос                │
 │       L      │       Л       │ Логическое правило            │
 │       N      │       Р       │ Арифметическое правило        │
 │       В      │       Б       │ Байесовское правило           │
 └──────────────┴───────────────┴───────────────────────────────┘

       Окно  ПРАВИЛА  позволяет  выполнить тиражирование правил при помощи
специального буфера. При нажатии клавиша F3 текущее правило  копируется  в
буфер и находится там либо до окончания работы Редактора, либо до записи в
буфер  нового  правила.  При  нажатии  клавиша  F4  правило, находящееся в
буфере,  вставляется  в  текущий  список  правил,  при  этом  пользователю
предлагается  присвоить  ему  уникальное  имя.  Это выполняется аналогично
переименованию правила.
       После выдачи  команды  показа  окон  ЕСЛИ  и  ТО  появляются  окна,
содержащие   соответственно   условие  применимости  правила  (если  текст
отсутствует, значение условия считается равным  +5)  и  действие  правила.
Подробное  описание  всех  типов  правил  содержится в документе "Комплекс
программ ЭКО версия 3.4. Описание применения" (@раздел 5@13@).
       Первоначально активным является окно ТО. Передать  управление  окну
ЕСЛИ и обратно можно при помощи клавиша F3.
       Возврат в окно ПРАВИЛА происходит при помощи клавиша Esc.
       В   процессе  ввода  правил  перед  пользователем  часто  возникает
следующая проблема. Необходимо приостановить процесс ввода правила с  тем,
чтобы  просмотреть  и/или  отредактировать  другой фрагмент модели. Однако
возврат в окно ПРАВИЛА обычным способом невозможен, если в тексте  правила
имеются  ошибки.  Для  того,  чтобы  обойти  эту  трудность, предусмотрена
команда временного выхода путем одновременного  нажатия  клавишей  Ctrl  и
Esc.  В  этом случае, информация, находящаяся в окнах ЕСЛИ и ТО помещается
не в модель, а в буфер. Таким образом, процесс редактирования модели может
быть продолжен. При повторной выдаче команды показа окон  ЕСЛИ  и  ТО  для
данного  правила соответствующий текст автоматически копируется из буфера,
если туда не копировались за это время другие правила, в противном  случае
текст правила берется из модели.
       При  вводе  правил  имеется  возможность  "блочной"  сборки  текста
условия и действия. Реализуется она следующим образом.
       По нажатию клавиша Grey + появится меню, с помощью  которого  можно
получить   список   символьных   атрибутов,   числовых   атрибутов,   имен
утверждений,  ссылок  на  утверждения  или  встроенных  функций.  Если   в
полученном  списке  при  помощи  клавиша  Enter  выбрать элемент, он будет
вставлен в ту позицию текста правила, откуда был произведен выход в меню.

       wr3.3.4.  После  перехода  к  просмотру  и  редактированию   числовых
атрибутов  (см.  п.3.3.2)  на  экране  появляется  окно ЧИСЛОВЫЕ АТРИБУТЫ,
которое и становится активным. Это окно  обеспечивает  отображение  списка
имен  числовых  атрибутов  загруженной  модели и позволяет выполнить те же
действия, что и окно СИМВОЛЬНЫЕ АТРИБУТЫ. Разница заключается в следующем:
       операндами команд являются числовые атрибуты;
       нажатие клавиша Enter приводит к выдаче команды показа  правил  для
вычисления значения текущего атрибута;
       нажатие  клавиша  F2 приводит к выдаче команды показа окна ЗНАЧЕНИЕ
ЧИСЛ.АТРИБУТА.
       После выдачи команды показа окна ЗНАЧЕНИЕ ЧИСЛ.АТРИБУТА  появляется
окно,  содержащее  информацию о граничных значениях диапазона, из которого
может получать значения  текущего  атрибута,  и  информацию  об  априорном
значении   этого  атрибута.  Граничные  значения  указываются  для  любого
атрибута обязательно.  Априорное  значение  может  отсутствовать,  в  этом
случае  соответствующее  поле  содержит пробелы. Переключение между полями
осуществляется при помощи клавишей СТРЕЛКА ВВЕРХ и СТРЕЛКА ВНИЗ. Выход  из
окна осуществляется по нажатию клавиша Esc.
       После выдачи команды показа правил для вычисления значения текущего
числового  атрибута  на экране появляется окно ПРАВИЛА. Действия системы и
пользователя  аналогичны  действиям,  описанным  в   п.   3.3.3.   Разница
заключается  в том, что возврат из окна ПРАВИЛА происходит в окно ЧИСЛОВЫЕ
АТРИБУТЫ.

       wr3.3.5. После перехода  к  просмотру  и  редактированию  предложений
сценария  (см.  п.3.3.2)  на  экране  появляется  окно  СЦЕНАРИЙ,  которое
получает управление. Это окно обеспечивает отображение списка предложений,
входящих в сценарий  консультации  данной  модели.  Работа  с  этим  окном
аналогична работе с окном ПРАВИЛА. Различие заключается в следующем:
       операндами команд являются предложения, составляющие сценарий;
       в  окне  КОММЕНТАРИЙ  отображается  текст  комментария  к  текущему
предложению;
       нажатие клавиша Esc приводит к уничтожению текущего окна и возврату
управления в меню команд;
       нажатием клавишей Ctrl и СТРЕЛКА ВВЕРХ  ,а  также  Ctrl  и  СТРЕЛКА
ВНИЗ, изменяется порядок предложений в сценарии (см. п. 3.3.3).
       Клавиши F3 и F4 для предложений сценария не используются.
       После  выдачи  команды  показа  окон  ЕСЛИ  и  ТО  появляются окна,
содержащие соответственно условие применимости предложения сценария  (если
текст  условия  отсутствует,  значение  условия считается равным плюс 5) и
действие предложения.
       Подробное описание  предложений  сценария  содержится  в  документе
"Комплекс программ ЭКО версия 3.4. Описание применения" (@раздел 5@13@).
       Первоначально  активным  является окно ТО. Передать управление окну
ЕСЛИ и обратно можно при помощи клавиша F3.
       По клавишу F2 осуществляется переход в окно СООБЩЕНИЕ.
       В  окно  СООБЩЕНИЕ   помещается   информация,   не   представляющая
правильных  арифметических  или  логических  выражений языка представления
знаний: тексты сообщений, имена файлов и т.д. В это окно помещается первый
параметр  для  действий  СООБЩЕНИЕ,  СТОП,   ПРИЕМ,   ВЫПОЛНИТЬ,   ЗАДАЧА,
ЗАГРУЗИТЬ_ТОЧКУ,  СДЕЛАТЬ_ТОЧКУ,  а  также последний параметр для действия
ВОЗВРАТ (см. "Комплекс программ ЭКО версия   3.4.   Описание   применения"  
@Раздел  5@13@). Информацию, помещаемую в окно СООБЩЕНИЕ не следует помещать
в кавычки, как это делается при описании синтаксиса предложений сценария.
      Возврат в окно СЦЕНАРИЙ производится при помощи клавиша Esc.
       Поскольку   операции   с   буфером   для  предложений  сценария  не
реализованы, временный выход в данном случае не предусмотрен.
       При вводе текста предложения сценария также может быть использована
возможность "блочной" сборки (см.п.3.3.3).

}}
66{{                          @+ п.3.5@67@   @СОДЕРЖАНИЕ@54@   @- п.3.3@65@
       
      wr3.4. Работа в режиме ведения консультации
       
       wr3.4.1. В режиме ведения консультации ОПС обеспечивают:
       - решение задач на основе знаний о конкретной  проблемной  области,
полученных от эксперта в режиме приобретения знаний;
       -  объяснение  хода  решения задачи в виде ответов на вопросы ЗАЧЕМ
задается вопрос и КАК получен результат;
       -  интерфейс  с  со  средством  XHT  для  реализации  объяснений  в
графической форме;
       - трассировку хода решения задачи;
       -  средства  исследования  поведение  модели  путем  наблюдения  за
изменением результата в зависимости от изменения  относительно  небольшого
числа исходных данных (ЧТО ЕСЛИ ?).
       В режиме консультации ОПС обеспечивает также ряд сервисных функций:
механизм контрольных точек, протоколирование хода консультации.
       Все  эти функции реализует Консультатор, который использует модели,
полученные с помощью Редактора. Эти модели хранятся в файлах с расширением
EXP (см. @п 3.3.2@65@).
       Вызов Консультатора выполняется  из  меню  команд  Редактора  путем
выдачи команды ВЫПОЛНИТЬ.
       На  экране  появятся окна МОДЕЛИ и КОММЕНТАРИЙ , а в верхней строке
экрана - меню команд.
       В окне МОДЕЛИ  в  ходе  консультации  отображаются  имена  моделей,
загруженных  в  текущий  момент  времени  в оперативную память, причем имя
активной модели подсвечивается. В окне КОММЕНТАРИЙ будет содержаться текст
комментария к активной модели.
       Отметим, что окно КОММЕНТАРИЙ  в  отличие  от  режима  приобретения
знаний позволяет только просматривать тексты комментария к моделям, целям,
правилам и т.д.

       wr3.4.2.   После   того  как  произошло  обращение  к  Консультатору,
управление получает меню команд. Меню команд позволяет:
      войти в консультацию (КОНСУЛЬТАЦИЯ);
      выполнить сброс полученных результатов (СБРОС);
      установить режим трассировки (ТРАССА);
      определить устройство для вывода протокола (ПРОТОКОЛ);
      выполнить операции с контрольной точкой (КОНТР.ТОЧКА);
      просмотреть состояние загруженных моделей (ПРОСМОТР);
      закончить работу (ВЫХОД).

       Команда  КОНСУЛЬТАЦИЯ  позволяет  начать  консультацию  ,или,  если
имеется прерванная консультация, продолжить ее.
       Команда  СБРОС  позволяет  выполнить один из двух возможных режимов
сброса в соответствии со значением аргумента.  Возможен  сброс  либо  всех
значений,  либо  только выведенных значений (исключая те, которые получены
при  помощи  ответов  на  вопросы,  либо  явно  заданы  пользователем  при
просмотре целей).
       Команда  ТРАССА  позволяет  в  зависимости  от  значения  аргумента
включить, или выключить трассировку работы решателя.
       Команда  ПРОТОКОЛ  позволяет  определить  устройство   для   вывода
протокола  (файл,устройство  печати).  В  протокол  заносятся все диалоги,
выполняемые в окнах КОНСУЛЬТАЦИЯ, ТРАССА, ОБЪЯСНЕНИЕ. Для удобства анализа
протокола сообщения трассировщика отмечаются в протоколе символом  "!",  а
тексты объяснений - символом "?". Для отключения записи в протокол следует
указать устройство с "пустым" именем, т.е. именем, не содержащим символов.
В начале работы запись в протокол всегда отключена.
       Команда КОНТР.ТОЧКА позволяет либо сохранить состояние консультации
в  некоторый  момент времени в виде так называемой контрольной точки, либо
продолжить консультацию с указанного места путем загрузки  соответствующей
контрольной  точки.  Для одной ЭС может быть создано несколько контрольных
точек. При создании контрольной  точки  пользователь  должен  указать  имя
файла,  в котором будет храниться вся необходимая информация. При загрузке
контрольной точки требуется также указать имя соответствующего файла.
      Просмотр таблицы целей описан в п. 3.4.6.
      Просмотр списка правил  п. 3.4.7.
      Просмотр списка предложений сценария описан в п. 3.4.8.
      Просмотр списка загруженных моделей описан в п. 3.4.9.
      После  выдачи  команды ВЫХОД Загрузчик вновь передаст управление
 Редактору.

       wr3.4.3. В  режиме  решения  задачи  система  ведет  с  пользователем
диалог,  в  процессе которого она пытается получить значения коэффициентов
определенности для утверждений и значений для числовых атрибутов,  которые
потребуются  для  получения  решения.  При  этом  система  может  выдавать
сообщения,  определяемые  сценарием  консультации,  и  задавать  три  типа
вопросов:
      простой вопрос;
      сложный альтернативный вопрос;
      сложный дистрибутивный вопрос.
       Для  того,  чтобы  помочь  пользователю  определить тип задаваемого
вопроса, в поле сообщений выводится соответствующее сообщение.
       Простой вопрос задается для получения значения  числового  атрибута
или утверждения. Общий вид простого вопроса представлен на рис.4.

            Вид экрана в момент задания простого вопроса

           ┌────────────────────────────────────────────┐
           ├────────────────────────────────────────────┤
           │.                                           │
           │.                                           │
           │.                                           │
           │.                                           │
           │.                                           │
           │<ТЕКСТ ВОПРОСА>                             │
           │=>                                          │
           ├────────────────────────────────────────────┤
           │ Введите число в диапазоне от ... до ...    │
           ├────────────────────────────────────────────┤
           └────────────────────────────────────────────┘

                            Рис.4

       Для  утверждения  введенное  число  интерпретируется  как  значение
коэффициента определенности. Напомним, что коэффициент определенности  это
вещественное число в диапазоне от минус 5.0 до плюс 5.0.
       Сложные  вопросы задаются для получения распределения коэффициентов
определенности  значений  символьного  атрибута.   Альтернативный   вопрос
используется  для  таких  символьных  атрибутов, которые могут принимать в
текущей ситуации  только  одно  из  множества  своих  возможных  значений.
Например,   символьный   атрибут   "пол",  имеющий  значения  "мужской"  и
"женский". Для символьных атрибутов, которые  могут  принимать  в  текущей
ситуации  одновременно  несколько  значений,  используются  дистрибутивные
вопросы.  Например,  атрибут  "знание_языков"  может  одновременно   иметь
значения:   "русский"   (с   определенностью   5.0)   и   "английский"  (с
определенностью 3.0).
       Состояние экрана в момент задания сложного альтернативного  вопроса
представлено на рис.5.

   Вид экрана в момент задания сложного альтернативного вопроса

          ┌───────────────────────────────────────┐
          ├───────────────────────────────────────┤
          │                                       │
          │<ТЕКСТ ВОПРОСА>                        │
          │=>┌───────────────────────────────────┐│
          │  │ <ЗНАЧЕНИЕ 1>                      ││
          │  │ <ЗНАЧЕНИЕ 2>                      ││
          │  │ .                                 ││
          │  │ .                                 ││
          │  └───────────────────────────────────┘│
          │                                       │
          ├───────────────────────────────────────┤
          │ Выберите нужный вариант ответа        │
          ├───────────────────────────────────────┤
          └───────────────────────────────────────┘

                         Рис.5

       Здесь  перечислены  все  возможные  значения  символьного атрибута.
Каждое значение представлено развернутым именем (если оно есть) или  своим
именем.
       Задача  пользователя - выбрать одно из значений (при помощи клавиша
Enter).
       В результате  утверждению,  соответствующему  выбранному  значению,
присваивается значение плюс 5.0, а всем остальным - значение минус 5.0.
       Сложный   дистрибутивный   вопрос   также  содержит  перечень  всех
возможных значений  символьного  атрибута  (для  которых  еще  не  выведен
коэффициент  определенности),  однако в поле сообщений высвечивается текст
"Введите распределение коэффициентов определенности".
       При  помощи   бокса,   содержащего   развернутые   имена   значений
соответствующего символьного атрибута, пользователь указывает коэффициенты
определенности для нужных значений.
       Для ввода коэффициента определенности значения символьного атрибута
необходимо:
      нажать клавиш Grey +;
      ввести число в диапазоне от минус 5.00 до плюс 5.00;
      нажать клавиш Enter.
       После  того  как  пользователь ввел коэффициенты определенности для
всех нужных значений символьного атрибута, ему  необходимо  нажать  клавиш
Enter.
       Коэффициенты  определенности  для  неуказанных  значений  считаются
по-прежнему неизвестными и могут в дальнейшем выводиться  любым  возможным
способом,  кроме  задания  вопроса.  На  рис.6  приведен  пример ответа на
дистрибутивный вопрос.
       
       Вид экрана при ответе на сложный дистрибутивный вопрос

       ┌───────────────────────────────────────────────────┐
       ├───────────────────────────────────────────────────┤
       │                                                   │
       │ КАКОВ УРОВЕНЬ ПОДГОТОВКИ СПЕЦИАЛИСТА ?            │
       │                                                   │
       │=>┌───────────────────────────────────┐            │
       │  │  ВЫСОКИЙ              1           │            │
       │  │  СРЕДНИЙ              5           │            │
       │  │  НИЗКИЙ              -2           │            │
       │  └───────────────────────────────────┘            │
       │                                                   │
       ├───────────────────────────────────────────────────┤
       │Введите распределение коэффициентов определенности │
       ├───────────────────────────────────────────────────┤
       └───────────────────────────────────────────────────┘

                             Рис. 6

       Для упрощения ответов на простой и  сложный  дистрибутивный  вопрос
могут быть использованы лингвистические шкалы (см. "Комплекс программ  ЭКО
версия 3.4. Описание  применения" @Раздел 5@13@), позволяющие давать ответ не
в числовом, а в символьном виде.
       Кроме  того,  вопросы  могут  задаваться  в  графическом  виде (см.
"Комплекс программ ЭКО версия 3.4. @Стандартные интерфейсы.@53@   Руководство
программиста").
       Пользователь, поддерживающий диалог с  системой  в  режиме  решения
задачи, вместо ответа на вопрос может:
       запросить технологическую помощь (F1);
       ответить НЕ ЗНАЮ (F2);
       потребовать повторить последний вопрос (F3);
       передать управление меню команд (F4);
       спросить, ЗАЧЕМ задан вопрос (F5);
       перейти в режим просмотра (F6);
       запросить функциональную помощь (F9 и F10);
       завершить консультацию (Esc).
      
       Технологическая  помощь  состоит  в  том, что пользователь получает
доступ к документации на комплекс ЭКО, подготовленной в  виде  гипертекста
(см. @п.3.1.3@63@).
       Если  пользователь  отвечает НЕ ЗНАЮ, соответствующая цель получает
специальное значение в соответствии с табл.  4.  Решатель  в  этом  случае
будет пытаться вывести значение этой цели другим способом.
      
                                           Таблица 4

                     Специальные значения целей

 ┌──────────────────────────┬───────────────────────────────────┐
 │       Значение цели      │     Способ   интерпретации        │
 ├──────────────────────────┼───────────────────────────────────┤
 │                          │                                   │
 │       64001              │  Значение цели еще не выводилось  │
 │       64002              │  Значение цели не удалось вывести │
 │       64003              │  Значение цели не удалось вывести │
 │                          │  путем задания вопроса            │
 └──────────────────────────┴───────────────────────────────────┘

       Если  пользователь спрашивает, зачем задан вопрос (команда ЗАЧЕМ?),
система переходит в поддиалог объяснения, который описан в п. 3.4.5.
       Для  восстановления  хода  консультации   пользователю   необходимо
перейти  в  режим просмотра. Просмотр хода консультации осуществляется при
помощи клавишей СТРЕЛКА ВВЕРХ, СТРЕЛКА ВНИЗ, PgUp,  PgDn.  Кроме  того,  в
этом  режиме пользователь может при помощи клавиша Tab передать управление
окну ТРАССА (если режим трассировки  установлен)  и  осуществить  просмотр
трассы,  используя  те  же  клавиши.  Возврат  из окна ТРАССА производится
нажатием клавиша Tab. Описание средств трассировки содержится в п.  3.4.4.
Для  того,  чтобы  продолжить  нормальный  ход  консультации, пользователь
должен выйти из режима просмотра, используя клавиш F6.
       Функциональная  помощь  предназначена  для  того,  чтобы  в  случае
необходимости   помочь  пользователю  в  работе  с  конкретной  экспертной
системой и требует разработки специальных средств. Консультатор  реализует
следующий интерфейс со средствами функциональной помощи:
       по  нажатию  клавиша  F10  вызывается программа с именем EHELP.EXE,
которая может находится либо в текущем директории, либо в директории, куда
установлен путь;
       контекст  вызова   определяется   параметром,   передаваемым   этой
программе;
       параметр представляет собой имя утверждения или числового атрибута,
на которое указывает курсор в момент запроса функциональной помощи.
       Для оказания функциональной помощи может быть задействован  кла-
  виш F9 (см. @Раздел 5@13@ документа "Комплекс  программ  ЭКО  версия  3.4.
  Описание применения").
       В   составе   стандартных  интерфейсов  имеются  средства  создания
функциональной помощи в графическом  виде  (см.  "Комплекс  программ   ЭКО
версия 3.4.Стандартные интерфейсы. Руководство программиста" @Раздел 5@95@).

       wr3.4.4. Решение задачи с использованием трассировки применяется  для
отладки  модели, выполняемой инженером по знаниям. Трассировка также может
потребоваться пользователю  в  процессе  консультации  для  уяснения  хода
решения  задачи.  При  решении  задачи  с  использованием трассировки (см.
п.3.4.2) на  экране  появляется  окно  ТРАССА,  куда  выводятся  сообщения
трассировщика , отслеживающего ход решения.
       Трассировщик формирует сообщения четырех типов:
         относящиеся к выполнению подмоделей;
         относящиеся к выполнению предложений сценария;
         относящиеся к рассмотрению целей;
         относящиеся к применению правил вывода.
       Сообщения,  относящиеся  к  выполнению  подмоделей,  имеют  форматы
следующих типов:

         1) *************** ВХОД В ПОДМОДЕЛЬ <ИМЯ МОДЕЛИ>

         2) *************** ЗАВЕРШЕНИЕ ПОДМОДЕЛИ <ИМЯ МОДЕЛИ>
            (<СООБЩЕНИЕ О СПОСОБЕ ЗАВЕРШЕНИЯ>)

       Сообщение первого типа выдается в тех случаях, когда в соответствии
со сценарием текущей модели Консультатор загружает некоторую  подмодель  и
переходит к ее выполнению.
       Сообщение   второго   типа   выдается   тогда,   когда   выполнение
подгруженной  модели  закончено  и  Консультатор  возвращается  к  текущей
модели.  Если  модель  была  успешно  загружена  и выполнена, трассировщик
выдаст сообщение "НОРМАЛЬНОЕ ЗАВЕРШЕНИЕ". Если модель не удалось загрузить
(недостаточный объем доступной оперативной памяти, ошибка ввода-вывода при
обращении к диску) или выполнить (модель  не  тестирована),  будет  выдано
соответствующее сообщение о неудачном завершении.
       Сообщения,  относящиеся  к  выполнению предложений, имеют следующий
формат:

         1) ВЫПОЛНЯЕТСЯ ПРЕДЛОЖЕНИЕ <НОМЕР  ПРЕДЛОЖЕНИЯ> СЦЕНАРИЯ
            <КОММЕНТАРИЙ К ПРЕДЛОЖЕНИЮ>

         2) УСЛОВИЕ ДЛЯ ПРЕДЛОЖЕНИЯ  <НОМЕР  ПРЕДЛОЖЕНИЯ>:
            <ЗНАЧЕНИЕ ИСТИННОСТИ УСЛОВИЯ ПРИМЕНИМОСТИ>

       Эти сообщения появляются каждый раз, когда Консультатор переходит к
рассмотрению очередного предложения сценария.
       В случае, когда Консультатор приступает  к  рассмотрению  некоторой
цели, в трассу поступает сообщение вида:

      ВЫСТАВЛЕНА ЦЕЛЬ '<ЗАПОЛНЕННЫЙ ШАБЛОН УТВЕРЖДЕНИЯ>'
      ЦЕЛЬ '<ЗАПОЛНЕННЫЙ ШАБЛОН УТВЕРЖДЕНИЯ>' РАВНА
      <КОЭФФИЦИЕНТ ОПРЕДЕЛЕННОСТИ УТВЕРЖДЕНИЯ>

      если текущей целью является утверждение, или

      ВЫСТАВЛЕНА ЦЕЛЬ '<РАЗВЕРНУТОЕ ИМЯ АТРИБУТА>'
       
      ЦЕЛЬ '<РАЗВЕРНУТОЕ ИМЯ АТРИБУТА>' РАВНА <ЧИСЛОВОЕ ЗНАЧЕНИЕ>

      если текущей целью является числовой атрибут.
       
       В  случае,  когда Консультатор приступает к рассмотрению некоторого
правила, формируется сообщение вида:

      РАССМАТРИВАЕТСЯ ПРАВИЛО <ИМЯ ПРАВИЛА> <КОММЕНТАРИЙ>

       В  случае,  когда  Консультатор  в  состоянии   вычислить   условия
применимости правила, формируется сообщение вида:

      УСЛОВИЕ ПРИМЕНИМОСТИ ПРАВИЛА <ИМЯ ПРАВИЛА> :
      <ЗНАЧЕНИЕ ИСТИННОСТИ УСЛОВИЯ ПРИМЕНИМОСТИ>

       Сообщение,   информирующее  пользователя  о  результате  выполнения
правила, имеет вид:

      РЕЗУЛЬТАТ ВЫПОЛНЕНИЯ ДЕЙСТВИЯ ДЛЯ ПРАВИЛА <ИМЯ ПРАВИЛА> :
      <ЧИСЛОВОЕ ЗНАЧЕНИЕ>

       Если целью правила является некоторое  утверждение,  то  сообщаемое
числовое    значение    представляет    собой    вычисленный   коэффициент
определенности этого утверждения. Если  целью  правила  является  числовой
атрибут, то в сообщении указывается найденное значение этого атрибута.

       wr3.4.5.  Консультатор  обеспечивает  объяснения  в  виде  ответов на
вопросы типа ЗАЧЕМ задан вопрос и КАК получен результат. Информация о том,
как получен некоторый результат, может быть предоставлена пользователю при
просмотре таблицы целей, описанной в п. 3.4.6.
       Информация о причине, по которой задается  вопрос,  предоставляется
пользователю в поддиалоге, выполняемом через окно ОБЬЯСНЕНИЕ. Для перехода
в  это  окно  пользователь  должен  в  тот  момент, когда ему предлагается
ответить на некоторый вопрос, выдать команду ЗАЧЕМ? (см. п. 3.4.3).
       В ответ система выдает объясняющее сообщение следующего вида:
      
      ВЫВОДИТСЯ ЦЕЛЬ '<ИМЯ>', ЗНАЧЕНИЕ КОТОРОЙ БУДЕТ ИСПОЛЬЗОВАНО
      ПРАВИЛОМ <ИМЯ ПРАВИЛА>
      ПРАВИЛО <ИМЯ ПРАВИЛА> ПРИМЕНЯЕТСЯ ДЛЯ ВЫЧИСЛЕНИЯ ЦЕЛИ '<ИМЯ>'
      <КОММЕНТАРИЙ К ПРАВИЛУ>

       В качестве имени выводится: заполненный  шаблон  утверждения,  если
целью  является  утверждение,  или  развернутое  имя  атрибута, если целью
является числовой атрибут.
       Если пользователь запрашивает дальнейшие  объяснения  (клавиш  F5),
система снова выдает объясняющее сообщение указанного вида. Так происходит
до  тех  пор,  пока  процесс объяснений не достигает исходной цели. В этом
случае выдается сообщение вида:

      ЦЕЛЬ  '<ИМЯ>' ЯВЛЯЕТСЯ ИСХОДНОЙ (МОДЕЛЬ <ИМЯ МОДЕЛИ>)

       Если  упоминаемая  в   сообщении   модель   является   единственной
загруженной  в  данный  момент  моделью,  то  объяснение  заканчивается, и
система повторяет свой  вопрос.  В  противном  случае  пользователь  может
запросить дальнейшие объяснения, при этом будут выдаваться сообщения вида:

      МОДЕЛЬ <ИМЯ МОДЕЛИ 1> ВЫЗВАНА ИЗ МОДЕЛИ <ИМЯ МОДЕЛИ 2>
      <КОММЕНТАРИЙ К ПРЕДЛОЖЕНИЮ СЦЕНАРИЯ МОДЕЛИ 2>

       Таким  образом  описывается  порядок  вызова  подмоделей,  причем в
качестве  пояснений  выдаются  тексты  комментариев  к  тем   предложениям
сценария, из которых осуществляется вызов.
      Пример:

      КАКАЯ ПОГОДА ?
    =>ЗАЧЕМ ?
      ВЫЧИСЛЯЕТСЯ ЦЕЛЬ 'ПОГОДА ХОРОШАЯ',
      ЗНАЧЕНИЕ КОТОРОЙ БУДЕТ ИСПОЛЬЗОВАНО ПРАВИЛОМ L1
      ПРАВИЛО L1 ПРИМЕНЯЕТСЯ ДЛЯ ВЫЧИСЛЕНИЯ ЦЕЛИ
      'ОТДЫХ ЗА ГОРОДОМ'
       В  случае  хорошей  погоды  целесообразно  провести выходные дни на
свежем воздухе, за городом
    =>ЗАЧЕМ ?
      ЦЕЛЬ 'ОТДЫХ ЗА ГОРОДОМ' ЯВЛЯЕТСЯ ИСХОДНОЙ (модель WEEK_END)
    =>ЗАЧЕМ ?
      МОДЕЛЬ WEEK_END ВЫЗВАНА ИЗ МОДЕЛИ HEALTH
       Правильная организация еженедельного  отдыха  является  необходимым
условием поддержания хорошего состояния здоровья

       Весь   ход   поддиалога  объяснения  может  быть  сделан  доступным
пользователю в режиме просмотра. Переход в этот режим,  выход  из  него  и
работа  в  режиме  просмотра  выполняются аналогично режиму просмотра хода
консультации ( см. п. 3.4.3.).
       В любой момент пользователь может  закончить  поддиалог  объяснения
при помощи клавиша Esc.

       wr3.4.6.  После  команды  просмотра состояния целей (см. п. 3.4.2) на
экране появляется окно ЦЕЛИ, которое и получает  управление.  Это  окно  в
виде  таблицы  отображает  текущее  состояние  всех целей активной модели.
Информация  о  каждой  цели  помещается  в  одной  строке.  Таблица  имеет
следующие столбцы:

      ИМЯ ЦЕЛИ - содержит имя цели;
      ТИП      - содержит тип цели (утверждение или числовой атрибут);
      ЗНАЧЕНИЕ - содержит значение цели (если оно есть);
      КАК?     - идентифицирует источник значения цели (если оно есть)
                 или состояние цели (активна, не выводилась, не вы-
                 ведена по вопросу, не вывелась).

       При работе с окном ЦЕЛИ, пользователь может осуществить:
      перемещение курсора по строкам таблицы;
      модификацию значений целей;
      доступ к информации об источнике значения (КАК ?);
      вызов средств графического объяснения;
      возврат в меню команд.
       Перемещение  курсора  по  списку целей выполняется обычным образом,
т.е. при помощи клавишей СТРЕЛКА ВВЕРХ и СТРЕЛКА ВНИЗ.  При  этом  в  окне
КОММЕНТАРИЙ  синхронно отображается текст развернутого имени текущей цели.
Может использоваться также механизм инкрементного поиска (см. @п.3.3.2@65@).
       Если пользователь хочет модифицировать  значение  цели,  он  должен
воспользоваться  клавишем  Grey  +  .  При  этом в поле сообщений появится
информация о диапазоне возможных значений цели и  значении  по  умолчанию.
Затем  пользователь может ввести требуемое значение и нажать Enter или при
помощи клавиша Esc отказаться от модификации.
       Эта возможность позволяет экспериментировать  с  моделью  следующим
образом.  После  того, как получено решение некоторой задачи, пользователь
может войти в таблицу целей и изменить ответ на  некоторый  вопрос  (путем
корректировки связанных с ним целей). Затем выполнить сброс вывода и вновь
начать  консультацию  (при  этом  все  его  ответы  на  остальные  вопросы
сохраняются). В  результате  пользователь  получает  возможность  получить
ответ на вопрос: "ЧТО изменится ЕСЛИ по другому ответить на вопрос?".
       Возможным  источником  значения  (поле  КАК?)  может  быть правило,
предложение  сценария,  пользователь.  Кроме  того,  значение  может  быть
получено  по  умолчанию  как  побочный  результат  применения байесовского
правила, подцелью которого является данная цель.
       В  первых  двух  случаях  пользователь  может  получить  доступ   к
информации  об  источнике значения (см. пп.3.4.7,3.4.8) при помощи клавиша
Enter.
       При помощи клавиша F2  может  быть  вызвано  средство  графического
объяснения, позволяющее получить графическое изображение активной модели с
использованием  различных цветов для индикации текущего состояния процесса
вывода. Детальное описание  средств,  реализующих  графическое  объяснение
содержится в документе "Комплекс программ ЭКО версия 3.4. Средство анализа Базы
знаний XHT. Руководство программиста ".
       Возврат в меню команд из окна ЦЕЛИ происходит путем нажатия клавиша
Esc .

       wr3.4.7. После выдачи команды просмотра  правил  (см.  п.  3.4.2)  на
экране  появляется  окно ПРАВИЛА. Это окно обеспечивает отображение списка
имен правил и позволяет выполнить следующие действия:
      перемещение курсора по списку правил;
      отображение списка подцелей правила;
      инкрементный поиск правила;
      вызов средств графического объяснения;
      возврат в меню команд.
       Перемещение курсора по списку целей  выполняется  обычным  образом,
т.е.  при  помощи  клавишей  СТРЕЛКА ВВЕРХ и СТРЕЛКА ВНИЗ. При этом в окне
КОММЕНТАРИЙ синхронно отображается текст комментария к правилам.
       Выбор правила в списке, осуществляемый по  нажатию  клавиша  Enter,
приводит  к  возникновению  окна  ПОДЦЕЛИ и передаче туда управления. Окно
ПОДЦЕЛИ отображает список подцелей правила,  которые  можно  просматривать
обычным  образом.  Кроме  того, при помощи клавиша Enter для любой подцели
можно осуществить переход в  окно  ЦЕЛИ.  Курсор  при  этом  автоматически
установится на соответствующую строку.
       Вызов  средств  графического  объяснения  аналогичен  описанному  в
п.3.4.6.
       Возврат в окно ПРАВИЛА происходит по нажатию Esc.
       
       wr3.4.8. Просмотр предложений сценария полностью аналогичен просмотру
правил (п.3.4.7.).
       
       wr3.4.9. После выдачи команды просмотра загруженных моделей  (см.  п.
3.4.2)   управление  передается  в  окно  МОДЕЛИ.  Это  окно  обеспечивает
отображение  списка  имен  загруженных  моделей  и   позволяет   выполнить
следующие действия:
      перемещение курсора по списку моделей;
      активизация модели;
      инкрементный поиск имени модели;
      возврат в меню команд.
      
       Перемещение  курсора  по  списку целей выполняется обычным образом,
т.е. при помощи клавишей СТРЕЛКА ВВЕРХ и СТРЕЛКА ВНИЗ.  При  этом  в  окне
КОММЕНТАРИЙ синхронно отображается текст комментария к моделям.
       Активизация  модели осуществляется при помощи клавиша Enter. Данная
возможность  позволяет  анализировать  и  модифицировать  состояние  любой
модели, загруженной в данный момент в оперативную память. Заметим, что при
входе   в   консультацию,   активной  автоматически  становится  последняя
загруженная модель.
       Возврат в окно ПРАВИЛА происходит обычным образом.
       
       wr3.4.10. В процессе работы Консультатор использует  три  специальных
значения   для  целей,  которые  интерпретируются  отличным  от  остальных
значений образом. Соответствующие способы их интерпретации см. в табл. 4.
       
      wr3.4.11. Взаимодействие с внешними программами имеет два аспекта:
      - вызов Консультатора из внешней программы;
      - вызов внешней программы из Консультатора (экспертной системы).

      wr3.4.12. Вызов Консультатора из внешней программы выполняется по
 команде:

                   EKOCN <Имя модели> [/S]

      опция  /S предписывает консультатору сразу же после загрузки пе-
 редать управление меню команд (см.п.3.4.2). При отсутствии  этой  оп-
 ции,  Консультатор  приступает к решению задачи немедленно после заг-
 рузки путем автоматической выдачи команды КОНСУЛЬТАЦИЯ (см. п.3.4.2).
 Описанный вызов обычно используется для  запуска  готовой  экспертной
 системы.
       
       wr3.4.13. Вызов внешних программ может  производиться  из  правил, 
 предложений сценария, а также в ответ на запрос пользователя о  полу-
 чении помощи. Соответствующие способы вызова описываются в Разделе 5 
 документа "Комплекс программ ЭКО версия 3.4. Описание применения".

       wr3.4.14.   Для   решения   задачи   в  пакетном  режиме  следует
использовать  П-Консультатор.  Обычно  эта   возможность   полезна,   если
требуется   использовать   экспертную   систему  как  подзадачу  в  пакете
прикладных программ. (например, см. @Раздел 6@96@ документа "Комплекс  программ
ЭКО версия 3.4. Стандартные интерфейсы. Руководство программиста").Соотве-
тствующая команда операционной системы:

                   EKORN <Имя модели>

      П-Консультатор отличается от Консультатора следующим:
      -  реализуются  только  функции решения задач и взаимодействия с
 внешними программами;
      - для работы требуется в два раза меньше оперативной памяти;
      - повышенная скорость вывода;
      - весь обмен информацией производится через внешние  файлы  (при
 помощи предложений сценария ПРИЕМ, ВОЗВРАТ, СООБЩЕНИЕ);
      - если при выводе будет сделана попытка применить правило-вопрос
 (обращенный  к  пользователю),  П-Консультатор сам ответит на него НЕ
 ЗНАЮ (см. п.3.4.3).

}}
67{{                                       @СОДЕРЖАНИЕ@54@   @- п.3.4@66@
       
      wr3.5. Работа с демонстрационными примерами
       
       wr3.5.1. Для того, чтобы помочь пользователю  быстро  ознакомиться  с
основными возможностями Редактора и Консультатора, а также освоить технику
работы в обоих режимах работы, в состав ОПС включен специальный компонент,
который  называется  Демонстратор.  Он  имитирует  работу  пользователя за
терминалом,  используя  информацию,  содержащуюся  в  файлах,   содержащих
команды  Демонстратора. Такие файлы называются демонстрационными примерами
и имеют расширение ERB.

       Пользователь может управлять работой  Демонстратора  с  клавиатуры,
для чего предусмотрены следующие команды:

       A(a)   - переключение режимов ручной/автоматический, где
                ручной         - после вывода на экран сообщения
                                 Демонстратор ждет нажатия любого
                                 клавиша;
                автоматический - после вывода на экран сообщения
                                 Демонстратор продолжает работу после
                                 задержки;
       Gray + - увеличение скорости демонстрации (сокращение задержки);
       Gray - - замедление демонстрации (увеличение задержки);
       Space  - после первого нажатия - остановить демонстрацию,
                после второго - продолжить;
       Esc -    отключить Демонстратор.

       wr3.5.2. В составе ОПС имеется два демонстрационных примера DEMO1.ERB
и DEMO2.ERB.
       Пример   DEMO1.ERB  показывает  процесс  создания  демонстрационной
экспертной системы EXAMPLE оценки  ответа  студента  на  экзамене.  Пример
запускается по команде операционной системы:

                               DEMO1

       Пример  DEMO2.ERB демонстрирует технику ввода новых знаний в модель
EXAMPLE и некоторые возможности блока ведения консультации, не  показанные
в  примере  DEMO1.ERB.  Пример  DEMO2.ERB  может  быть  запущен лишь в том
случае, если в текущем директории  имеется  файл  EXAMPLE.EXP,  полученный
после   успешного   завершения  примера  DEMO1.ERB.  Для  запуска  примера
DEMO2.ERB необходимо выдать команду операционной системы:
                               DEMO2
}}

50{{
                        mwl                     
                        mwl    ДОКУМЕНТАЦИЯ     ▒▒
                        mwl НА ВСПОМОГАТЕЛЬНЫЕ  ▒▒
                        mwl СРЕДСТВА КОМПЛЕКСА  ▒▒
                        mwl                     ▒▒
                          ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

        @<-@22@  Документация на комплекс программ системы ЭКО
                 (описание применения)
        @<-@54@  Документация на основные программные средства (ОПС)

                             weСОДЕРЖАНИЕ:

        @*@51@   Электронная книга ELK
        @**@52@  Средство анализа Базы знаний XHT
        @***@53@ Стандартные интерфейсы

}}
51{{
                  mwl                             
                  mwl    ЭЛЕКТРОННАЯ КНИГА ELK    ▒▒
                  mwl                             ▒▒
                   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

                               АННОТАЦИЯ

       Настоящий     документ    является    руководством    программиста,
использующего программное  средство  ELK  (Электронная  книга)  ,  которое
входит в состав комплекса программ ЭКО. В документе дается полное описание
средства ELK, включая процедуры развертывания и технологию использования.
       При    эксплуатации    средства    ELK   необходимо   дополнительно
руководствоваться  сведениями,  приведенными  в следующих документах:
       (@<-@22@) "Комплекс программ ЭКО версия 3.4. Описание применения";
       (@<-@54@) "Комплекс программ ЭКО версия 3.4. Основные программные 
средства. Руководство программиста";
       (@<-@52@) "Комплекс программ ЭКО версия 3.4. Средство анализа Базы
знаний XHT. Руководство программиста";
       (@<-@53@) "Комплекс программ ЭКО версия 3.4. Стандартные интерфейсы.
Руководство программиста".

                             weСОДЕРЖАНИЕ:

     @1.@68@ Назначение
     @2.@69@ Условия применения
     @3.@70@ Состав средства ELK
     4. Технология использования
     @4.1.@71@ Общие сведения
     @4.2.@72@ Подготовка к работе
     @4.3.@73@ Получение прототипа гипертекста
     @4.4.@74@ Компиляция прототипа гипертекста
     @4.5.@75@ Работа с гипертекстом
     @5.@76@ Дополнительные возможности

}}
68{{                           @+ п.2@69@   @СОДЕРЖАНИЕ@51@

                       wr1. НАЗНАЧЕНИЕ

       wr1.1.  Программное  средство  ELK  предназначено  для подготовки
гипертекстов.
       Гипертекст  представляет  собой  совокупность  программ  и  данных,
позволяющую оптимизировать работу с текстовой и графической информацией.
       С   технической  точки  зрения  эта  работа  состоит  из  следующих
действий: ввод, чтение, редактирование и поиск  информации.  Что  касается
первых  трех  действий,  то современные редактирующие программные средства
позволяют осуществлять их достаточно эффективно,  чего  нельзя  сказать  о
четвертом.  Доступ  к  информации  в  них производится, как правило, путем
последовательного просмотра. Организация информации  в  виде  гипертекстов
преследует  цель  дать  пользователю  поисковые  процедуры, обеспечивающие
прямой доступ к нужной информации.

       wr1.2.  Программное  средство   ELK   позволяет   структурировать
текстовую   информацию,   связывать   полученные   структурные  единицы  в
конструкцию, отражающую семантику текста и реализовать на основе имеющихся
связей процедуры прямого доступа.

       wr1.3.  В  комплексе  программ  ЭКО  средство  ELK  имеет   следующие
применения:
       при помощи ELK создана Помощь, содержащая всю информацию, имеющуюся
в  документации  на  комплекс,  и  доступная пользователю в любой момент в
обоих режимах работы ОПС;
       при  помощи  ELK  пользователь  может   разрабатывать   собственные
справочные  средства  для  оказания помощи в процессе работы с экспертными
системами;
       совместно используя средства ELK и XHT, пользователь может получать
отчеты по Базе знаний в виде гипертекстов.
}}
69{{                              @+ п.3@70@   @СОДЕРЖАНИЕ@51@   @- п.1@68@

                     wr2. УСЛОВИЯ ПРИМЕНЕНИЯ


       wr2.1.  Средство ELK функционирует в составе программного обеспечения
персональных  электронных  вычислительных  машин  (ПЭВМ)  типа   ЕС   1841
Е11.700.012   и  последующих  моделей  или  ПЭВМ  типа  РС/ХТ  ,  РС/AТ  с
оперативной памятью не  менее  512  Кбайт,  цветным  графическим  дисплеем
(CGA,EGA,VGA),  накопителем на жестком магнитном диске емкостью не менее 5
Мбайт и накопителем на гибких магнитных дисках емкостью 360 Кбайт в  среде
операционной  системы АЛЬФА ДОС 16 или совместимой с ней МS DOS версии 3.0
и выше.

       wr2.2. Средство ELK используется в составе комплекса ЭКО.

}}
70{{                           @+ п.4.1@71@   @СОДЕРЖАНИЕ@51@   @- п.2@69@

                   wr3. СОСТАВ СРЕДСТВА ELK


       wr3.1. Программное средство ELK включает два модуля, размещен-
      ные на 7 дискете, входящей в комплект поставки комплекса ЭКО: 

     -  компилятор прототипа        - HTCMP.EXE;
     -  процессор гипертекста       - HT.EXE.

       Компилятор прототипа HTCMP.EXE предназначен для получения данных  о
структуре  текстового  файла,  подготовленного  специальным  образом  (см.
 @п.4.3@73@), и называемого прототипом гипертекста.
       Процессор гипертекста HT.EXE позволяет  работать  с  подготовленным
текстовым файлом как с гипертекстом. Соответствующие сведения приводятся в
 @п.4.5@75@.

}}
71{{                            @+ п.4.2@72@   @СОДЕРЖАНИЕ@51@   @- п.3@70@

                wr4. ТЕХНОЛОГИЯ ИСПОЛЬЗОВАНИЯ

      wr4.1 Общие сведения

       wr4.1.1.  До  недавнего  времени  существовали  только  такие способы
представления   текстовой   информации,   которые   были   рассчитаны   на
последовательное  восприятие  (книга, текстовый файл, устная речь и т.д.).
Все эти способы, будучи единственно доступными с точки зрения  реализации,
однако не вполне соответствовали естественной для человека логике работы с
текстом.  В  общем  случае,  когда  величина текста достаточно велика, эта
работа носит "кусочно-непрерывный" характер. Это означает, что в  процессе
последовательного  восприятия  одного  фрагмента  текста  часто  возникает
потребность перейти к другому, связанному с данным. Если искомый  фрагмент
текстуально  удален на значительное расстояние, то время поиска может быть
весьма велико.
       Для того, чтобы преодолеть  указанную  трудность,  были  предложены
средства  нелинейного  представления  текстовой  информации.  Эти средства
получили название систем гипертекстов. К таким средствам относится и ELK.

       wr4.1.2. Программное средство ELK позволяет структурировать текстовую
информацию,  связывать  полученные  структурные  единицы  в   конструкцию,
отражающую  семантику  текста  и  реализовать  на  основе имеющихся связей
процедуры прямого доступа.

       wr4.1.3. Технология использования  средства  ELK  включает  следующие
этапы:
     - подготовка средства ELK к работе;
     - получение прототипа гипертекста;
     - компиляция прототипа гипертекста;
     - работа с гипертекстом.

}}
72{{                            @+ п.4.3@73@   @СОДЕРЖАНИЕ@51@   @- п.4.1@71@

      wr4.2. Подготовка к работе

      wr4.2.1.  Для  того, чтобы подготовить средство ELK к  работе, 
 необходимо инсталлировать комплекс ЭКО на жесткий магнитный  диск 
 ПЭВМ в соответствии с процедурами, описанными в документе  "Комп-
 лекс программ ЭКО версия 3.4. Описание применения" (@Раздел 2@222@).
}}
73{{                            @+ п.4.4@74@   @СОДЕРЖАНИЕ@51@   @- п.4.2@72@

      wr4.3. Получение прототипа гипертекста

       wr4.3.1.  Процесс  получения  прототипа  гипертекста  выполняется при
помощи любого текстового редактора и состоит в следующем:

     - исходный текстовый файл разбивается на сегменты;
     - в каждом сегменте выделяются ключевые слова;
     - каждое ключевое слово связывается с некоторым сегментом.

       wr4.3.2.  Сегмент  представляет  собой  часть  текста,   ограниченную
двойными фигурными скобками, перед которыми в символьном виде записывается
число  в  диапазоне от 0 до 65535. Это число называется номером сегмента и
используется для ссылки на сегмент. Длина  сегмента  не  должна  превышать
размера 32 Кбайт.

       wr4.3.3.  Ключевые слова есть средство связи между сегментами. Каждое
ключевое слово связывает сегмент, которому оно  принадлежит,  с  любым  из
имеющихся  в  тексте  сегментов  при помощи ссылки. Синтаксически ключевое
слово представляет собой часть сегмента, ограниченную  символами  "@",  за
которой  непосредственно  следует  ссылка.  Ссылка на сегмент представляет
собой номер сегмента, за которым следует символ "@". Ключевое слово  может
содержать пробелы, однако не может быть перенесено на следующую строку.

       wr4.3.4. Общий вид прототипа гипертекста представлен ниже.
       ПРИМЕЧАНИЕ.  Всвязи  с  тем,  что   настоящее   описание   средства
"Электронная книга ELK" подается Вам с использованием этого средства (т.е.
на  Вашем  мониторе  -  отображение гипертекста), для устранения ошибочной
реакции  системы  все  специальные  символы  в  приведенном  ниже  примере
заменены:
            bwl{ на bwl[
            bwl} на bwl]
            bwl@ на bwl#.
Произведя  мысленно  обратную замену, Вы получите исходный вид примера (и,
соответственно, настоящий вид фрагмента гипертекста).

  N1[[ ...........................................
  #ключевое слово#K1#......#ключевое слово#K2#....
  ................................................
  ]]
  .
  .
  Nn[[ ........#ключевое слово#Kk-1#..............
  ................................................
  .......................#ключевое слово#Kk#......
  ]]

      где

      Ni  - номер сегмента ;
      Kj# - ссылка на сегмент.

       Сегменты  могут  быть  пронумерованы  в  любом  порядке.  Ссылка на
несуществующий сегмент считается ошибкой.
       После того как текстовый файл представлен способом, описанным выше,
он готов для компиляции.

}}
74{{                            @+ п.4.5@75@   @СОДЕРЖАНИЕ@51@   @- п.4.3@73@

      wr4.4. Компиляция прототипа гипертекста

       wr4.4.1. Для проведения компиляции прототипа  гипертекста  необходимо
набрать следующую команду DOS:

               htcmp <имя файла прототипа>.<расширение>

       Если  расширение  отсутствует,  то  по умолчанию берется расширение
HTX.
       Результатом компиляции будет индексный файл  с  именем  <имя  файла
прототипа>.HTD, содержащий информацию о структуре текстового файла.

       Пример:

       Пусть прототип гипертекста находится в файле T.TXT.

       Выполняем команду DOS:

                 HTCMP T.TXT

       Результатом компиляции будет индексный файл T.HTD.

}}
75{{                             @+ п.5@76@   @СОДЕРЖАНИЕ@51@   @- п.4.4@74@

       wr4.5. Работа с гипертекстом

       wr4.5.1.   После   того   как   получен  прототип  и  индексный  файл
гипертекста,   можно   осуществлять   его   просмотр   с    использованием
установленных   ссылок.  Просмотр  гипертекста  осуществляется  с  помощью
процессора гипертекста HT.EXE по команде DOS:

            HT <имя файла прототипа>

       Выдача команды приводит к  появлению  на  экране  монитора  первого
сегмента  гипертекста.  Просмотр  сегментов  в окне и выбор ключевых cлов,
осуществляется клавишами: стрелки ВВЕРХ, ВНИЗ, ВЛЕВО, ВПРАВО, PgUp,  PgDn,
Home, End.
       Переход  к  сегменту,  связанному  с  выбранным  ключевым  словом -
<ENTER>;
       Возврат в предыдущее состояние - <ALT-F1>;
       Выбор следующего фрагмента  текста  (линейный  просмотр  текста)  -
<GRAY+>;
       Выбор  предыдущего  фрагмента  текста  (линейный просмотр текста) -
<GRAY->;
       Завершить работу с программой - <ESC>.

       wr4.5.2. При указанном способе запуска номер  первого  выводимого  на
экран  сегмента,  размер  окна  в  котором  высвечивается текст и цветовая
палитра будут выбраны по умолчанию. Для того, чтобы установить собственные
значения указанных параметров, используйте следующую командную строку:

       HT <pfile> <Ns> x1 y1 x2 y2 c1 c2 c3 c4,

       где:

       pfile - имя файла прототипа гипертекста;
       Ns    - номер сегмента, который первым выводится на экран;
       x1    - номер строки верхнего левого угла окна;
       y1    - номер столбца верхнего левого угла окна;
       x2    - номер строки  нижнего правого угла окна;
       y2    - номер столбца нижнего правого угла окна;
       c1    - цвет переднего плана и фона текста в окне;
       c2    - цвет переднего плана и фона рамки;
       c3    - цвет переднего плана и фона ключевых слов;
       c4    - цвет переднего плана и фона курсора по
               ключевым словам.

       При этом с1,с2,с3,с4 являются десятичными числами в диапазоне от  1
до  256.  Подбор  цветов  осуществляется  выбором  значений указанных выше
параметров.

}}
76{{                                          @СОДЕРЖАНИЕ@51@   @- п.4.5@75@

                wr5. ДОПОЛНИТЕЛЬНЫЕ ВОЗМОЖНОСТИ

       wr5.1  Средство  ELK  позволяет  при  просмотре  текста   не   только
переходить  к  выбранным  сегментам,  но  и  выполнять  команды  DOS.  Это
достигается переходом по ключевым словам  в  блоки,  имеющие  номер  более
65000.   В   блоках,   имеющих   указанные  номера  каждая  строка  текста
интерпретируется, как команда DOS.

       Вот пример вызова  программы Norton Commander.
       ПРИМЕЧАНИЕ.  Всвязи  с  тем,  что   настоящее   описание   средства
"Электронная книга ELK" подается Вам с использованием этого средства (т.е.
на  Вашем  мониторе  -  отображение гипертекста), для устранения ошибочной
реакции  системы  все  специальные  символы  в  приведенном  ниже  примере
заменены:
            bwl{ на bwl[
            bwl} на bwl]
            bwl@ на bwl#.
Произведя  мысленно  обратную замену, Вы получите исходный вид примера (и,
соответственно, настоящий вид фрагмента гипертекста).


       1[[
       Пример вызова программы #Norton Commander#65001#
       ]]
       65001[[
       nc
       ]]

       wr5.2 Средство ELK позволяет также разбивать сегменты на блоки с тем,
чтобы при выводе сегмента на экран дисплея, находящаяся в блоке информация
выделялась цветом.
       Блок оформляется следующим образом:

      <Ctrl-O>BF[f][L].........содержимое блока ......<Ctrl-O>

      где:
        <Ctrl-O> - спецсимвол;
        B        - обязательная опция фона;
        F        - обязательная опция переднего плана;
        f        - необязательная опция интенсивности;
        l        - необязательная опция мерцания.

     Опции B  и  F могут иметь следующие значения:

                  b - wbчерный
                  u - синийwu
                  g - wgзеленый
                  c - wcциан
                  r - wrкрасный
                  m - wmмагента
                  o - woкоричневый
                  w - белый.

}}
52{{
                  mwl                          
                  mwl      СРЕДСТВО АНАЛИЗА    ▒▒
                  mwl      БАЗЫ ЗНАНИЙ XHT     ▒▒
                  mwl                          ▒▒
                   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

                               АННОТАЦИЯ

       Настоящий     документ    является    руководством    программиста,
использующего средство анализа Базы знаний XHT (далее по тексту - средство
XHT), которое входит в состав комплекса программ ЭКО. В  документе  дается
полное описание средства XHT, включая процедуры развертывания и технологию
использования.
       При    эксплуатации    средства    XHT   необходимо   дополнительно
руководствоваться  сведениями,  приведенными  в следующих документах (ниже
приведены сокращенные названия документов):
       (@<-@22@) "Комплекс программ ЭКО версия 3.4. Описание применения";
       (@<-@54@) "Комплекс программ ЭКО версия 3.4. Основные программные 
средства. Руководство программиста";
       (@<-@51@) "Комплекс программ ЭКО версия 3.4. Программное средство 
ELK. Руководство программиста";
       (@<-@53@) "Комплекс программ ЭКО версия 3.4. Стандартные   интер-
фейсы. Руководство программиста".

                             weСОДЕРЖАНИЕ:

      @1.@77@ Назначение
      @2.@78@ Условия применения
      @3.@79@ Состав и основные функции
       4.  Технология использования
      @4.1.@81@ Подготовка средства XHT к работе
      @4.2.@82@ Как получить текстовый отчет
      @4.3.@83@ Как получить гипертекстовый отчет
      @4.4.@84@ Работа с гипертекстовым отчетом
      @4.5.@85@ Как получить графический отчет
      @4.6.@86@ Работа с графическим отчетом
      @4.7.@87@ Получение графических объяснений хода консультации
       5.  Приложение
      @5.1.@89@ Пример текстового отчета
      @5.2.@90@ Пример прототипа гипертекстового отчета

}}
77{{                            @+ п.2@78@   @СОДЕРЖАНИЕ@52@

                       wr1. НАЗНАЧЕНИЕ

       wr1.1.  Программное средство XHT представляет собой генератор отчетов
по Базе знаний. Оно предназначено для того, чтобы помочь пользователю  при
анализе  структуры,  состава и содержания моделей Базы знаний, созданной с
помощью комплекса ЭКО. При помощи средства XHT могут быть получены  отчеты
трех   типов:  текстовые,  гипертекстовые  и  графические.  Для  получения
гипертекстовых отчетов требуется совместное использование средства  XHT  и
средства ELK.

       wr1.2.  Текстовый  отчет  представляет  собой твердую копию некоторой
модели Базы знаний и включает описание атрибутов, правил и  сценария  этой
модели,  а также таблицы перекрестных ссылок. Пользователю предоставляются
широкие возможности по управлению содержанием текстовых отчетов.

       wr1.3.  Гипертекстовый  отчет  представляет  собой  гипертекст   (см.
"Комплекс программ ЭКО версия 3.4. Программное средство ELK.   Руководство
программиста" @раздел 1@68@), построенный на основе полного текстового  отчета.
Гипертекстовый  отчет  использует  все  имеющиеся  в модели синтаксические
связи для реализации поисковых процедур,  которые  позволяют  пользователю
практически  моментально  получать  в  диалоговом  режиме  доступ к нужной
информации.
       1.4. Графический отчет представляет собой  графическое  изображение
сети  вывода некоторой модели в Базе знаний в виде И-ИЛИ графа, описанного
в документе "Комплекс программ ЭКО  версия   3.4.   Описание   применения" 
(@раздел  4@10@). Пользователь  может распечатать  графический  отчет  или  
работать  с ним непосредственно  на  ПЭВМ. При помощи графического  отчета  
может  быть получено  так  называемое  графическое  объяснение  в   режиме 
консультации основных программных средств (ОПС) комплекса ЭКО.

       wr1.5. Средство XHT  обеспечивает  возможность  совместной  работы  с
гипертекстовым и графическим отчетом в диалоговом режиме. Поскольку первый
из  них  содержит  информацию о составе и содержании некоторой модели Базы
знаний, а второй - информацию о ее структуре, эта возможность часто бывает
полезна.
}}
78{{                            @+ п.3@79@   @СОДЕРЖАНИЕ@52@   @- п.1@77@

                     wr2. УСЛОВИЯ ПРИМЕНЕНИЯ


       wr2.1. Средство XHT функционирует в составе программного  обеспечения
персональных   электронных   вычислительных  машин  (ПЭВМ)  типа  ЕС  1841
Е11.700.012  и  последующих  моделей  или  ПЭВМ  типа  PC/XT  ,  PC/AT   с
оперативной  памятью  не  менее  512  Кбайт,  цветным графическим дисплеем
(CGA,EGA,VGA), накопителем на жестком магнитном диске емкостью не менее  5
Мбайт  и накопителем на гибких магнитных дисках емкостью 360 Кбайт в среде
операционной системы АЛЬФА ДОС 16 или совместимой с ней МS DOS версии  3.0
и выше.

       wr2.2.  Средство  XHT  использует  альтернативную  кодировку символов
кириллицы. Однако предусмотрена возможность  настройки  средства  XHT  для
работы  в  основной  кодировке  и  кодировке MIK. Соответствующие сведения
приводятся в @п.4.1@81@.

       2.2. Средство XHT используется как в составе комплекса ЭКО.

}}
79{{                            @+ п.4.1@81@   @СОДЕРЖАНИЕ@52@   @- п.2@78@

             wr3. СОСТАВ И ОСНОВНЫЕ ФУНКЦИИ


       wr3.1. Средство XHT имеет следующий состав:
      - генератор текстовых отчетов XEKO;
      - генератор гипертекстовых отчетов HEKO;
      - генератор графических отчетов TOP;
      - вспомогательный командный файл.

       Для  получения гипертекстовых отчетов необходимо также использовать
программное средство ELK.

       wr3.2. Программа XEKO состоит из одного модуля XEKO.EXE  и  позволяет
получить   в   виде   линейного  текста  следующую  информацию  о  модели,
находящейся в Базе знаний:
       - имя модели;
       - комментарий к модели;
       - описания всех числовых атрибутов, символьных атрибутов (вместе  с
их значениями), правил и предложений сценария;
       -  таблицы  имен  всех  числовых  атрибутов,  символьных атрибутов,
утверждений, правил и предложений сценария;
       - таблицы перекрестных ссылок.

       wr3.3.   Программа   НEKO  состоит  из  одного  модуля  НEKO.EXE,
являющегося модификацией программы XEKO,  и  предназначена  для  генерации
прототипа гипертекста  (см. "Комплекс программ ЭКО версия 3.4. Программное 
средство @ELK.@51@ Руководство программиста"), включающего всю информацию, опи-
санную в п.3.2. Гипертекстовый отчет в дальнейшем может быть  сгенерирован 
из полученного прототипа при помощи средства ELK (см. @п.4.3@83@).

       wr3.4. Программа TOP включает в себя:

      -  компилятор топологии базы знаний;
      -  интерпретатор топологии;
      -  процессор графических объяснений;
      -  помощь интерпретатора топологии.

       Компилятор топологии базы знаний - TOP.EXE предназначен для анализа
структуры  базы  знаний,  формирования плоского графического представления
сети вывода и записи полученных результатов (графического  отчета  о  базе
знаний) на диск с целью их дальнейшего просмотра.

       Интерпретатор топологии модели - TOP_DR.EXE позволяет просматривать
графический  отчет  в  диалоговом  режиме,  получать  твердую  копию,  как
фрагментов графического отчета, так и отчета в целом и осуществлять  выход
в гипертекстовый отчет по соответствующей модели.
       Процессор    графических    объяснений   -   TOP_DRV.EXE   является
модификацией  модуля  TOP_DR.EXE.   Он   предназначен   для   оперативного
графического  отображения  состояния  модели  в  процессе  консультации. В
процессе работы модуль  TOP_DR.EXE  использует  предварительно  полученный
графический  отчет,  в  котором  при  помощи различных цветов производится
индикация  состояний  целей,  правил  и  предложений  сценария.  Процессор
графических    объяснений   также   обеспечивает   оперативный   выход   в
гипертекстовый отчет по текущей модели.
       Помощь интерпретатора топологии включает исполняемый модуль HT.EXE,
а также файлы данных TOP_HELP.HTX и TOP_HELP.HTD. Она  представляет  собой
гипертекст,  подготовленный при помощи средства ELK и содержащий в кратком
виде информацию из  @п.4.6.@86@  Помощь  интерпретатора  топологии  может  быть
вызвана в любой момент диалога с интерпретатором топологии или процессором
графических объяснений.

       wr3.5. Вспомогательный командный файл TOPOLOG.BAT позволяет упростить
процесс  генерации  гипертекстовых  и графических отчетов, предназначенных
для совместного использования.

}}
81{{                            @+ п.4.2@82@   @СОДЕРЖАНИЕ@52@   @- п.3@79@

                 wr4. ТЕХНОЛОГИЯ ИСПОЛЬЗОВАНИЯ


             wr4.1. Подготовка средства XHT к работе

      wr4.1.1. Средство XHT размещается на 5 и 6 дискетах, входящих  
 в комплект поставки комплекса ЭКО. На  ГМД 5  помещен  генератор 
 текстовых отчетов XEKO. На ГМД 6 - генератор  гипертекстовых от-
 четов HEKO и генератор графических отчетов TOP.

      wr4.1.2. Для того, чтобы подготовить средство XHT  к  работе,
 необходимо инсталлировать комплекс ЭКО на жесткий магнитный диск 
 ПЭВМ в соответствии с процедурами, описанными в документе "Комп-
 лекс программ ЭКО версия 3.4. Описание применения" (@Раздел 2@222@).

      wr4.1.3. Eсли  предполагается  вести  работу  в  кодировке,  отличной  от
альтернативной,   следует  установить  системную  переменную  операционной
системы EREBUS по команде:

               SET EREBUS=<идентификатор кодировки>

      где <идентификатор кодировки> -

             B - кодировка MIK,
             M - основная версия кодировки.

}}
82{{                            @+ п.4.3@83@   @СОДЕРЖАНИЕ@52@   @- п.4.1@81@

                wr4.2. Как получить текстовый отчет

       wr4.2.1.  Текстовый  отчет  по  некоторой  модели, находящейся в Базе
знаний может быть получен при помощи программы XEKO. Для описания работы с
программой XEKO введем следующие  обозначения.  В  квадратных  скобках  []
указываются  необязательные  параметры.  В  угловых скобках <> указываются
метапеременные, которые записываются символами верхнего регистра.

      Программа запускается следующей командной строкой:

 xeko <MDFL> [-s[b]] [-m[<MOPT>]] [-n[<NOPT>]] [-x[<XOPT>]]
 [-c<MC>[:<CC>]][-t[<MSGFLNM>]]

      где: MDFL - путь и/или имя файла модели
                  (расширение, если не задано: .EXP).

      Ключи указывают режимы работы следующим образом:

      -s   - структурированная печать модели;
      -sb  - структурированная сокращенная печать модели;
      -m   - печать модели;

      MOPT есть: [sa][sv][na][rl][sc].

      Эти параметры задают режим печати следующим образом:

          печатать:
           - sa только символьные атрибуты,
           - sv только утверждения,
           - na только числовые атрибуты,
           - rl только простые правила,
           - sc только предложения сценария;

       Значения этих ключей можно комбинировать. При этом,  если  ни  одно
значение не задано, то по умолчанию принимается печать всей модели.

      -n   - печать имен;

      NOPT есть: [sa][sv][na][rl][sc]

      Эти параметры означают то же, что и выше (см. MOPT).

      -x   - печать перекрестных ссылок,

      XOPT есть: [s[g][c][a]]:[n[g][c][a]]],

      и задает печать предложений сценария и правил, куда входят:

         s - утверждения,
         n - числовые атрибуты:
             g - только как цель,
             c - только как условие,
             а - только как действие;

      -c   - кодировка кириллицы:

       <MC>  -  в  модели,  <CC>  -  на ПЭВМ. Параметры задаются следующим
образом:

             А - альтернативная версия кодировки,
             B - кодировка MIK,
             M - основная версия кодировки.

       Программа может использовать переменную среды  (ENVIROMENT)  EREBUS
для указания кодировки кириллицы на ПЭВМ. Значения используются те же, что
и для ключа -c. Например, для указания основной версии кодировки кириллицы
на ПЭВМ команда будет следующей:

                       set EREBUS=M

      -t  - при формировании сообщений использовать файл с  именем
 <MSGFLNM> (по умолчанию XEKO.MSG).

       Эта    возможность    может   быть   использована   для   получения
нерусскоязычных версий XEKO. Для примера  на  дискету  с  программой  XEKO
помещен  файл  XEKO.MSG,  содержащий все сообщения программы на английском
языке.

       wr4.2.2. Вывод программа направляет в устройство стандартного  вывода
(обычно консоль ). Его можно направить в файл средствами MS-DOS:

           xeko <MDFL> ... > <OUT_FILE_NAME>


       wr4.2.3. Примеры использования.
       Печать  всей  модели,  всех  имен  по алфавиту, перекрестных ссылок
(полный отчет):

                  xeko <MDFL> -m -n -x

       Пример полного текстового отчета приведен в @п.5.1@89@.
       Печать списка имен простых правил и предложений сценария:

                  xeko <MDFL> -nrlsc
      или
                  xeko <MDFL> -nscrl

       Для каждого утверждения печать предложений  сценария  и  правил,  в
условие которых оно входит:

                  xeko <MDFL> -xsc

       Для  каждого  утверждения  и  числового атрибута печать предложений
сценария и правил, в условие которых оно (он) входит:

                  xeko <MDFL> -xsc:nc

}}
83{{                            @+ п.4.4@84@   @СОДЕРЖАНИЕ@52@   @- п.4.2@82@

                wr4.3. Как получить гипертекстовый отчет

       wr4.3.1. Генерация гипертекстового отчета производится в два этапа.
       На  первом  этапе  при  помощи  программы  HEKO  получают  прототип
гипертекстового  отчета. Этот прототип представляет собой полный текстовый
отчет, в котором выполнена разметка данных в соответствии  с  требованиями
раздела  4  (@п.4.3@73@)  документа  "Комплекс  программ  ЭКО версия  3.4. 
Программное средство ELK. Руководство программиста".
       На втором этапе, используя полученный прототип  как  входной  файл,
при помощи средства ELK получают гипертекстовый отчет.

       4.3.2. Для описания работы с программой HEKO используем обозначения
 @пп.4.2.1.@82@

       Программа запускается следующей командной строкой:

       heko <MDFL> [<HTXFL>] [-c<MC>[:<CC>]] [-t[<MSGFLNM>]]

       где: MDFL  - путь и/или имя файла модели
                    (расширение, если не задано: .EXP);

            HTXFL - путь и/или имя выходного файла
                    (расширение, если не задано: .HTX),
                    если имя не задано, то имя модели с расширением .HTX;

       -c   - кодировка кириллицы:

           <MC> -  в модели, <CC> - на ПЭВМ:

             А - альтернативная версия,
             B - MIK,
             M - основная версия;

       Программа  может  использовать переменную среды (ENVIROMENT) EREBUS
для указания кодировки кириллицы на ПЭВМ. Значения используются те же, что
и для ключа -с. Например, для указания основной версии кодировки кириллицы
на ПЭВМ команда будет следующей:

                       set EREBUS=M

       -t[MSGFLNM] - при формировании сообщений использовать файл с
 именем  <MSGFLNM>  (по умолчанию HEKO.MSG).

       Эта   возможность   может   быть   использована    для    получения
нерусскоязычных  версий  HEKO.  Для  примера  на дискету с программой HEKO
помещен файл HEKO.MSG, содержащий все сообщения  программы  на  английском
языке.

       wr4.3.3.  После  того, как при помощи программы HEKO получен прототип
гипертекстового отчета, в соответствии с технологией генерации гипертекста
, описанной в @разделе 4@71@ документа "Комплекс программ ЭКО версия  3.4.
Программное средство ELK.  Руководство  программиста"  следует  произвести 
компиляцию прототипа, используя программу HTCMP.EXE.
       Пример генерации гипертекстового отчета для модели EXAMPLE:

                  HEKO  EXAMPLE
                  HTCMP EXAMPLE

       Результатом  проведенной  генерации  будет  гипертекст,  включающий
процессор гипертекста HT.EXE, прототип гипертекста EXAMPLE.HTX и индексный
файл EXAMPLE.HTD.
       Пример прототипа гипертекстового отчета приведен в @п.5.2@90@.

}}
84{{                            @+ п.4.5@85@   @СОДЕРЖАНИЕ@52@   @- п.4.3@83@

            wr4.4. Работа с гипертекстовым отчетом

       wr4.4.1.   Работа   с   гипертекстовым   отчетом   осуществляется   в
соответствии  с  процедурами,  описанными  в  разделе  4 (@п.4.5@75@) документа
"Комплекс  программ ЭКО версия 3.4. Программное средство   ELK.    Руководство
программиста".

}}
85{{                            @+ п.4.6@86@   @СОДЕРЖАНИЕ@52@   @- п.4.4@84@

            wr4.5. Как получить графический отчет

       wr4.5.1.   Для   того,  чтобы  получить  графический  отчет,  следует
воспользоваться  программой  TOP.  Соответствующая  команда   операционной
системы имеет вид:

                      TOP <имя модели>

       Результатом  работы  программы  TOP  будет  файл топологии модели с
именем   <имя   модели>.TOP   ,   который   в   дальнейшем    используется
интерпретатором   топологии   и/или   процессором  графических  объяснений
(см.@п.4.6@86@ и @п.4.7@87@).
      Пример:

                      TOP EXAMPLE
       При нормальном завершении  программы  TOP  будет  сформирован  файл
топологии с именем EXAMPLE.TOP.

       wr4.5.2.  Как  правило,  удобно  работать  совместно  с графическим и
гипертекстовым отчетами, поскольку они удачно дополняют друг друга с точки
зрения содержащейся в них информации. Для того,  чтобы  упростить  процесс
получения обоих отчетов можно использовать командный файл TOPOLOG.
       Это делается при помощи команды операционной системы:

            TOPOLOG <Имя модели без расширения>

       В результате будут сформированы следующие файлы:

       - < Имя модели .TOP >  - файл топологии модели;
       - < Имя модели .HTX >  - прототип гипертекста;
       - < Имя модели .HTD >  - индексный файл гипертекста.


       Пример: модель в Базе знаний носит имя EXAMPLE.EXP.
       Выполняем команду DOS:

         TOPOLOG EXAMPLE

       В  результате  будут  получены  файлы  : EXAMPLE.TOP, EXAMPLE.HTD и
EXAMPLE.HTX .

}}
86{{                            @+ п.4.7@87@   @СОДЕРЖАНИЕ@52@   @- п.4.5@85@

               wr4.6. Работа с графическим отчетом

       wr4.6.1.  Работа  с  графическим  отчетом  осуществляется  с  помощью
программы TOP_DR.
       Вызов программы осуществляется путем выдачи команды DOS:

            TOP_DR <Имя файла топологии без расширения>

       Пример графического отчета модели EXAMPLE приведен на рис.1.
       (сравните  с  другими  отчетами  по  этой  модели,  приведенными  в
приложении).

                  ╦══                Example
                 ╔╩══╗
                 ╚РЕЗУ
                 ╔╩══┐
                 ╚оцен
                  │
                  V────┬────┬────┬────┐
                 ┌┴──┐┌┴──┐┌┴──┐┌┴──┐┌┴──┐
                 └Nr0┘└Nr1┘└Nr2┘└Nr3┘└Nr4┘
                 ╔╩══┐╔╩══┐ |    |
                 ╚сп═┘╚сэ═┘ сэ   сэ
                 ┌┴──┐┌┴──┐
                 └A_s┘└Bb─┘
                 ╔╩══┐ │
                 ╚зо═┘ &────┬────┐
                 ┌┴──┐╔╩══┐╔╩══┐ |
                 └Dq─┘╚тво┘╚дво┘ зо
                      ┌┴──┐┌┴──┐
                      └Dq─┘└Dq─┘

         Рис. 1. Пример графического  отчета  модели.

      В отчете приняты следующие обозначения элементов сети вывода:

      Example -  имя модели;

      ╔╩══╗
      ╚РЕЗУ   -  предложение сценария (РЕЗУЛЬТАТ);

      ╔╩══┐
      ╚сэ═┘   -  цель (сэ - имя утверждения);

      ┌┴──┐
      └Nr0┘   -  правило (Nr0 - имя правила);

      |
      сэ     -  встречавшаяся ранее цель;


      V      -  ИЛИ-вершина, объединяющая правила, вычисляющие некоторую цель;

      &      -  И-вершина,  объединяющая  цели,  значения  которых
                должны выведены для того, чтобы можно было  применить правило.

       wr4.6.2.  Доступ  к   гипертекстовому   представлению   базы   знаний
осуществляется  путем  подведения  курсора  к  нужному  объекту  и нажатия
клавиша Enter. В этом случае  на  экран  дисплея  будет  выведен  фрагмент
гипертекстового отчета, содержащий информацию об этом объекте. После этого
пользователь  может либо работать с гипертекстовым отчетом либо при помощи
клавиша Esc вернуться к графическому отчету.

       wr4.6.3. Функционально задействованы следующие клавиши:

           ^
         |,|,<-,->, Home,End - движение по дереву;
         V
         Enter   -  показать объект (при помощи перехода к гипертекстовому
                    отчету);
         F1      -  помощь;
         F2      -  управление размерами  окна;
         F3      -  управление положением окна;
         F4      -  вывод   топологии   отображенной  в  окне  на
                    печатающее устройство;
         F5      -  вывод  всей топологии текущей модели на печатающее
                    устройство.

}}
87{{                            @+ п.5.1@89@   @СОДЕРЖАНИЕ@52@   @- п.4.6@86@

         wr4.7. Получение графических объяснений хода консультации

       wr4.7.1. Программа  TOP_DRV  обеспечивает  графические  объяснения  в
режиме консультации ОПС комплекса ЭКО.
       Графические   объяснения   дают  естественный  и  наглядный  способ
наблюдения за ходом вывода. Они выдаются пользователю в виде  графического
отчета,  на  котором  при  помощи  различных  цветов  отображается текущее
состояние элементов сети вывода.
       Для того, чтобы получить графические  объяснения  необходимо  перед
началом  консультации  сгенерировать  в  соответствии  с @п.4.5@85@ графические
отчеты для всех моделей, задействованных в ней.
       Если предполагается  в  ходе  графических  объяснений  использовать
гипертекстовые  отчеты,  лучше  всего  перед началом консультации для всех
моделей, задействованных в ней, выполнить действия, описанные в @п.4.5.2@85@.
       Процедура  вызова  графических  объяснений  описана  в  разделе   3
(@п.3.4@66@)   документа  "Комплекс  программ  ЭКО версия 3.4. Основные  про-
граммные средства. Руководство программиста".
       В графических объяснениях цвета используются следующим образом:

      для предложений сценария:

      яркий красный  - предложение сценария в текущий момент
                       выполняется (активно);
      белый          - предложение сценария либо еще не выполнялось,
                       либо уже выполнено (не активно);
      для правил:

      яркий красный  - правило применяется (активно);
      зеленый        - правило не применялось;
      синий          - правило применилось;
      коричневый     - правило не применилось;

      для целей:

      яркий красный  - цель выводится (активна);
      зеленый        - цель не выводилась;
      синий          - цель выведена;
      синий мигающий - значение цели установлено пользователем;
      яркий синий    - значение цели получено по умолчанию;
      коричневый     - цель не выведена.

       wr4.7.2. Использование клавиш аналогично @п.4.6.3@86@.

}}
89{{                            @+ п.5.2@90@   @СОДЕРЖАНИЕ@52@   @- п.4.7@87@

                       wr5. ПРИЛОЖЕНИЕ

          wr5.1. Пример полного текстового отчета

Модель: EXAMPLE

МОДЕЛЬ:
-------

Сценарий:
    1: 1
       ЕСЛИ:
            **** Всегда ****

       ТО:       РЕЗУЛЬТАТ

       ПАРАМЕТРЫ:
            -5.00,оценка

Утверждения:

N п/п                         ИМЯ                            УМОЛЧАНИЕ

    1: тво
       [ответил.теоретический_вопрос]......................      0.00

       Развернутое имя:
              ответил на теоретический вопрос


    2: дво
       [ответил.дополнительный_вопрос].....................      0.00

       Развернутое имя:
              ответил на дополнительный вопрос

    3: зо
       [ответил.задача]....................................      0.00

       Развернутое имя:
              решил задачу

    4: сэ
       [сдал.экзамен]......................................      0.00

    5: сп
       [списывал.да].......................................      0.00

    6: **** Нет имени утверждения ****
       [списывал.нет]......................................      0.00


Символьные атрибуты:

N п/п                            ИМЯ

    1: ответил

       Шаблон:
            студент ^^

       Развернутое имя:
              виды заданий на экзамене

    2: сдал

       Шаблон:
            студент сдал ^^

    3: списывал

Числовые атрибуты:

N п/п               ИМЯ                ДИАПАЗОН            УМОЛЧАНИЕ

    1: оценка.................. [      2.00 ..   5.00]        3.00

       Развернутое имя:
            оценка, полученная студентом

Правила:

N п/п                   ИМЯ                ТИП

    1: Dq............................. Дистр.вопрос

       ЦЕЛЬ:
            [ответил.теоретический_вопрос]
       ЕСЛИ:
            **** Всегда ****
       ТО:
             Насколько Вы уверены в том, что студент

       Комментарий:
            Ввод исxодныx  данныx:  насколько
            xорошо студент справился с каждым
            видом задания.

    2: Dq............................. Дистр.вопрос

       ЦЕЛЬ:
            [ответил.дополнительный_вопрос]
       ЕСЛИ:
            **** Всегда ****
       ТО:
             Насколько Вы уверены в том, что студент

       Комментарий:
            Ввод исxодныx  данныx:  насколько
            xорошо студент справился с каждым
            видом задания.

    3: Dq............................. Дистр.вопрос

       ЦЕЛЬ:
            [ответил.задача]
       ЕСЛИ:
            **** Всегда ****
       ТО:
             Насколько Вы уверены в том, что студент

       Комментарий:
            Ввод исxодныx  данныx:  насколько
            xорошо студент справился с каждым
            видом задания.

    4: Bb............................. Байесовское

       ЦЕЛЬ:
            [сдал.экзамен]
       ЕСЛИ:
            **** Всегда ****
       ТО:
            тво 8.11  0.06
            дво 2.01  0.25
            зо  65.79 0.06

       Комментарий:
            Определяется степень уверенности в том,
            что экзамен  сдан  успешно,   с  учетом
            значимости    каждого   вида   задания.

    5: Nr0............................ Арифм.

       ЦЕЛЬ:
            оценка
       ЕСЛИ:
            сп
       ТО:
            2.00

       Комментарий:
            Если студент списывал, то
            ставится оценка 2.

    6: Nr1............................ Арифм.

       ЦЕЛЬ:
            оценка
       ЕСЛИ:
            сэ > 4.96
       ТО:
            5.00

       Комментарий:
            Если степень уверенности в
            том, что студент  успешно
            сдал экзамен больше 4.96
            то ставится оценка 5.

    7: Nr2............................ Арифм.

       ЦЕЛЬ:
            оценка
       ЕСЛИ:
            сэ > 3.90
       ТО:
            4.00

       Комментарий:
            Если степень уверенности в
            том, что студент  успешно
            сдал экзамен больше 3.90
            то ставится оценка 4.

    8: Nr3............................ Арифм.

       ЦЕЛЬ:
            оценка
       ЕСЛИ:
            сэ > -1.68
       ТО:
            3.00

       Комментарий:
            Если степень уверенности в
            том, что студент  успешно
            сдал экзамен больше -1.68
            то ставится оценка 3.

    9: Nr4............................ Арифм.

       ЦЕЛЬ:
            оценка
       ЕСЛИ:
            **** Всегда ****
       ТО:
            2.00

       Комментарий:
            Если степень уверенности в
            том, что студент  успешно
            сдал экзамен меньше -1.68
            то ставится оценка 2.

   10: A_s............................ Альт. вопрос

       ЦЕЛЬ:
            [списывал.да]
       ЕСЛИ:
            зо
       ТО:
            Заметили ли вы, что студент списывал?

   11: A_s............................ Альт. вопрос

       ЦЕЛЬ:
            [списывал.нет]
       ЕСЛИ:
            зо
       ТО:
            Заметили ли вы, что студент списывал?

ИМЕНА ПО АЛФАВИТУ:
------------------

Имена предложений сценария по алфавиту:

                ИМЯ             Вн. N
1...............................    1

Имена символьных атрибутов по алфавиту:

                ИМЯ             Вн. N
ответил.........................    1
сдал............................    2
списывал........................    3

Имена утверждений по алфавиту:

                               ИМЯ                         Вн. N
дво
[ответил.дополнительный_вопрос]..........................    2
зо
[ответил.задача].........................................    3
сп
[списывал.да]............................................    5
сэ
[сдал.экзамен]...........................................    4
тво
[ответил.теоретический_вопрос]...........................    1
**** Нет имени утверждения ****
[списывал.нет]...........................................    6

Имена числовых атрибутов по алфавиту:

                ИМЯ             Вн. N
оценка..........................    1

Имена правил по алфавиту:

                ИМЯ             Вн. N     ТИП
A_s.............................   10 Альт. вопрос
A_s.............................   11 Альт. вопрос
Bb..............................    4 Байесовское
Dq..............................    3 Дистр.вопрос
Dq..............................    1 Дистр.вопрос
Dq..............................    2 Дистр.вопрос
Nr0.............................    5 Арифм.
Nr1.............................    6 Арифм.
Nr2.............................    7 Арифм.
Nr3.............................    8 Арифм.
Nr4.............................    9 Арифм.

ПЕРЕКРЕСТНЫЕ ССЫЛКИ:
--------------------

Правила и сценарий для утверждений:

N п/п                            ИМЯ

    1: тво
       [ответил.теоретический_вопрос]

       Правила, где как цель:

            Dq..............................    1

       Правила, где как действие:

            Bb..............................    4

    2: дво
       [ответил.дополнительный_вопрос]

       Правила, где как цель:

            Dq..............................    2

       Правила, где как действие:

            Bb..............................    4

    3: зо
       [ответил.задача]

       Правила, где как цель:

            Dq..............................    3

       Правила, где как условие:

            A_s.............................   10
            A_s.............................   11

       Правила, где как действие:

            Bb..............................    4

    4: сэ
       [сдал.экзамен]

       Правила, где как цель:

            Bb..............................    4

       Правила, где как условие:

            Nr1.............................    6
            Nr2.............................    7
            Nr3.............................    8

    5: сп
       [списывал.да]

       Правила, где как цель:

            A_s.............................   10

       Правила, где как условие:

            Nr0.............................    5

    6: **** Нет имени утверждения ****
       [списывал.нет]

       Правила, где как цель:

            A_s.............................   11

Правила и сценарий для числовых атрибутов:

N п/п                            ИМЯ

    1: оценка

       Правила, где как цель:

            Nr0.............................    5
            Nr1.............................    6
            Nr2.............................    7
            Nr3.............................    8
            Nr4.............................    9

       Сценарий, где как действие:

            1...............................    1

}}
90{{                                        @СОДЕРЖАНИЕ@52@   @- п.5.1@89@

          wr5.2. Пример прототипа гипертекстового отчета

                  @Просмотр примера.@2900@

}}
2900{{
МОДЕЛЬ: EXAMPLE

КОММЕНТАРИЙ :
Тестовый пример:
Вывод оценки при сдаче экзамена.

РАЗРЕШЕНИЕ_КОНФЛИКТОВ : ПЕРВОЕ_ПРАВИЛО

@СЦЕНАРИЙ.@2400@
@СИМВОЛЬНЫЕ АТРИБУТЫ.@2500@
@УТВЕРЖДЕНИЯ.@2600@
@ЧИСЛОВЫЕ АТРИБУТЫ.@2700@
@ПРАВИЛА.@2800@
}}
100{{
@СЦЕНАРИЙ.@2400@

 1

     ЕСЛИ:
          **** Всегда ****

     ТО:       РЕЗУЛЬТАТ

     ПАРАМЕТРЫ:
          -5.00, @оценка@2200@

}}
1600{{
@УТВЕРЖДЕНИЯ.@2600@

 тво

[@ответил@1300@.теоретический_вопрос]........       0.00

     Развернутое имя:
            ответил на теоретический вопрос


       Правила, где как цель:

       @Dq@0200@

       Правила, где как действие:

       @Bb@0500@
}}
1700{{
@УТВЕРЖДЕНИЯ.@2600@


 дво
[@ответил@1300@.дополнительный_вопрос]........      0.00

     Развернутое имя:
            ответил на дополнительный вопрос


       Правила, где как цель:

       @Dq@0300@

       Правила, где как действие:

       @Bb@0500@
}}
1800{{
@УТВЕРЖДЕНИЯ.@2600@

 зо
[@ответил@1300@.задача].......................      0.00

     Развернутое имя:
            решил задачу


       Правила, где как цель:

       @Dq@0400@

       Правила, где как условие:

       @A_s@1100@
       @A_s@1200@

       Правила, где как действие:

       @Bb@0500@
}}
1900{{
@УТВЕРЖДЕНИЯ.@2600@


 сэ
[@сдал@1400@.экзамен].........................      0.00


       Правила, где как цель:

       @Bb@0500@

       Правила, где как условие:

       @Nr1@0700@
       @Nr2@0800@
       @Nr3@0900@
}}
2000{{
@УТВЕРЖДЕНИЯ.@2600@


 сп
[@списывал@1500@.да]..........................      0.00


       Правила, где как цель:

       @A_s@1100@

       Правила, где как условие:

       @Nr0@0600@
}}
2100{{
@УТВЕРЖДЕНИЯ.@2600@


 **** Нет имени утверждения ****
[@списывал@1500@.нет].........................      0.00


       Правила, где как цель:

       @A_s@1200@
}}
1300{{
@СИМВОЛЬНЫЕ АТРИБУТЫ.@2500@

 ответил

     Шаблон:
          студент ^^

     Развернутое имя:
            виды заданий на экзамене

             @УТВЕРЖДЕНИЯ.@2600@

                    тво
                    @теоретический_вопрос@1600@

                    дво
                    @дополнительный_вопрос@1700@

                    зо
                    @задача@1800@


}}
1400{{
@СИМВОЛЬНЫЕ АТРИБУТЫ.@2500@

 сдал

     Шаблон:
          студент сдал ^^

             @УТВЕРЖДЕНИЯ.@2600@

                    сэ
                    @экзамен@1900@

}}
1500{{
@СИМВОЛЬНЫЕ АТРИБУТЫ.@2500@

 списывал

             @УТВЕРЖДЕНИЯ.@2600@

                    сп
                    @да@2000@

                    **** Нет имени утверждения ****
                    @нет@2100@


}}
2200{{
@ЧИСЛОВЫЕ АТРИБУТЫ.@2700@

 оценка............................... [ 2.00 .. 5.00]    3.00

     Развернутое имя:
          оценка, полученная студентом


       Правила, где как цель:

       @Nr0@0600@
       @Nr1@0700@
       @Nr2@0800@
       @Nr3@0900@
       @Nr4@1000@

       Сценарий, где как действие:

      @1@0100@

}}
200{{
@ПРАВИЛА.@2800@

 Dq................................... Дистр.вопрос

     ЦЕЛЬ:
           @[ответил.теоретический_вопрос]@1600@
     ЕСЛИ:
          **** Всегда ****
     ТО:
           Насколько Вы уверены в том, что студент

     Комментарий:
          Ввод исxодныx  данныx:  насколько
          xорошо студент справился с каждым
          видом задания.

}}
300{{
@ПРАВИЛА.@2800@

 Dq................................... Дистр.вопрос

     ЦЕЛЬ:
           @[ответил.дополнительный_вопрос]@1700@
     ЕСЛИ:
          **** Всегда ****
     ТО:
           Насколько Вы уверены в том, что студент

     Комментарий:

          Ввод исxодныx  данныx:  насколько
          xорошо студент справился с каждым
          видом задания.

}}
400{{
@ПРАВИЛА.@2800@

 Dq................................... Дистр.вопрос

     ЦЕЛЬ:
           @[ответил.задача]@1800@
     ЕСЛИ:
          **** Всегда ****
     ТО:
           Насколько Вы уверены в том, что студент

     Комментарий:
          Ввод исxодныx  данныx:  насколько
          xорошо студент справился с каждым
          видом задания.

}}
500{{
@ПРАВИЛА.@2800@

 Bb................................... Байесовское

     ЦЕЛЬ:
           @[сдал.экзамен]@1900@
     ЕСЛИ:
          **** Всегда ****
     ТО:
           @тво @1600@ 8.11  0.06
           @дво @1700@ 2.01  0.25
           @зо @1800@  65.79 0.06

     Комментарий:
          Определяется степень уверенности в том,
          что экзамен  сдан  успешно,   с  учетом
          значимости    каждого   вида   задания.

}}
600{{
@ПРАВИЛА.@2800@

 Nr0.................................. Арифм.

     ЦЕЛЬ:
           @оценка@2200@
     ЕСЛИ:
           @сп @2000@
     ТО:
          2.00

     Комментарий:
          Если студент списывал, то
          ставится оценка 2.

}}
700{{
@ПРАВИЛА.@2800@

 Nr1.................................. Арифм.

     ЦЕЛЬ:
           @оценка@2200@
     ЕСЛИ:
           @сэ @1900@ > 4.96
     ТО:
          5.00

     Комментарий:
          Если степень уверенности в
          том, что студент  успешно
          сдал экзамен больше 4.96
          то ставится оценка 5.

}}
800{{
@ПРАВИЛА.@2800@

 Nr2.................................. Арифм.

     ЦЕЛЬ:
           @оценка@2200@
     ЕСЛИ:
           @сэ @1900@ > 3.90
     ТО:
          4.00

     Комментарий:
          Если степень уверенности в
          том, что студент  успешно
          сдал экзамен больше 3.90
          то ставится оценка 4.

}}
900{{
@ПРАВИЛА.@2800@

 Nr3.................................. Арифм.

     ЦЕЛЬ:
           @оценка@2200@
     ЕСЛИ:
           @сэ @1900@ > -1.68
     ТО:
          3.00

     Комментарий:
          Если степень уверенности в
          том, что студент  успешно
          сдал экзамен больше -1.68
          то ставится оценка 3.

}}
1000{{
@ПРАВИЛА.@2800@

 Nr4.................................. Арифм.

     ЦЕЛЬ:
           @оценка@2200@
     ЕСЛИ:
          **** Всегда ****
     ТО:
          2.00

     Комментарий:
          Если степень уверенности в
          том, что студент  успешно
          сдал экзамен меньше -1.68
          то ставится оценка 2.

}}
1100{{
@ПРАВИЛА.@2800@

 A_s.................................. Альт. вопрос

     ЦЕЛЬ:
           @[списывал.да]@2000@
     ЕСЛИ:
           @зо @1800@
     ТО:
          Заметили ли вы, что студент списывал?

}}
1200{{
@ПРАВИЛА.@2800@

 A_s.................................. Альт. вопрос

     ЦЕЛЬ:
           @[списывал.нет]@2100@
     ЕСЛИ:
           @зо @1800@
     ТО:
          Заметили ли вы, что студент списывал?

}}
2400{{
@ИНДЕКС@2900@


Имена предложений сценария по алфавиту:

@1@0100@
}}
2500{{
@ИНДЕКС@2900@


Имена символьных атрибутов по алфавиту:

@ответил@1300@
@сдал@1400@
@списывал@1500@
}}
2600{{
@ИНДЕКС@2900@


Имена утверждений по алфавиту:

дво
@[ответил.дополнительный_вопрос]@1700@
зо
@[ответил.задача]@1800@
сп
@[списывал.да]@2000@
сэ
@[сдал.экзамен]@1900@
тво
@[ответил.теоретический_вопрос]@1600@
**** Нет имени утверждения ****
@[списывал.нет]@2100@
}}
2700{{
@ИНДЕКС@2900@


Имена числовых атрибутов по алфавиту:

@оценка@2200@
}}
2800{{
@ИНДЕКС@2900@

Имена правил по алфавиту:

@A_s@1100@...................... Альт. вопрос
@A_s@1200@...................... Альт. вопрос
@Bb@0500@....................... Байесовское
@Dq@0400@....................... Дистр.вопрос
@Dq@0200@....................... Дистр.вопрос
@Dq@0300@....................... Дистр.вопрос
@Nr0@0600@...................... Арифм.
@Nr1@0700@...................... Арифм.
@Nr2@0800@...................... Арифм.
@Nr3@0900@...................... Арифм.
@Nr4@1000@...................... Арифм.
}}
53{{
                  mwl                            
                  mwl   СТАНДАРТНЫЕ ИНТЕРФЕЙСЫ   ▒▒
                  mwl                            ▒▒
                   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

                               АННОТАЦИЯ

       Настоящий    документ   является   руководством   программиста   по
использованию стандартных интерфейсов комплекса программ ЭКО. В  документе
содержится  полное  описание  стандартных  интерфейсов,  включая процедуры
развертывания и технологию использования.
       При эксплуатации стандартных интерфейсов  необходимо  дополнительно
руководствоваться сведениями, приведенными в документах:
       (@<-@22@) "Комплекс программ ЭКО версия 3.4. Описание применения";
       (@<-@51@) "Комплекс программ ЭКО версия 3.4. Программное средство 
ELK. Руководство программиста";
       (@<-@52@) "Комплекс программ ЭКО версия 3.4. Средство анализа Базы
знаний XHT. Руководство программиста";
       "Программа ПИРС. Описание применения";
       "Программа ПИРС. Руководство программиста".
       (два последних документа не входят в настоящий гипертекст)

                             weСОДЕРЖАНИЕ:

     @1.@91@ Назначение стандартных интерфейсов
     @2.@92@ Условия применения
     @3.@93@ Общая характеристика стандартных интерфейсов
     @4.@94@ Подготовка стандартных интерфейсов к работе
     @5.@95@ Работа с графическим интерфейсом
     @6.@96@ Работа с информационным интерфейсом

}}
91{{                           @+ п.2@92@   @СОДЕРЖАНИЕ@53@

            wr1. НАЗНАЧЕНИЕ СТАНДАРТНЫХ ИНТЕРФЕЙСОВ

       wr1.1.   Стандартные   интерфейсы   предназначены  для  использования
разработчиками экспертных систем, применяющих систему  ЭКО,  на  последних
фазах  создания  экспертных  систем.  Стандартные  интерфейсы  позволяют в
работающей  экспертной  системе:  заменить  текстовые  формы  вопросов  на
графические,   обеспечить  графическую  помощь  к  задаваемым  вопросам  и
обеспечить получение данных, необходимых для проведения  консультации,  не
только непосредственно от пользователя, но и из базы данных.

       wr1.2.  В  состав  комплекса  программ  ЭКО  входят  два  стандартных
интерфейса: графический и информационный.
       Средства  графического  интерфейса  предназначены  для  организации
диалога с пользователем с помощью графических изображений.
       Информационный интерфейс предназначен для обеспечения программной и
информационной  совместимости  между экспертными системами, разработанными
при помощи комплекса ЭКО, и системами обработки данных (СУБД, ИПС и др.).

}}
92{{                           @+ п.3@93@   @СОДЕРЖАНИЕ@53@   @- п.1@91@

                    wr2. УСЛОВИЯ ПРИМЕНЕНИЯ

       wr2.1.   Стандартные   интерфейсы   функционируют   на   персональных
электронных  вычислительных  машинах  (ПЭВМ)  типа  ЕС  1841 Е11.700.012 и
последующих моделей или на ПЭВМ типа PC/XT, PC/AT с оперативной памятью не
менее 512 Кбайт, цветным графическим дисплеем  (CGA,EGA,VGA),  накопителем
на  жестком  магнитном  диске  емкостью  не менее 5 Мбайт и накопителем на
гибких магнитных дисках емкостью 360 Кбайт в  среде  операционной  системы
АЛЬФА ДОС 16 или совместимой с ней МS DOS версии 3.0 и выше.

       wr2.2  Стандартные  интерфейсы  предназначены  для  работы  в составе
программного комплекса ЭКО.

}}
93{{                           @+ п.4@94@   @СОДЕРЖАНИЕ@53@   @- п.2@92@

         wr3. ОБЩАЯ ХАРАКТЕРИСТИКА СТАНДАРТНЫХ ИНТЕРФЕЙСОВ

       wr3.1.  Стандартные  интерфейсы  представляют  собой  самостоятельные
программы,  взаимодействующие  с  системой  ЭКО через системные вызовы. Их
основная задача состоит в обеспечении информационной совместимости системы
ЭКО с наиболее часто используемыми (стандартными) программными  средствами
такими как средства графического отображения информации и базы данных.

}}
94{{                           @+ п.5@95@   @СОДЕРЖАНИЕ@53@   @- п.3@93@

        wr4. ПОДГОТОВКА СТАНДАРТНЫХ ИНТЕРФЕЙСОВ К РАБОТЕ

      wr4.1. Стандартные интерфейсы размещаются на  4  дискете,
входящей в комплект поставки комплекса ЭКО. Дискета включает:

      - программу отображения (EHELP.EXE);
      - программу графического  перехвата  ( GRS.EXE);
      - графические драйверы ( GDC.DRV, GDE.DRV);
      - программу графического меню ( GQ.EXE);
      - программу создания файла описания зон ( MARKPIC.EXE);
      - программу входной связи ( IEXP.EXE);
      - программу выходной связи ( OEXP.EXE).

      4.2. Для того, чтобы подготовить стандартные интерфейсы
к работе, необходимо инсталлировать комплекс ЭКО  на  жесткий 
магнитный диск  ПЭВМ в соответствии с процедурами, описанными 
в документе  "Комплекс программ ЭКО версия 3.4. Описание при-
менения" (@Раздел 2@222@).
}}
95{{                           @+ п.6@96@   @СОДЕРЖАНИЕ@53@   @- п.4@94@

          wr5. РАБОТА С ГРАФИЧЕСКИМ ИНТЕРФЕЙСОМ


       wr5.1.  Преимущества  представления  информации  в  виде  рисунка  по
сравнению с текстовым представлением той же информации в некоторых случаях
весьма  существенны.  Например,  когда  требуется  указать  местоположение
объекта на карте местности.
       Система ЭКО допускает использование рисунков (изображений) двояко:
     - как иллюстраций;
     - как способ задания вопроса.

       wr5.2.  Иллюстративный способ использования рисунков дает возможность
разработчику экспертной системы  использовать  дополнительную  графическую
информацию  для пояснения утверждений о проблемной области. Эта информация
будет  выдаваться  пользователю  экспертной  системы  как  комментарий   к
текущему  вопросу  в  ответ на нажатие клавиша F9 или F10.
(см. @Раздел 3@63@ документа  "Комплекс программ ЭКО  версия  3.4.
Основные программные средства. Руководство программиста").
 Например, если в ходе консультации пользователю придется выбирать форму
объекта, то в  виде комментария  к  каждой  альтернативе  можно присое-
динить рисунок, наглядно демонстрирующий эту форму.
       Иллюстративный способ использования рисунков реализуется  оболочкой
ЭКО при следующем составе программного и информационного обеспечения:

     - программа отображения;
     - графический драйвер;
     - рисунки ( каждый в отдельном файле);
     - файл соответствия.

     Обращение к программе отображения имеет вид:
         
     EHELP <контекст> <графический драйвер> <файл соответствия>,

     где

     <контекст> - имя цели, к которому требуется помощь,
     <графический драйвер> - CGA или EGA (по умолчанию - EGA),
     <файл соответствия> - имя файла,  который  устанавливает 
соответствие между рисунками и целями модели, которые они ком-
ментируют (по умолчанию - EXP_LST.PIC). 
     
     В случае, когда передаются два параметра, программа EHELP 
интерпретирует второй параметр  как  имя  файла  соответствия, 
если он содержит точку, иначе - считается, что он идентифици-
рует графический драйвер.
     Программа   графического   драйвера   в  зависимости  от
используемого графического адаптера имеет имя GDC.DRV  (  для
CGA) или GDE.DRV  (для EGA и для VGA).  Графические  драйверы 
должны располагаться в директории,  где  находится  программа 
отображения, программа графического перехвата, программа гра-
фического меню, программа  создания  файла описания зон.
     Файл соответствия устанавливает соответствие между рису-
нками и утверждениями (числовыми атрибутами) модели,  которые 
они комментируют. Файл соответствия представляет собой после-
довательность строк в формате:

     <имя утверждения>   <имя файла рисунка> 

каждая из которых  устанавливает  одно  соответствие.  Вместо 
имени утверждения может использоваться ссылка на утверждение.
 
     Пример:

     ф_кв             square.pic
     [форма.круглая]  disk.pic

     в первом случае использовано имя утверждения,
     а во втором - ссылка на утверждение.
 
     Файл соответствия должен находится в директории вместе с
моделью.
     Рисунки  готовятся  любым   графическим   редактором   в
соответствующей  моде ( CGA, EGA или VGA). После изготовления
они  должны  быть  преобразованы  в  формат  HALO  программой
графического  перехвата  (  GRS),  входящей  в  состав данных
средств, следующим образом:
     1) из   MS DOS   запускается  программа  GRS,  которая
становится резидентной.
     Форма командной строки для запуска программы  GRS  имеет
вид:
     GRS <номер графической моды> <графический драйвер>
     Номер  графической  моды  задается  в   соответствии   с
таблицей.

 
 ┌──────────┬─────────────────┬────────────────┬─────────────┐
 │  адаптер │ размер экрана   │ кол-во цветов  │  номер моды │
 ├──────────┼─────────────────┼────────────────┼─────────────┤
 │    CGA   │   320 * 200     │       4        │       0     │
 │          │   640 * 200     │       2        │       1     │
 │    EGA   │   320 * 200     │      16        │       2     │
 │          │   640 * 200     │      16        │       3     │
 │          │   640 * 350     │      16        │       4     │
 │    VGA   │   640 * 350     │      16        │       4     │
 └──────────┴─────────────────┴────────────────┴─────────────┘
 

     Например, строка "grs 4 gde.drv" запускает программу для
экрана 640*350 EGA с драйвером gde.drv.
     2) Из MS DOS запускается любая программа (например, тот
же  графический  редактор),  которая   позволяет   отобразить
рисунок на мониторе.
     3) После того, как рисунок появился на экране монитора,
одновременно нажимаются  клавиши  ALT+ПравыйSHIFT.  В  левом
верхнем  углу  появляется приглашение дать имя файлу рисунка.
Затем  программа  преобразует рисунок  в   формат   HALO   и
записывает в указанный файл.

       wr5.3. Рисунок как вопрос. Текстовая  форма  общения  пользователя  с
экспертной   системой   универсальна   и  достаточна  для  всех  возможных
приложений. Однако, в отдельных случаях текстовые  вопросы  системы  имеют
странный,  искусственных  характер.  Особенно  наглядно  это проявляется с
областях, где экспертиза основывается на анализе графически представляемой
информации ( схемы, графики, карты и т.д.). Программа  графического  меню,
входящая  в  стандартный интерфейс ЭКО, позволяет использовать изображение
на экране монитора как меню для ответов. Идея  использования  рисунка  как
меню  заключается  в  приписывание  фрагментам изображения числовых меток,
которые воспринимаются ЭКО в зависимости от типа вопроса либо как числовые
параметры, либо как номера альтернатив.
       Способ использования рисунка как вопроса состоит в следующем:
       - плоскость рисунка заранее с помощью программы MARKPIC (см.  ниже)
делится  на  прямоугольные  зоны,  которым  приписываются числовые метки в
файле описания зон;
       - вместе с рисунком на экране монитора появляется  курсор,  имеющий
возможность свободно перемещаться по рисунку либо посредством клавиш, либо
- "мыши";
       -  если  в  какой-либо  момент  нажимается  клавиш  ENTER, то в ЭКО
передается  соответствующая  числовая  метка  зоны,  в  которой  находится
курсор; эта числовая метка интерпретируется как ответ на вопрос.
       Способ  использования  рисунков  как вопроса реализуется комплексом
ЭКО при следующем составе программного и информационного обеспечения:

     - программа графического меню,
     - графический драйвер,
     - рисунки ( каждый в отдельном файле),
     - описатели зон( каждый в отдельном файле).

      Программа графического меню называется GQ и имеет следующую  команд-
ную строку:

      GQ <графический драйвер> <файл зон>

     где

     <графический драйвер> - CGA или EGA (по умолчанию - EGA),
     <файл зон> - имя файла, который задает тип вопроса,  имя 
файла рисунка, необязательный текст вопроса и список описате-
лей зон с числовыми метками.
       Вызов   программы   GQ    для    замещения    текстового    вопроса
указывается в действии соответствующего правила  (см.  "Комплекс  программ
ЭКО версия 3.4. Описание   применения",   @Раздел 5@13@).   Имени   программы   должен
предшествовать знак "@". Например,

     ПРАВИЛО  А_зона
     ЦЕЛЬ     место
     ЕСЛИ
     ТО       @gq CGA c.zon

       Процесс подготовки рисунков для демонстрации аналогичен  описанному
ранее.
       Файл  описания зон представляет последовательность строк, в которых
указываются выделенные прямоугольные зоны вместе с  числовой  зоной.  Зона
задается координатами левого верхнего и правого нижнего углов.
       Для  создания  файла  описания  зон  в состав данных средств входит
программа MARKPIC. Эта программа выводит рисунок на экран монитора  вместе
прямоугольной  рамкой.  Рамка  выделяет  некоторую  область  рисунка. Если
нажать клавиш ENTER, то появится запрос  на  имя  зоны,  после  ответа  на
который  координаты  этой области с указанным именем помещаются в выходной
файл. Управление перемещение рамки осуществляется  стандартными  клавишами
перемещения.  Изменение  размеров  рамки  осуществляется теми же клавишами
вместе с одновременным нажатием  клавиша  SHIFT.  Выход  из  программы  по
клавишу ESC.
       Программа MARKPIC имеет следующие входные данные:

     - тип графического адаптера ( CGA,EGA или VGA),
     - файл рисунка,
     - файл, в который будет записан  прообраз  описателя  зон.

       Например, строка

     markpic CGA  disk.pic disk.zon

       показывает рисунок disk.pic в режиме CGA и формирует прототип файла
зон disk.zon.
     Окончательная подготовка файла описания зон проводится с
помощью  любого  текстового  редактора.  Прототип  файла  зон
вызывается в редактор и после имени каждой зоны через  пробел
указывается  числовая метка в формате: 

     <номер альтернативы>:<значение>

     В случае простого вопроса, <номер альтернативы>  заменя-
ется на символ '*'. В случае альтернативного вопроса  <значе-
ние> не указывается.
     Первая строка файла описателя зон имеет формат:

     <тип вопроса> <имя файла рисунка>

     где

     <тип вопроса> - Q (простой вопрос);
                     A (альтернативный вопрос);
                     D (дистрибутивный вопрос).

     В файле зон можно задать текст для отображения в нижней части 
экрана (например, текст вопроса). Строки с этим текстом должны на-
чинаться со спецсимвола '@' и могут быть расположены в любом месте
файла зон. Размер строки для CGA не должен превышать  40  байт,  а 
для  EGA  -  80 байт. Знак "$" в  первой  позиции строки файла зон 
означает, что это комментарий.
     Ниже приведен пример файла зон:

 
D ONE.PIC
@Укажите_места_с_признаками_утечки_?
116 154   0 172 z1       1:5
272 159 120 178 z2       2:3
227 114 205 151 z2       2:2.3
219 130 197 167 z2       2:4
319 166 271 179 z3       3:2
242 104 319   1 zon7     4:5
221 167 319 104 zon6     5:4.55
}}
96{{                                     @СОДЕРЖАНИЕ@53@   @- п.5@95@

          wr6. РАБОТА С ИНФОРМАЦИОННЫМ ИНТЕРФЕЙСОМ

       wr6.1. Информационный  интерфейс  обеспечивает  работу  ЭКО  с  базой
данных  (БД).  Он позволяет выбирать из базы данных информацию необходимую
для проведения консультации, а затем возвращать результат решения задачи в
базу  данных.  В  зависимости  от  СУБД  информационный  интерфейс   может
реализовываться    различными   программами.   Однако   все   они   должны
удовлетворять  единому  протоколу  взаимодействия,  который   определяется
следующими положениями:
       -  вся  информация  из  базы  данных передается в ЭКО единовременно
через внешний  файл  и  получается  системой  ЭКО  с  помощью  предложения
сценария ПРИЕМ;
       -  значения символьных полей базы данных интерпретируются как имена
утверждений, а значения числовых  полей  -  значения  числовых  атрибутов.
Способ   интерпретации   описывается   в   специальном   файле   -   файле
интерпретации;
       -  вся  информация  для  ЭКО хранится в одном логическом файле базы
данных;
       - результат работы ЭКО с  помощью  предложения  сценария  СООБЩЕНИЕ
передается в файл eko.msg, из которого он загружается в базу данных.
     Описание соответствующих предложений сценария  находится
в  документе  "Комплекс программ ЭКО версия  3.4.   Описание   применения"
(@п.5.6@19@).

       wr6.2. Программная и информационная совместимость информационного
интерфейса с программой ПИРС (см. "Программа  ПИРС. Описание   применения";
этот документ не входит в обучающий курс) осуществляется  через  программу 
входной  связи  (iexp.exe)  и  программу выходной связи ( oexp.exe).

       wr6.3. Функции программы входной связи следующие:
       получить данные от БД ПИРС;
       интерпретировать данные БД в терминах переменных программы ЭКО;
       создать файл входных данных для предложения сценария ПРИЕМ.

       Интерпретация  и  подготовка  входной  информации  для  системы ЭКО
осуществляется с  помощью  файла  интерпретации.  Его  имя  указывается  в
фиктивном поле файла описания документа программы ПИРС.
       Файл  интерпретации состоит из совокупности текстовых строк. Каждая
строка этого файла строго по порядку соответствует одному  полю  в  списке
входных данных, передаваемых из программы ПИРС, и имеет следующий вид:

       <описатель данного> <имя переменной>,

       где <описатель данного> - двухбуквенное слово, имеющее значения:
       EN - поле простого аспекта, числовое;
       ES - поле простого аспекта, символьное;
       MS - поле множественного аспекта, символьное;
       <имя  переменной> - либо имя числовой переменной вызываемой модели,
которой необходимо присвоить значение, полученное из базы данных, либо имя
символьного атрибута, значение которого получается из базы данных.
       В результате интерпретации входных  данных  строится  файл  входных
данных   EXP.#IN,   который   воспринимается   программой  ЭКО  с  помощью
предложения сценария ПРИЕМ.

       wr6.4.  Программа  выходной  связи   осуществляет   следующий   набор
операций:
       считывание  результата,  полученного  при  решении задачи, из файла
EKO.MSG;
       размещение его в поле выходного списка, сформированного  программой
ПИРС;
       уничтожение файлов входных данных и сообщения EKO.MSG.

       wr6.5. Использование системы ЭКО как подзадачи программы ПИРС требует
описания следующей последовательности вызовов:
     - программа входной связи,
     - система ЭКО,
     - программа выходной связи.

       Все   вызовы   программ   осуществляются   программой   ПИРС   (см.
"Программа ПИРС. Руководство программиста" Раздел  6.) с передачей данных 
через оперативную память.

       wr6.6.  Рассмотрим  пример  информационного  интерфейса. Пусть в базе
данных есть три атрибута А1(символьный),  соответствующий  переменной  ЭКО
'ХАРАКТЕР', A2(числовой)-'ВЕС' и A3(символьный)-'РИСК_ЗАБОЛЕВАНИЯ'. В ходе
консультации  модель ILL использует значения атрибутов A1 и A2 для решения
задачи, и помещает в A3 результат ее  решения.  В  этом  случае  поле  для
указания  имени  файла  интерпретации  и  собственно  вызовы описываются в
описании документа программы ПИРС строками:

*
С #1 б НП 0 0
Ф (            )
П ff ** 0 *Н
З <имя файла интерпретации>
*
С #1 б шп 1
Ф  (                         )
П п7 ** 0 *Н
Н п7 ** 0 40 н
З ex iexp ff A1 A2
*
С #1 б шп 1
Ф  (                         )
П п8 ** 0 *Н
Н п8 ** 0 40 н
З ep ekocn ILL
*
С #1 б шп 1
Ф  (                         )
П п9 ** 0 *Н
Н п9 ** 0 40 н
З ex oexp > A3

     Файл интерпретации имеет вид:

ES ХАРАКТЕР
EN ВЕС

}}
